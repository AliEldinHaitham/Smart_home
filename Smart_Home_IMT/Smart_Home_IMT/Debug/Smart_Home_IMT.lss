
Smart_Home_IMT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007546  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001aa  00800060  00007546  000075da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000060  0080020a  0080020a  00007784  2**0
                  ALLOC
  3 .stab         000044dc  00000000  00000000  00007784  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017af  00000000  00000000  0000bc60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000280  00000000  00000000  0000d40f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000002d7  00000000  00000000  0000d68f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003aed  00000000  00000000  0000d966  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001b7e  00000000  00000000  00011453  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001a6d  00000000  00000000  00012fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002a0  00000000  00000000  00014a40  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003d1  00000000  00000000  00014ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000027e6  00000000  00000000  000150b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  00017897  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 61 1d 	jmp	0x3ac2	; 0x3ac2 <__vector_1>
       8:	0c 94 8e 1d 	jmp	0x3b1c	; 0x3b1c <__vector_2>
       c:	0c 94 bb 1d 	jmp	0x3b76	; 0x3b76 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 04 36 	jmp	0x6c08	; 0x6c08 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 77 35 	jmp	0x6aee	; 0x6aee <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e4       	ldi	r30, 0x46	; 70
      68:	f5 e7       	ldi	r31, 0x75	; 117
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 30       	cpi	r26, 0x0A	; 10
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	aa e0       	ldi	r26, 0x0A	; 10
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 36       	cpi	r26, 0x6A	; 106
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <main>
      8a:	0c 94 a1 3a 	jmp	0x7542	; 0x7542 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__muldi3>:
      92:	a0 e3       	ldi	r26, 0x30	; 48
      94:	b0 e0       	ldi	r27, 0x00	; 0
      96:	ef e4       	ldi	r30, 0x4F	; 79
      98:	f0 e0       	ldi	r31, 0x00	; 0
      9a:	0c 94 6a 3a 	jmp	0x74d4	; 0x74d4 <__prologue_saves__>
      9e:	a8 e0       	ldi	r26, 0x08	; 8
      a0:	4e 01       	movw	r8, r28
      a2:	08 94       	sec
      a4:	81 1c       	adc	r8, r1
      a6:	91 1c       	adc	r9, r1
      a8:	f4 01       	movw	r30, r8
      aa:	ba 2f       	mov	r27, r26
      ac:	11 92       	st	Z+, r1
      ae:	ba 95       	dec	r27
      b0:	e9 f7       	brne	.-6      	; 0xac <__muldi3+0x1a>
      b2:	29 83       	std	Y+1, r18	; 0x01
      b4:	3a 83       	std	Y+2, r19	; 0x02
      b6:	4b 83       	std	Y+3, r20	; 0x03
      b8:	5c 83       	std	Y+4, r21	; 0x04
      ba:	6d 83       	std	Y+5, r22	; 0x05
      bc:	7e 83       	std	Y+6, r23	; 0x06
      be:	8f 83       	std	Y+7, r24	; 0x07
      c0:	98 87       	std	Y+8, r25	; 0x08
      c2:	ce 01       	movw	r24, r28
      c4:	09 96       	adiw	r24, 0x09	; 9
      c6:	fc 01       	movw	r30, r24
      c8:	11 92       	st	Z+, r1
      ca:	aa 95       	dec	r26
      cc:	e9 f7       	brne	.-6      	; 0xc8 <__muldi3+0x36>
      ce:	a9 86       	std	Y+9, r10	; 0x09
      d0:	ba 86       	std	Y+10, r11	; 0x0a
      d2:	cb 86       	std	Y+11, r12	; 0x0b
      d4:	dc 86       	std	Y+12, r13	; 0x0c
      d6:	ed 86       	std	Y+13, r14	; 0x0d
      d8:	fe 86       	std	Y+14, r15	; 0x0e
      da:	0f 87       	std	Y+15, r16	; 0x0f
      dc:	18 8b       	std	Y+16, r17	; 0x10
      de:	29 81       	ldd	r18, Y+1	; 0x01
      e0:	3a 81       	ldd	r19, Y+2	; 0x02
      e2:	4b 81       	ldd	r20, Y+3	; 0x03
      e4:	5c 81       	ldd	r21, Y+4	; 0x04
      e6:	2d a7       	std	Y+45, r18	; 0x2d
      e8:	3e a7       	std	Y+46, r19	; 0x2e
      ea:	4f a7       	std	Y+47, r20	; 0x2f
      ec:	58 ab       	std	Y+48, r21	; 0x30
      ee:	79 01       	movw	r14, r18
      f0:	8a 01       	movw	r16, r20
      f2:	8f ef       	ldi	r24, 0xFF	; 255
      f4:	9f ef       	ldi	r25, 0xFF	; 255
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b0 e0       	ldi	r27, 0x00	; 0
      fa:	e8 22       	and	r14, r24
      fc:	f9 22       	and	r15, r25
      fe:	0a 23       	and	r16, r26
     100:	1b 23       	and	r17, r27
     102:	1a 01       	movw	r2, r20
     104:	44 24       	eor	r4, r4
     106:	55 24       	eor	r5, r5
     108:	29 85       	ldd	r18, Y+9	; 0x09
     10a:	3a 85       	ldd	r19, Y+10	; 0x0a
     10c:	4b 85       	ldd	r20, Y+11	; 0x0b
     10e:	5c 85       	ldd	r21, Y+12	; 0x0c
     110:	29 a7       	std	Y+41, r18	; 0x29
     112:	3a a7       	std	Y+42, r19	; 0x2a
     114:	4b a7       	std	Y+43, r20	; 0x2b
     116:	5c a7       	std	Y+44, r21	; 0x2c
     118:	59 01       	movw	r10, r18
     11a:	6a 01       	movw	r12, r20
     11c:	a8 22       	and	r10, r24
     11e:	b9 22       	and	r11, r25
     120:	ca 22       	and	r12, r26
     122:	db 22       	and	r13, r27
     124:	3a 01       	movw	r6, r20
     126:	88 24       	eor	r8, r8
     128:	99 24       	eor	r9, r9
     12a:	c6 01       	movw	r24, r12
     12c:	b5 01       	movw	r22, r10
     12e:	a8 01       	movw	r20, r16
     130:	97 01       	movw	r18, r14
     132:	0e 94 fa 39 	call	0x73f4	; 0x73f4 <__mulsi3>
     136:	6d a3       	std	Y+37, r22	; 0x25
     138:	7e a3       	std	Y+38, r23	; 0x26
     13a:	8f a3       	std	Y+39, r24	; 0x27
     13c:	98 a7       	std	Y+40, r25	; 0x28
     13e:	c4 01       	movw	r24, r8
     140:	b3 01       	movw	r22, r6
     142:	0e 94 fa 39 	call	0x73f4	; 0x73f4 <__mulsi3>
     146:	69 a3       	std	Y+33, r22	; 0x21
     148:	7a a3       	std	Y+34, r23	; 0x22
     14a:	8b a3       	std	Y+35, r24	; 0x23
     14c:	9c a3       	std	Y+36, r25	; 0x24
     14e:	c6 01       	movw	r24, r12
     150:	b5 01       	movw	r22, r10
     152:	a2 01       	movw	r20, r4
     154:	91 01       	movw	r18, r2
     156:	0e 94 fa 39 	call	0x73f4	; 0x73f4 <__mulsi3>
     15a:	7b 01       	movw	r14, r22
     15c:	8c 01       	movw	r16, r24
     15e:	c4 01       	movw	r24, r8
     160:	b3 01       	movw	r22, r6
     162:	0e 94 fa 39 	call	0x73f4	; 0x73f4 <__mulsi3>
     166:	5b 01       	movw	r10, r22
     168:	6c 01       	movw	r12, r24
     16a:	89 a1       	ldd	r24, Y+33	; 0x21
     16c:	9a a1       	ldd	r25, Y+34	; 0x22
     16e:	ab a1       	ldd	r26, Y+35	; 0x23
     170:	bc a1       	ldd	r27, Y+36	; 0x24
     172:	8e 0d       	add	r24, r14
     174:	9f 1d       	adc	r25, r15
     176:	a0 1f       	adc	r26, r16
     178:	b1 1f       	adc	r27, r17
     17a:	89 a3       	std	Y+33, r24	; 0x21
     17c:	9a a3       	std	Y+34, r25	; 0x22
     17e:	ab a3       	std	Y+35, r26	; 0x23
     180:	bc a3       	std	Y+36, r27	; 0x24
     182:	2d a1       	ldd	r18, Y+37	; 0x25
     184:	3e a1       	ldd	r19, Y+38	; 0x26
     186:	4f a1       	ldd	r20, Y+39	; 0x27
     188:	58 a5       	ldd	r21, Y+40	; 0x28
     18a:	ca 01       	movw	r24, r20
     18c:	aa 27       	eor	r26, r26
     18e:	bb 27       	eor	r27, r27
     190:	29 a1       	ldd	r18, Y+33	; 0x21
     192:	3a a1       	ldd	r19, Y+34	; 0x22
     194:	4b a1       	ldd	r20, Y+35	; 0x23
     196:	5c a1       	ldd	r21, Y+36	; 0x24
     198:	28 0f       	add	r18, r24
     19a:	39 1f       	adc	r19, r25
     19c:	4a 1f       	adc	r20, r26
     19e:	5b 1f       	adc	r21, r27
     1a0:	29 a3       	std	Y+33, r18	; 0x21
     1a2:	3a a3       	std	Y+34, r19	; 0x22
     1a4:	4b a3       	std	Y+35, r20	; 0x23
     1a6:	5c a3       	std	Y+36, r21	; 0x24
     1a8:	2e 15       	cp	r18, r14
     1aa:	3f 05       	cpc	r19, r15
     1ac:	40 07       	cpc	r20, r16
     1ae:	51 07       	cpc	r21, r17
     1b0:	40 f4       	brcc	.+16     	; 0x1c2 <__muldi3+0x130>
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	a1 e0       	ldi	r26, 0x01	; 1
     1b8:	b0 e0       	ldi	r27, 0x00	; 0
     1ba:	a8 0e       	add	r10, r24
     1bc:	b9 1e       	adc	r11, r25
     1be:	ca 1e       	adc	r12, r26
     1c0:	db 1e       	adc	r13, r27
     1c2:	89 a1       	ldd	r24, Y+33	; 0x21
     1c4:	9a a1       	ldd	r25, Y+34	; 0x22
     1c6:	ab a1       	ldd	r26, Y+35	; 0x23
     1c8:	bc a1       	ldd	r27, Y+36	; 0x24
     1ca:	9d 01       	movw	r18, r26
     1cc:	44 27       	eor	r20, r20
     1ce:	55 27       	eor	r21, r21
     1d0:	2a 0d       	add	r18, r10
     1d2:	3b 1d       	adc	r19, r11
     1d4:	4c 1d       	adc	r20, r12
     1d6:	5d 1d       	adc	r21, r13
     1d8:	2d 8f       	std	Y+29, r18	; 0x1d
     1da:	3e 8f       	std	Y+30, r19	; 0x1e
     1dc:	4f 8f       	std	Y+31, r20	; 0x1f
     1de:	58 a3       	std	Y+32, r21	; 0x20
     1e0:	6c 01       	movw	r12, r24
     1e2:	bb 24       	eor	r11, r11
     1e4:	aa 24       	eor	r10, r10
     1e6:	8d a1       	ldd	r24, Y+37	; 0x25
     1e8:	9e a1       	ldd	r25, Y+38	; 0x26
     1ea:	af a1       	ldd	r26, Y+39	; 0x27
     1ec:	b8 a5       	ldd	r27, Y+40	; 0x28
     1ee:	a0 70       	andi	r26, 0x00	; 0
     1f0:	b0 70       	andi	r27, 0x00	; 0
     1f2:	a8 0e       	add	r10, r24
     1f4:	b9 1e       	adc	r11, r25
     1f6:	ca 1e       	adc	r12, r26
     1f8:	db 1e       	adc	r13, r27
     1fa:	a9 8e       	std	Y+25, r10	; 0x19
     1fc:	ba 8e       	std	Y+26, r11	; 0x1a
     1fe:	cb 8e       	std	Y+27, r12	; 0x1b
     200:	dc 8e       	std	Y+28, r13	; 0x1c
     202:	9a 8c       	ldd	r9, Y+26	; 0x1a
     204:	8b 8c       	ldd	r8, Y+27	; 0x1b
     206:	7c 8c       	ldd	r7, Y+28	; 0x1c
     208:	9e 8d       	ldd	r25, Y+30	; 0x1e
     20a:	6f 8d       	ldd	r22, Y+31	; 0x1f
     20c:	78 a1       	ldd	r23, Y+32	; 0x20
     20e:	fe 01       	movw	r30, r28
     210:	71 96       	adiw	r30, 0x11	; 17
     212:	88 e0       	ldi	r24, 0x08	; 8
     214:	df 01       	movw	r26, r30
     216:	1d 92       	st	X+, r1
     218:	8a 95       	dec	r24
     21a:	e9 f7       	brne	.-6      	; 0x216 <__muldi3+0x184>
     21c:	2d 8b       	std	Y+21, r18	; 0x15
     21e:	9e 8b       	std	Y+22, r25	; 0x16
     220:	6f 8b       	std	Y+23, r22	; 0x17
     222:	78 8f       	std	Y+24, r23	; 0x18
     224:	2d 85       	ldd	r18, Y+13	; 0x0d
     226:	3e 85       	ldd	r19, Y+14	; 0x0e
     228:	4f 85       	ldd	r20, Y+15	; 0x0f
     22a:	58 89       	ldd	r21, Y+16	; 0x10
     22c:	6d a5       	ldd	r22, Y+45	; 0x2d
     22e:	7e a5       	ldd	r23, Y+46	; 0x2e
     230:	8f a5       	ldd	r24, Y+47	; 0x2f
     232:	98 a9       	ldd	r25, Y+48	; 0x30
     234:	0e 94 fa 39 	call	0x73f4	; 0x73f4 <__mulsi3>
     238:	7b 01       	movw	r14, r22
     23a:	8c 01       	movw	r16, r24
     23c:	2d 81       	ldd	r18, Y+5	; 0x05
     23e:	3e 81       	ldd	r19, Y+6	; 0x06
     240:	4f 81       	ldd	r20, Y+7	; 0x07
     242:	58 85       	ldd	r21, Y+8	; 0x08
     244:	69 a5       	ldd	r22, Y+41	; 0x29
     246:	7a a5       	ldd	r23, Y+42	; 0x2a
     248:	8b a5       	ldd	r24, Y+43	; 0x2b
     24a:	9c a5       	ldd	r25, Y+44	; 0x2c
     24c:	0e 94 fa 39 	call	0x73f4	; 0x73f4 <__mulsi3>
     250:	e6 0e       	add	r14, r22
     252:	f7 1e       	adc	r15, r23
     254:	08 1f       	adc	r16, r24
     256:	19 1f       	adc	r17, r25
     258:	6d 89       	ldd	r22, Y+21	; 0x15
     25a:	7e 89       	ldd	r23, Y+22	; 0x16
     25c:	8f 89       	ldd	r24, Y+23	; 0x17
     25e:	98 8d       	ldd	r25, Y+24	; 0x18
     260:	6e 0d       	add	r22, r14
     262:	7f 1d       	adc	r23, r15
     264:	80 1f       	adc	r24, r16
     266:	91 1f       	adc	r25, r17
     268:	6d 8b       	std	Y+21, r22	; 0x15
     26a:	7e 8b       	std	Y+22, r23	; 0x16
     26c:	8f 8b       	std	Y+23, r24	; 0x17
     26e:	98 8f       	std	Y+24, r25	; 0x18
     270:	ee 89       	ldd	r30, Y+22	; 0x16
     272:	2a 2d       	mov	r18, r10
     274:	39 2d       	mov	r19, r9
     276:	48 2d       	mov	r20, r8
     278:	57 2d       	mov	r21, r7
     27a:	7e 2f       	mov	r23, r30
     27c:	8f 89       	ldd	r24, Y+23	; 0x17
     27e:	98 8d       	ldd	r25, Y+24	; 0x18
     280:	e0 96       	adiw	r28, 0x30	; 48
     282:	e2 e1       	ldi	r30, 0x12	; 18
     284:	0c 94 86 3a 	jmp	0x750c	; 0x750c <__epilogue_restores__>

00000288 <__ashldi3>:
     288:	ef 92       	push	r14
     28a:	ff 92       	push	r15
     28c:	0f 93       	push	r16
     28e:	df 93       	push	r29
     290:	cf 93       	push	r28
     292:	cd b7       	in	r28, 0x3d	; 61
     294:	de b7       	in	r29, 0x3e	; 62
     296:	60 97       	sbiw	r28, 0x10	; 16
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	f8 94       	cli
     29c:	de bf       	out	0x3e, r29	; 62
     29e:	0f be       	out	0x3f, r0	; 63
     2a0:	cd bf       	out	0x3d, r28	; 61
     2a2:	a8 2f       	mov	r26, r24
     2a4:	00 23       	and	r16, r16
     2a6:	09 f4       	brne	.+2      	; 0x2aa <__ashldi3+0x22>
     2a8:	61 c0       	rjmp	.+194    	; 0x36c <__ashldi3+0xe4>
     2aa:	7e 01       	movw	r14, r28
     2ac:	08 94       	sec
     2ae:	e1 1c       	adc	r14, r1
     2b0:	f1 1c       	adc	r15, r1
     2b2:	88 e0       	ldi	r24, 0x08	; 8
     2b4:	f7 01       	movw	r30, r14
     2b6:	11 92       	st	Z+, r1
     2b8:	8a 95       	dec	r24
     2ba:	e9 f7       	brne	.-6      	; 0x2b6 <__ashldi3+0x2e>
     2bc:	29 83       	std	Y+1, r18	; 0x01
     2be:	3a 83       	std	Y+2, r19	; 0x02
     2c0:	4b 83       	std	Y+3, r20	; 0x03
     2c2:	5c 83       	std	Y+4, r21	; 0x04
     2c4:	6d 83       	std	Y+5, r22	; 0x05
     2c6:	7e 83       	std	Y+6, r23	; 0x06
     2c8:	af 83       	std	Y+7, r26	; 0x07
     2ca:	98 87       	std	Y+8, r25	; 0x08
     2cc:	80 e2       	ldi	r24, 0x20	; 32
     2ce:	80 1b       	sub	r24, r16
     2d0:	e8 2f       	mov	r30, r24
     2d2:	ff 27       	eor	r31, r31
     2d4:	e7 fd       	sbrc	r30, 7
     2d6:	f0 95       	com	r31
     2d8:	49 81       	ldd	r20, Y+1	; 0x01
     2da:	5a 81       	ldd	r21, Y+2	; 0x02
     2dc:	6b 81       	ldd	r22, Y+3	; 0x03
     2de:	7c 81       	ldd	r23, Y+4	; 0x04
     2e0:	18 16       	cp	r1, r24
     2e2:	84 f0       	brlt	.+32     	; 0x304 <__ashldi3+0x7c>
     2e4:	19 86       	std	Y+9, r1	; 0x09
     2e6:	1a 86       	std	Y+10, r1	; 0x0a
     2e8:	1b 86       	std	Y+11, r1	; 0x0b
     2ea:	1c 86       	std	Y+12, r1	; 0x0c
     2ec:	88 27       	eor	r24, r24
     2ee:	99 27       	eor	r25, r25
     2f0:	8e 1b       	sub	r24, r30
     2f2:	9f 0b       	sbc	r25, r31
     2f4:	04 c0       	rjmp	.+8      	; 0x2fe <__ashldi3+0x76>
     2f6:	44 0f       	add	r20, r20
     2f8:	55 1f       	adc	r21, r21
     2fa:	66 1f       	adc	r22, r22
     2fc:	77 1f       	adc	r23, r23
     2fe:	8a 95       	dec	r24
     300:	d2 f7       	brpl	.-12     	; 0x2f6 <__ashldi3+0x6e>
     302:	28 c0       	rjmp	.+80     	; 0x354 <__ashldi3+0xcc>
     304:	20 2f       	mov	r18, r16
     306:	33 27       	eor	r19, r19
     308:	27 fd       	sbrc	r18, 7
     30a:	30 95       	com	r19
     30c:	db 01       	movw	r26, r22
     30e:	ca 01       	movw	r24, r20
     310:	02 2e       	mov	r0, r18
     312:	04 c0       	rjmp	.+8      	; 0x31c <__ashldi3+0x94>
     314:	88 0f       	add	r24, r24
     316:	99 1f       	adc	r25, r25
     318:	aa 1f       	adc	r26, r26
     31a:	bb 1f       	adc	r27, r27
     31c:	0a 94       	dec	r0
     31e:	d2 f7       	brpl	.-12     	; 0x314 <__ashldi3+0x8c>
     320:	89 87       	std	Y+9, r24	; 0x09
     322:	9a 87       	std	Y+10, r25	; 0x0a
     324:	ab 87       	std	Y+11, r26	; 0x0b
     326:	bc 87       	std	Y+12, r27	; 0x0c
     328:	04 c0       	rjmp	.+8      	; 0x332 <__ashldi3+0xaa>
     32a:	76 95       	lsr	r23
     32c:	67 95       	ror	r22
     32e:	57 95       	ror	r21
     330:	47 95       	ror	r20
     332:	ea 95       	dec	r30
     334:	d2 f7       	brpl	.-12     	; 0x32a <__ashldi3+0xa2>
     336:	8d 81       	ldd	r24, Y+5	; 0x05
     338:	9e 81       	ldd	r25, Y+6	; 0x06
     33a:	af 81       	ldd	r26, Y+7	; 0x07
     33c:	b8 85       	ldd	r27, Y+8	; 0x08
     33e:	04 c0       	rjmp	.+8      	; 0x348 <__ashldi3+0xc0>
     340:	88 0f       	add	r24, r24
     342:	99 1f       	adc	r25, r25
     344:	aa 1f       	adc	r26, r26
     346:	bb 1f       	adc	r27, r27
     348:	2a 95       	dec	r18
     34a:	d2 f7       	brpl	.-12     	; 0x340 <__ashldi3+0xb8>
     34c:	48 2b       	or	r20, r24
     34e:	59 2b       	or	r21, r25
     350:	6a 2b       	or	r22, r26
     352:	7b 2b       	or	r23, r27
     354:	4d 87       	std	Y+13, r20	; 0x0d
     356:	5e 87       	std	Y+14, r21	; 0x0e
     358:	6f 87       	std	Y+15, r22	; 0x0f
     35a:	78 8b       	std	Y+16, r23	; 0x10
     35c:	29 85       	ldd	r18, Y+9	; 0x09
     35e:	3a 85       	ldd	r19, Y+10	; 0x0a
     360:	4b 85       	ldd	r20, Y+11	; 0x0b
     362:	5c 85       	ldd	r21, Y+12	; 0x0c
     364:	6d 85       	ldd	r22, Y+13	; 0x0d
     366:	7e 85       	ldd	r23, Y+14	; 0x0e
     368:	af 85       	ldd	r26, Y+15	; 0x0f
     36a:	98 89       	ldd	r25, Y+16	; 0x10
     36c:	8a 2f       	mov	r24, r26
     36e:	60 96       	adiw	r28, 0x10	; 16
     370:	0f b6       	in	r0, 0x3f	; 63
     372:	f8 94       	cli
     374:	de bf       	out	0x3e, r29	; 62
     376:	0f be       	out	0x3f, r0	; 63
     378:	cd bf       	out	0x3d, r28	; 61
     37a:	cf 91       	pop	r28
     37c:	df 91       	pop	r29
     37e:	0f 91       	pop	r16
     380:	ff 90       	pop	r15
     382:	ef 90       	pop	r14
     384:	08 95       	ret

00000386 <__fixunssfsi>:
     386:	ef 92       	push	r14
     388:	ff 92       	push	r15
     38a:	0f 93       	push	r16
     38c:	1f 93       	push	r17
     38e:	7b 01       	movw	r14, r22
     390:	8c 01       	movw	r16, r24
     392:	20 e0       	ldi	r18, 0x00	; 0
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	40 e0       	ldi	r20, 0x00	; 0
     398:	5f e4       	ldi	r21, 0x4F	; 79
     39a:	0e 94 30 13 	call	0x2660	; 0x2660 <__gesf2>
     39e:	88 23       	and	r24, r24
     3a0:	8c f0       	brlt	.+34     	; 0x3c4 <__fixunssfsi+0x3e>
     3a2:	c8 01       	movw	r24, r16
     3a4:	b7 01       	movw	r22, r14
     3a6:	20 e0       	ldi	r18, 0x00	; 0
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	40 e0       	ldi	r20, 0x00	; 0
     3ac:	5f e4       	ldi	r21, 0x4F	; 79
     3ae:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__subsf3>
     3b2:	0e 94 ee 13 	call	0x27dc	; 0x27dc <__fixsfsi>
     3b6:	9b 01       	movw	r18, r22
     3b8:	ac 01       	movw	r20, r24
     3ba:	20 50       	subi	r18, 0x00	; 0
     3bc:	30 40       	sbci	r19, 0x00	; 0
     3be:	40 40       	sbci	r20, 0x00	; 0
     3c0:	50 48       	sbci	r21, 0x80	; 128
     3c2:	06 c0       	rjmp	.+12     	; 0x3d0 <__fixunssfsi+0x4a>
     3c4:	c8 01       	movw	r24, r16
     3c6:	b7 01       	movw	r22, r14
     3c8:	0e 94 ee 13 	call	0x27dc	; 0x27dc <__fixsfsi>
     3cc:	9b 01       	movw	r18, r22
     3ce:	ac 01       	movw	r20, r24
     3d0:	b9 01       	movw	r22, r18
     3d2:	ca 01       	movw	r24, r20
     3d4:	1f 91       	pop	r17
     3d6:	0f 91       	pop	r16
     3d8:	ff 90       	pop	r15
     3da:	ef 90       	pop	r14
     3dc:	08 95       	ret

000003de <__floatundisf>:
     3de:	a2 e0       	ldi	r26, 0x02	; 2
     3e0:	b0 e0       	ldi	r27, 0x00	; 0
     3e2:	e5 ef       	ldi	r30, 0xF5	; 245
     3e4:	f1 e0       	ldi	r31, 0x01	; 1
     3e6:	0c 94 6a 3a 	jmp	0x74d4	; 0x74d4 <__prologue_saves__>
     3ea:	12 2f       	mov	r17, r18
     3ec:	b3 2e       	mov	r11, r19
     3ee:	a4 2e       	mov	r10, r20
     3f0:	95 2e       	mov	r9, r21
     3f2:	86 2e       	mov	r8, r22
     3f4:	37 2e       	mov	r3, r23
     3f6:	28 2e       	mov	r2, r24
     3f8:	9a 83       	std	Y+2, r25	; 0x02
     3fa:	c2 2e       	mov	r12, r18
     3fc:	d3 2e       	mov	r13, r19
     3fe:	e4 2e       	mov	r14, r20
     400:	f5 2e       	mov	r15, r21
     402:	a7 01       	movw	r20, r14
     404:	96 01       	movw	r18, r12
     406:	60 e0       	ldi	r22, 0x00	; 0
     408:	70 e0       	ldi	r23, 0x00	; 0
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	21 17       	cp	r18, r17
     410:	a1 f4       	brne	.+40     	; 0x43a <__floatundisf+0x5c>
     412:	3b 15       	cp	r19, r11
     414:	91 f4       	brne	.+36     	; 0x43a <__floatundisf+0x5c>
     416:	4a 15       	cp	r20, r10
     418:	81 f4       	brne	.+32     	; 0x43a <__floatundisf+0x5c>
     41a:	59 15       	cp	r21, r9
     41c:	71 f4       	brne	.+28     	; 0x43a <__floatundisf+0x5c>
     41e:	68 15       	cp	r22, r8
     420:	61 f4       	brne	.+24     	; 0x43a <__floatundisf+0x5c>
     422:	73 15       	cp	r23, r3
     424:	51 f4       	brne	.+20     	; 0x43a <__floatundisf+0x5c>
     426:	82 15       	cp	r24, r2
     428:	41 f4       	brne	.+16     	; 0x43a <__floatundisf+0x5c>
     42a:	aa 81       	ldd	r26, Y+2	; 0x02
     42c:	9a 17       	cp	r25, r26
     42e:	29 f4       	brne	.+10     	; 0x43a <__floatundisf+0x5c>
     430:	c7 01       	movw	r24, r14
     432:	b6 01       	movw	r22, r12
     434:	0e 94 42 14 	call	0x2884	; 0x2884 <__floatunsisf>
     438:	aa c0       	rjmp	.+340    	; 0x58e <__floatundisf+0x1b0>
     43a:	21 2f       	mov	r18, r17
     43c:	3b 2d       	mov	r19, r11
     43e:	4a 2d       	mov	r20, r10
     440:	59 2d       	mov	r21, r9
     442:	68 2d       	mov	r22, r8
     444:	73 2d       	mov	r23, r3
     446:	82 2d       	mov	r24, r2
     448:	9a 81       	ldd	r25, Y+2	; 0x02
     44a:	00 e2       	ldi	r16, 0x20	; 32
     44c:	0e 94 bb 14 	call	0x2976	; 0x2976 <__lshrdi3>
     450:	c9 01       	movw	r24, r18
     452:	da 01       	movw	r26, r20
     454:	80 30       	cpi	r24, 0x00	; 0
     456:	e0 e0       	ldi	r30, 0x00	; 0
     458:	9e 07       	cpc	r25, r30
     45a:	e1 e0       	ldi	r30, 0x01	; 1
     45c:	ae 07       	cpc	r26, r30
     45e:	e0 e0       	ldi	r30, 0x00	; 0
     460:	be 07       	cpc	r27, r30
     462:	80 f4       	brcc	.+32     	; 0x484 <__floatundisf+0xa6>
     464:	8f 3f       	cpi	r24, 0xFF	; 255
     466:	91 05       	cpc	r25, r1
     468:	a1 05       	cpc	r26, r1
     46a:	b1 05       	cpc	r27, r1
     46c:	31 f0       	breq	.+12     	; 0x47a <__floatundisf+0x9c>
     46e:	28 f0       	brcs	.+10     	; 0x47a <__floatundisf+0x9c>
     470:	28 e0       	ldi	r18, 0x08	; 8
     472:	30 e0       	ldi	r19, 0x00	; 0
     474:	40 e0       	ldi	r20, 0x00	; 0
     476:	50 e0       	ldi	r21, 0x00	; 0
     478:	16 c0       	rjmp	.+44     	; 0x4a6 <__floatundisf+0xc8>
     47a:	20 e0       	ldi	r18, 0x00	; 0
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	40 e0       	ldi	r20, 0x00	; 0
     480:	50 e0       	ldi	r21, 0x00	; 0
     482:	11 c0       	rjmp	.+34     	; 0x4a6 <__floatundisf+0xc8>
     484:	80 30       	cpi	r24, 0x00	; 0
     486:	f0 e0       	ldi	r31, 0x00	; 0
     488:	9f 07       	cpc	r25, r31
     48a:	f0 e0       	ldi	r31, 0x00	; 0
     48c:	af 07       	cpc	r26, r31
     48e:	f1 e0       	ldi	r31, 0x01	; 1
     490:	bf 07       	cpc	r27, r31
     492:	28 f0       	brcs	.+10     	; 0x49e <__floatundisf+0xc0>
     494:	28 e1       	ldi	r18, 0x18	; 24
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	40 e0       	ldi	r20, 0x00	; 0
     49a:	50 e0       	ldi	r21, 0x00	; 0
     49c:	04 c0       	rjmp	.+8      	; 0x4a6 <__floatundisf+0xc8>
     49e:	20 e1       	ldi	r18, 0x10	; 16
     4a0:	30 e0       	ldi	r19, 0x00	; 0
     4a2:	40 e0       	ldi	r20, 0x00	; 0
     4a4:	50 e0       	ldi	r21, 0x00	; 0
     4a6:	02 2e       	mov	r0, r18
     4a8:	04 c0       	rjmp	.+8      	; 0x4b2 <__floatundisf+0xd4>
     4aa:	b6 95       	lsr	r27
     4ac:	a7 95       	ror	r26
     4ae:	97 95       	ror	r25
     4b0:	87 95       	ror	r24
     4b2:	0a 94       	dec	r0
     4b4:	d2 f7       	brpl	.-12     	; 0x4aa <__floatundisf+0xcc>
     4b6:	fc 01       	movw	r30, r24
     4b8:	e2 50       	subi	r30, 0x02	; 2
     4ba:	ff 4f       	sbci	r31, 0xFF	; 255
     4bc:	80 81       	ld	r24, Z
     4be:	29 01       	movw	r4, r18
     4c0:	3a 01       	movw	r6, r20
     4c2:	48 0e       	add	r4, r24
     4c4:	51 1c       	adc	r5, r1
     4c6:	61 1c       	adc	r6, r1
     4c8:	71 1c       	adc	r7, r1
     4ca:	49 82       	std	Y+1, r4	; 0x01
     4cc:	21 2f       	mov	r18, r17
     4ce:	3b 2d       	mov	r19, r11
     4d0:	4a 2d       	mov	r20, r10
     4d2:	59 2d       	mov	r21, r9
     4d4:	68 2d       	mov	r22, r8
     4d6:	73 2d       	mov	r23, r3
     4d8:	82 2d       	mov	r24, r2
     4da:	9a 81       	ldd	r25, Y+2	; 0x02
     4dc:	04 2d       	mov	r16, r4
     4de:	0e 94 bb 14 	call	0x2976	; 0x2976 <__lshrdi3>
     4e2:	c9 01       	movw	r24, r18
     4e4:	da 01       	movw	r26, r20
     4e6:	4c 01       	movw	r8, r24
     4e8:	5d 01       	movw	r10, r26
     4ea:	80 e2       	ldi	r24, 0x20	; 32
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	84 19       	sub	r24, r4
     4f0:	95 09       	sbc	r25, r5
     4f2:	04 c0       	rjmp	.+8      	; 0x4fc <__floatundisf+0x11e>
     4f4:	cc 0c       	add	r12, r12
     4f6:	dd 1c       	adc	r13, r13
     4f8:	ee 1c       	adc	r14, r14
     4fa:	ff 1c       	adc	r15, r15
     4fc:	8a 95       	dec	r24
     4fe:	d2 f7       	brpl	.-12     	; 0x4f4 <__floatundisf+0x116>
     500:	c1 14       	cp	r12, r1
     502:	d1 04       	cpc	r13, r1
     504:	e1 04       	cpc	r14, r1
     506:	f1 04       	cpc	r15, r1
     508:	41 f0       	breq	.+16     	; 0x51a <__floatundisf+0x13c>
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	a0 e0       	ldi	r26, 0x00	; 0
     510:	b0 e0       	ldi	r27, 0x00	; 0
     512:	88 2a       	or	r8, r24
     514:	99 2a       	or	r9, r25
     516:	aa 2a       	or	r10, r26
     518:	bb 2a       	or	r11, r27
     51a:	90 e2       	ldi	r25, 0x20	; 32
     51c:	49 16       	cp	r4, r25
     51e:	51 04       	cpc	r5, r1
     520:	61 04       	cpc	r6, r1
     522:	71 04       	cpc	r7, r1
     524:	59 f4       	brne	.+22     	; 0x53c <__floatundisf+0x15e>
     526:	0f 2e       	mov	r0, r31
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	ef 2e       	mov	r14, r31
     52c:	f0 e0       	ldi	r31, 0x00	; 0
     52e:	ff 2e       	mov	r15, r31
     530:	f0 e8       	ldi	r31, 0x80	; 128
     532:	0f 2f       	mov	r16, r31
     534:	ff e4       	ldi	r31, 0x4F	; 79
     536:	1f 2f       	mov	r17, r31
     538:	f0 2d       	mov	r31, r0
     53a:	21 c0       	rjmp	.+66     	; 0x57e <__floatundisf+0x1a0>
     53c:	af e1       	ldi	r26, 0x1F	; 31
     53e:	4a 16       	cp	r4, r26
     540:	51 04       	cpc	r5, r1
     542:	61 04       	cpc	r6, r1
     544:	71 04       	cpc	r7, r1
     546:	59 f4       	brne	.+22     	; 0x55e <__floatundisf+0x180>
     548:	0f 2e       	mov	r0, r31
     54a:	f0 e0       	ldi	r31, 0x00	; 0
     54c:	ef 2e       	mov	r14, r31
     54e:	f0 e0       	ldi	r31, 0x00	; 0
     550:	ff 2e       	mov	r15, r31
     552:	f0 e0       	ldi	r31, 0x00	; 0
     554:	0f 2f       	mov	r16, r31
     556:	ff e4       	ldi	r31, 0x4F	; 79
     558:	1f 2f       	mov	r17, r31
     55a:	f0 2d       	mov	r31, r0
     55c:	10 c0       	rjmp	.+32     	; 0x57e <__floatundisf+0x1a0>
     55e:	61 e0       	ldi	r22, 0x01	; 1
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	09 80       	ldd	r0, Y+1	; 0x01
     568:	04 c0       	rjmp	.+8      	; 0x572 <__floatundisf+0x194>
     56a:	66 0f       	add	r22, r22
     56c:	77 1f       	adc	r23, r23
     56e:	88 1f       	adc	r24, r24
     570:	99 1f       	adc	r25, r25
     572:	0a 94       	dec	r0
     574:	d2 f7       	brpl	.-12     	; 0x56a <__floatundisf+0x18c>
     576:	0e 94 90 13 	call	0x2720	; 0x2720 <__floatsisf>
     57a:	7b 01       	movw	r14, r22
     57c:	8c 01       	movw	r16, r24
     57e:	c5 01       	movw	r24, r10
     580:	b4 01       	movw	r22, r8
     582:	0e 94 42 14 	call	0x2884	; 0x2884 <__floatunsisf>
     586:	a8 01       	movw	r20, r16
     588:	97 01       	movw	r18, r14
     58a:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
     58e:	22 96       	adiw	r28, 0x02	; 2
     590:	e2 e1       	ldi	r30, 0x12	; 18
     592:	0c 94 86 3a 	jmp	0x750c	; 0x750c <__epilogue_restores__>

00000596 <__udivdi3>:
     596:	ae e5       	ldi	r26, 0x5E	; 94
     598:	b0 e0       	ldi	r27, 0x00	; 0
     59a:	e1 ed       	ldi	r30, 0xD1	; 209
     59c:	f2 e0       	ldi	r31, 0x02	; 2
     59e:	0c 94 6a 3a 	jmp	0x74d4	; 0x74d4 <__prologue_saves__>
     5a2:	a8 e0       	ldi	r26, 0x08	; 8
     5a4:	4e 01       	movw	r8, r28
     5a6:	08 94       	sec
     5a8:	81 1c       	adc	r8, r1
     5aa:	91 1c       	adc	r9, r1
     5ac:	f4 01       	movw	r30, r8
     5ae:	6a 2e       	mov	r6, r26
     5b0:	11 92       	st	Z+, r1
     5b2:	6a 94       	dec	r6
     5b4:	e9 f7       	brne	.-6      	; 0x5b0 <__udivdi3+0x1a>
     5b6:	29 83       	std	Y+1, r18	; 0x01
     5b8:	3a 83       	std	Y+2, r19	; 0x02
     5ba:	4b 83       	std	Y+3, r20	; 0x03
     5bc:	5c 83       	std	Y+4, r21	; 0x04
     5be:	6d 83       	std	Y+5, r22	; 0x05
     5c0:	7e 83       	std	Y+6, r23	; 0x06
     5c2:	8f 83       	std	Y+7, r24	; 0x07
     5c4:	98 87       	std	Y+8, r25	; 0x08
     5c6:	ce 01       	movw	r24, r28
     5c8:	09 96       	adiw	r24, 0x09	; 9
     5ca:	fc 01       	movw	r30, r24
     5cc:	11 92       	st	Z+, r1
     5ce:	aa 95       	dec	r26
     5d0:	e9 f7       	brne	.-6      	; 0x5cc <__udivdi3+0x36>
     5d2:	a9 86       	std	Y+9, r10	; 0x09
     5d4:	ba 86       	std	Y+10, r11	; 0x0a
     5d6:	cb 86       	std	Y+11, r12	; 0x0b
     5d8:	dc 86       	std	Y+12, r13	; 0x0c
     5da:	ed 86       	std	Y+13, r14	; 0x0d
     5dc:	fe 86       	std	Y+14, r15	; 0x0e
     5de:	0f 87       	std	Y+15, r16	; 0x0f
     5e0:	18 8b       	std	Y+16, r17	; 0x10
     5e2:	29 84       	ldd	r2, Y+9	; 0x09
     5e4:	3a 84       	ldd	r3, Y+10	; 0x0a
     5e6:	4b 84       	ldd	r4, Y+11	; 0x0b
     5e8:	5c 84       	ldd	r5, Y+12	; 0x0c
     5ea:	ed 84       	ldd	r14, Y+13	; 0x0d
     5ec:	fe 84       	ldd	r15, Y+14	; 0x0e
     5ee:	0f 85       	ldd	r16, Y+15	; 0x0f
     5f0:	18 89       	ldd	r17, Y+16	; 0x10
     5f2:	69 80       	ldd	r6, Y+1	; 0x01
     5f4:	7a 80       	ldd	r7, Y+2	; 0x02
     5f6:	8b 80       	ldd	r8, Y+3	; 0x03
     5f8:	9c 80       	ldd	r9, Y+4	; 0x04
     5fa:	6d a6       	std	Y+45, r6	; 0x2d
     5fc:	7e a6       	std	Y+46, r7	; 0x2e
     5fe:	8f a6       	std	Y+47, r8	; 0x2f
     600:	98 aa       	std	Y+48, r9	; 0x30
     602:	6d 80       	ldd	r6, Y+5	; 0x05
     604:	7e 80       	ldd	r7, Y+6	; 0x06
     606:	8f 80       	ldd	r8, Y+7	; 0x07
     608:	98 84       	ldd	r9, Y+8	; 0x08
     60a:	e1 14       	cp	r14, r1
     60c:	f1 04       	cpc	r15, r1
     60e:	01 05       	cpc	r16, r1
     610:	11 05       	cpc	r17, r1
     612:	09 f0       	breq	.+2      	; 0x616 <__udivdi3+0x80>
     614:	b3 c3       	rjmp	.+1894   	; 0xd7c <__stack+0x51d>
     616:	62 14       	cp	r6, r2
     618:	73 04       	cpc	r7, r3
     61a:	84 04       	cpc	r8, r4
     61c:	95 04       	cpc	r9, r5
     61e:	08 f0       	brcs	.+2      	; 0x622 <__udivdi3+0x8c>
     620:	3d c1       	rjmp	.+634    	; 0x89c <__stack+0x3d>
     622:	00 e0       	ldi	r16, 0x00	; 0
     624:	20 16       	cp	r2, r16
     626:	00 e0       	ldi	r16, 0x00	; 0
     628:	30 06       	cpc	r3, r16
     62a:	01 e0       	ldi	r16, 0x01	; 1
     62c:	40 06       	cpc	r4, r16
     62e:	00 e0       	ldi	r16, 0x00	; 0
     630:	50 06       	cpc	r5, r16
     632:	88 f4       	brcc	.+34     	; 0x656 <__udivdi3+0xc0>
     634:	1f ef       	ldi	r17, 0xFF	; 255
     636:	21 16       	cp	r2, r17
     638:	31 04       	cpc	r3, r1
     63a:	41 04       	cpc	r4, r1
     63c:	51 04       	cpc	r5, r1
     63e:	39 f0       	breq	.+14     	; 0x64e <__udivdi3+0xb8>
     640:	30 f0       	brcs	.+12     	; 0x64e <__udivdi3+0xb8>
     642:	48 e0       	ldi	r20, 0x08	; 8
     644:	e4 2e       	mov	r14, r20
     646:	f1 2c       	mov	r15, r1
     648:	01 2d       	mov	r16, r1
     64a:	11 2d       	mov	r17, r1
     64c:	18 c0       	rjmp	.+48     	; 0x67e <__udivdi3+0xe8>
     64e:	ee 24       	eor	r14, r14
     650:	ff 24       	eor	r15, r15
     652:	87 01       	movw	r16, r14
     654:	14 c0       	rjmp	.+40     	; 0x67e <__udivdi3+0xe8>
     656:	20 e0       	ldi	r18, 0x00	; 0
     658:	22 16       	cp	r2, r18
     65a:	20 e0       	ldi	r18, 0x00	; 0
     65c:	32 06       	cpc	r3, r18
     65e:	20 e0       	ldi	r18, 0x00	; 0
     660:	42 06       	cpc	r4, r18
     662:	21 e0       	ldi	r18, 0x01	; 1
     664:	52 06       	cpc	r5, r18
     666:	30 f0       	brcs	.+12     	; 0x674 <__udivdi3+0xde>
     668:	38 e1       	ldi	r19, 0x18	; 24
     66a:	e3 2e       	mov	r14, r19
     66c:	f1 2c       	mov	r15, r1
     66e:	01 2d       	mov	r16, r1
     670:	11 2d       	mov	r17, r1
     672:	05 c0       	rjmp	.+10     	; 0x67e <__udivdi3+0xe8>
     674:	20 e1       	ldi	r18, 0x10	; 16
     676:	e2 2e       	mov	r14, r18
     678:	f1 2c       	mov	r15, r1
     67a:	01 2d       	mov	r16, r1
     67c:	11 2d       	mov	r17, r1
     67e:	d2 01       	movw	r26, r4
     680:	c1 01       	movw	r24, r2
     682:	0e 2c       	mov	r0, r14
     684:	04 c0       	rjmp	.+8      	; 0x68e <__udivdi3+0xf8>
     686:	b6 95       	lsr	r27
     688:	a7 95       	ror	r26
     68a:	97 95       	ror	r25
     68c:	87 95       	ror	r24
     68e:	0a 94       	dec	r0
     690:	d2 f7       	brpl	.-12     	; 0x686 <__udivdi3+0xf0>
     692:	82 50       	subi	r24, 0x02	; 2
     694:	9f 4f       	sbci	r25, 0xFF	; 255
     696:	dc 01       	movw	r26, r24
     698:	2c 91       	ld	r18, X
     69a:	80 e2       	ldi	r24, 0x20	; 32
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	a0 e0       	ldi	r26, 0x00	; 0
     6a0:	b0 e0       	ldi	r27, 0x00	; 0
     6a2:	8e 19       	sub	r24, r14
     6a4:	9f 09       	sbc	r25, r15
     6a6:	a0 0b       	sbc	r26, r16
     6a8:	b1 0b       	sbc	r27, r17
     6aa:	7c 01       	movw	r14, r24
     6ac:	8d 01       	movw	r16, r26
     6ae:	e2 1a       	sub	r14, r18
     6b0:	f1 08       	sbc	r15, r1
     6b2:	01 09       	sbc	r16, r1
     6b4:	11 09       	sbc	r17, r1
     6b6:	e1 14       	cp	r14, r1
     6b8:	f1 04       	cpc	r15, r1
     6ba:	01 05       	cpc	r16, r1
     6bc:	11 05       	cpc	r17, r1
     6be:	a1 f1       	breq	.+104    	; 0x728 <__udivdi3+0x192>
     6c0:	0e 2c       	mov	r0, r14
     6c2:	04 c0       	rjmp	.+8      	; 0x6cc <__udivdi3+0x136>
     6c4:	22 0c       	add	r2, r2
     6c6:	33 1c       	adc	r3, r3
     6c8:	44 1c       	adc	r4, r4
     6ca:	55 1c       	adc	r5, r5
     6cc:	0a 94       	dec	r0
     6ce:	d2 f7       	brpl	.-12     	; 0x6c4 <__udivdi3+0x12e>
     6d0:	a4 01       	movw	r20, r8
     6d2:	93 01       	movw	r18, r6
     6d4:	0e 2c       	mov	r0, r14
     6d6:	04 c0       	rjmp	.+8      	; 0x6e0 <__udivdi3+0x14a>
     6d8:	22 0f       	add	r18, r18
     6da:	33 1f       	adc	r19, r19
     6dc:	44 1f       	adc	r20, r20
     6de:	55 1f       	adc	r21, r21
     6e0:	0a 94       	dec	r0
     6e2:	d2 f7       	brpl	.-12     	; 0x6d8 <__udivdi3+0x142>
     6e4:	80 e2       	ldi	r24, 0x20	; 32
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	8e 19       	sub	r24, r14
     6ea:	9f 09       	sbc	r25, r15
     6ec:	6d a4       	ldd	r6, Y+45	; 0x2d
     6ee:	7e a4       	ldd	r7, Y+46	; 0x2e
     6f0:	8f a4       	ldd	r8, Y+47	; 0x2f
     6f2:	98 a8       	ldd	r9, Y+48	; 0x30
     6f4:	04 c0       	rjmp	.+8      	; 0x6fe <__udivdi3+0x168>
     6f6:	96 94       	lsr	r9
     6f8:	87 94       	ror	r8
     6fa:	77 94       	ror	r7
     6fc:	67 94       	ror	r6
     6fe:	8a 95       	dec	r24
     700:	d2 f7       	brpl	.-12     	; 0x6f6 <__udivdi3+0x160>
     702:	62 2a       	or	r6, r18
     704:	73 2a       	or	r7, r19
     706:	84 2a       	or	r8, r20
     708:	95 2a       	or	r9, r21
     70a:	ad a4       	ldd	r10, Y+45	; 0x2d
     70c:	be a4       	ldd	r11, Y+46	; 0x2e
     70e:	cf a4       	ldd	r12, Y+47	; 0x2f
     710:	d8 a8       	ldd	r13, Y+48	; 0x30
     712:	04 c0       	rjmp	.+8      	; 0x71c <__udivdi3+0x186>
     714:	aa 0c       	add	r10, r10
     716:	bb 1c       	adc	r11, r11
     718:	cc 1c       	adc	r12, r12
     71a:	dd 1c       	adc	r13, r13
     71c:	ea 94       	dec	r14
     71e:	d2 f7       	brpl	.-12     	; 0x714 <__udivdi3+0x17e>
     720:	ad a6       	std	Y+45, r10	; 0x2d
     722:	be a6       	std	Y+46, r11	; 0x2e
     724:	cf a6       	std	Y+47, r12	; 0x2f
     726:	d8 aa       	std	Y+48, r13	; 0x30
     728:	62 01       	movw	r12, r4
     72a:	ee 24       	eor	r14, r14
     72c:	ff 24       	eor	r15, r15
     72e:	cd aa       	std	Y+53, r12	; 0x35
     730:	de aa       	std	Y+54, r13	; 0x36
     732:	ef aa       	std	Y+55, r14	; 0x37
     734:	f8 ae       	std	Y+56, r15	; 0x38
     736:	92 01       	movw	r18, r4
     738:	81 01       	movw	r16, r2
     73a:	20 70       	andi	r18, 0x00	; 0
     73c:	30 70       	andi	r19, 0x00	; 0
     73e:	09 af       	std	Y+57, r16	; 0x39
     740:	1a af       	std	Y+58, r17	; 0x3a
     742:	2b af       	std	Y+59, r18	; 0x3b
     744:	3c af       	std	Y+60, r19	; 0x3c
     746:	c4 01       	movw	r24, r8
     748:	b3 01       	movw	r22, r6
     74a:	a7 01       	movw	r20, r14
     74c:	96 01       	movw	r18, r12
     74e:	0e 94 48 3a 	call	0x7490	; 0x7490 <__udivmodsi4>
     752:	7b 01       	movw	r14, r22
     754:	8c 01       	movw	r16, r24
     756:	c4 01       	movw	r24, r8
     758:	b3 01       	movw	r22, r6
     75a:	2d a9       	ldd	r18, Y+53	; 0x35
     75c:	3e a9       	ldd	r19, Y+54	; 0x36
     75e:	4f a9       	ldd	r20, Y+55	; 0x37
     760:	58 ad       	ldd	r21, Y+56	; 0x38
     762:	0e 94 48 3a 	call	0x7490	; 0x7490 <__udivmodsi4>
     766:	c9 01       	movw	r24, r18
     768:	da 01       	movw	r26, r20
     76a:	3c 01       	movw	r6, r24
     76c:	4d 01       	movw	r8, r26
     76e:	c4 01       	movw	r24, r8
     770:	b3 01       	movw	r22, r6
     772:	29 ad       	ldd	r18, Y+57	; 0x39
     774:	3a ad       	ldd	r19, Y+58	; 0x3a
     776:	4b ad       	ldd	r20, Y+59	; 0x3b
     778:	5c ad       	ldd	r21, Y+60	; 0x3c
     77a:	0e 94 fa 39 	call	0x73f4	; 0x73f4 <__mulsi3>
     77e:	9b 01       	movw	r18, r22
     780:	ac 01       	movw	r20, r24
     782:	87 01       	movw	r16, r14
     784:	ff 24       	eor	r15, r15
     786:	ee 24       	eor	r14, r14
     788:	ad a4       	ldd	r10, Y+45	; 0x2d
     78a:	be a4       	ldd	r11, Y+46	; 0x2e
     78c:	cf a4       	ldd	r12, Y+47	; 0x2f
     78e:	d8 a8       	ldd	r13, Y+48	; 0x30
     790:	c6 01       	movw	r24, r12
     792:	aa 27       	eor	r26, r26
     794:	bb 27       	eor	r27, r27
     796:	57 01       	movw	r10, r14
     798:	68 01       	movw	r12, r16
     79a:	a8 2a       	or	r10, r24
     79c:	b9 2a       	or	r11, r25
     79e:	ca 2a       	or	r12, r26
     7a0:	db 2a       	or	r13, r27
     7a2:	a2 16       	cp	r10, r18
     7a4:	b3 06       	cpc	r11, r19
     7a6:	c4 06       	cpc	r12, r20
     7a8:	d5 06       	cpc	r13, r21
     7aa:	e0 f4       	brcc	.+56     	; 0x7e4 <__udivdi3+0x24e>
     7ac:	08 94       	sec
     7ae:	61 08       	sbc	r6, r1
     7b0:	71 08       	sbc	r7, r1
     7b2:	81 08       	sbc	r8, r1
     7b4:	91 08       	sbc	r9, r1
     7b6:	a2 0c       	add	r10, r2
     7b8:	b3 1c       	adc	r11, r3
     7ba:	c4 1c       	adc	r12, r4
     7bc:	d5 1c       	adc	r13, r5
     7be:	a2 14       	cp	r10, r2
     7c0:	b3 04       	cpc	r11, r3
     7c2:	c4 04       	cpc	r12, r4
     7c4:	d5 04       	cpc	r13, r5
     7c6:	70 f0       	brcs	.+28     	; 0x7e4 <__udivdi3+0x24e>
     7c8:	a2 16       	cp	r10, r18
     7ca:	b3 06       	cpc	r11, r19
     7cc:	c4 06       	cpc	r12, r20
     7ce:	d5 06       	cpc	r13, r21
     7d0:	48 f4       	brcc	.+18     	; 0x7e4 <__udivdi3+0x24e>
     7d2:	08 94       	sec
     7d4:	61 08       	sbc	r6, r1
     7d6:	71 08       	sbc	r7, r1
     7d8:	81 08       	sbc	r8, r1
     7da:	91 08       	sbc	r9, r1
     7dc:	a2 0c       	add	r10, r2
     7de:	b3 1c       	adc	r11, r3
     7e0:	c4 1c       	adc	r12, r4
     7e2:	d5 1c       	adc	r13, r5
     7e4:	a2 1a       	sub	r10, r18
     7e6:	b3 0a       	sbc	r11, r19
     7e8:	c4 0a       	sbc	r12, r20
     7ea:	d5 0a       	sbc	r13, r21
     7ec:	c6 01       	movw	r24, r12
     7ee:	b5 01       	movw	r22, r10
     7f0:	2d a9       	ldd	r18, Y+53	; 0x35
     7f2:	3e a9       	ldd	r19, Y+54	; 0x36
     7f4:	4f a9       	ldd	r20, Y+55	; 0x37
     7f6:	58 ad       	ldd	r21, Y+56	; 0x38
     7f8:	0e 94 48 3a 	call	0x7490	; 0x7490 <__udivmodsi4>
     7fc:	7b 01       	movw	r14, r22
     7fe:	8c 01       	movw	r16, r24
     800:	c6 01       	movw	r24, r12
     802:	b5 01       	movw	r22, r10
     804:	2d a9       	ldd	r18, Y+53	; 0x35
     806:	3e a9       	ldd	r19, Y+54	; 0x36
     808:	4f a9       	ldd	r20, Y+55	; 0x37
     80a:	58 ad       	ldd	r21, Y+56	; 0x38
     80c:	0e 94 48 3a 	call	0x7490	; 0x7490 <__udivmodsi4>
     810:	c9 01       	movw	r24, r18
     812:	da 01       	movw	r26, r20
     814:	5c 01       	movw	r10, r24
     816:	6d 01       	movw	r12, r26
     818:	c6 01       	movw	r24, r12
     81a:	b5 01       	movw	r22, r10
     81c:	29 ad       	ldd	r18, Y+57	; 0x39
     81e:	3a ad       	ldd	r19, Y+58	; 0x3a
     820:	4b ad       	ldd	r20, Y+59	; 0x3b
     822:	5c ad       	ldd	r21, Y+60	; 0x3c
     824:	0e 94 fa 39 	call	0x73f4	; 0x73f4 <__mulsi3>
     828:	9b 01       	movw	r18, r22
     82a:	ac 01       	movw	r20, r24
     82c:	87 01       	movw	r16, r14
     82e:	ff 24       	eor	r15, r15
     830:	ee 24       	eor	r14, r14
     832:	8d a5       	ldd	r24, Y+45	; 0x2d
     834:	9e a5       	ldd	r25, Y+46	; 0x2e
     836:	af a5       	ldd	r26, Y+47	; 0x2f
     838:	b8 a9       	ldd	r27, Y+48	; 0x30
     83a:	a0 70       	andi	r26, 0x00	; 0
     83c:	b0 70       	andi	r27, 0x00	; 0
     83e:	e8 2a       	or	r14, r24
     840:	f9 2a       	or	r15, r25
     842:	0a 2b       	or	r16, r26
     844:	1b 2b       	or	r17, r27
     846:	e2 16       	cp	r14, r18
     848:	f3 06       	cpc	r15, r19
     84a:	04 07       	cpc	r16, r20
     84c:	15 07       	cpc	r17, r21
     84e:	c0 f4       	brcc	.+48     	; 0x880 <__stack+0x21>
     850:	08 94       	sec
     852:	a1 08       	sbc	r10, r1
     854:	b1 08       	sbc	r11, r1
     856:	c1 08       	sbc	r12, r1
     858:	d1 08       	sbc	r13, r1
     85a:	e2 0c       	add	r14, r2
     85c:	f3 1c       	adc	r15, r3
     85e:	04 1d       	adc	r16, r4
     860:	15 1d       	adc	r17, r5
     862:	e2 14       	cp	r14, r2
     864:	f3 04       	cpc	r15, r3
     866:	04 05       	cpc	r16, r4
     868:	15 05       	cpc	r17, r5
     86a:	50 f0       	brcs	.+20     	; 0x880 <__stack+0x21>
     86c:	e2 16       	cp	r14, r18
     86e:	f3 06       	cpc	r15, r19
     870:	04 07       	cpc	r16, r20
     872:	15 07       	cpc	r17, r21
     874:	28 f4       	brcc	.+10     	; 0x880 <__stack+0x21>
     876:	08 94       	sec
     878:	a1 08       	sbc	r10, r1
     87a:	b1 08       	sbc	r11, r1
     87c:	c1 08       	sbc	r12, r1
     87e:	d1 08       	sbc	r13, r1
     880:	d3 01       	movw	r26, r6
     882:	99 27       	eor	r25, r25
     884:	88 27       	eor	r24, r24
     886:	86 01       	movw	r16, r12
     888:	75 01       	movw	r14, r10
     88a:	e8 2a       	or	r14, r24
     88c:	f9 2a       	or	r15, r25
     88e:	0a 2b       	or	r16, r26
     890:	1b 2b       	or	r17, r27
     892:	e9 aa       	std	Y+49, r14	; 0x31
     894:	fa aa       	std	Y+50, r15	; 0x32
     896:	0b ab       	std	Y+51, r16	; 0x33
     898:	1c ab       	std	Y+52, r17	; 0x34
     89a:	cf c4       	rjmp	.+2462   	; 0x123a <__stack+0x9db>
     89c:	21 14       	cp	r2, r1
     89e:	31 04       	cpc	r3, r1
     8a0:	41 04       	cpc	r4, r1
     8a2:	51 04       	cpc	r5, r1
     8a4:	71 f4       	brne	.+28     	; 0x8c2 <__stack+0x63>
     8a6:	61 e0       	ldi	r22, 0x01	; 1
     8a8:	70 e0       	ldi	r23, 0x00	; 0
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	20 e0       	ldi	r18, 0x00	; 0
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	40 e0       	ldi	r20, 0x00	; 0
     8b4:	50 e0       	ldi	r21, 0x00	; 0
     8b6:	0e 94 48 3a 	call	0x7490	; 0x7490 <__udivmodsi4>
     8ba:	c9 01       	movw	r24, r18
     8bc:	da 01       	movw	r26, r20
     8be:	1c 01       	movw	r2, r24
     8c0:	2d 01       	movw	r4, r26
     8c2:	00 e0       	ldi	r16, 0x00	; 0
     8c4:	20 16       	cp	r2, r16
     8c6:	00 e0       	ldi	r16, 0x00	; 0
     8c8:	30 06       	cpc	r3, r16
     8ca:	01 e0       	ldi	r16, 0x01	; 1
     8cc:	40 06       	cpc	r4, r16
     8ce:	00 e0       	ldi	r16, 0x00	; 0
     8d0:	50 06       	cpc	r5, r16
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__stack+0x97>
     8d4:	1f ef       	ldi	r17, 0xFF	; 255
     8d6:	21 16       	cp	r2, r17
     8d8:	31 04       	cpc	r3, r1
     8da:	41 04       	cpc	r4, r1
     8dc:	51 04       	cpc	r5, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__stack+0x8d>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__stack+0x8d>
     8e2:	48 e0       	ldi	r20, 0x08	; 8
     8e4:	50 e0       	ldi	r21, 0x00	; 0
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	70 e0       	ldi	r23, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__stack+0xbb>
     8ec:	40 e0       	ldi	r20, 0x00	; 0
     8ee:	50 e0       	ldi	r21, 0x00	; 0
     8f0:	60 e0       	ldi	r22, 0x00	; 0
     8f2:	70 e0       	ldi	r23, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__stack+0xbb>
     8f6:	20 e0       	ldi	r18, 0x00	; 0
     8f8:	22 16       	cp	r2, r18
     8fa:	20 e0       	ldi	r18, 0x00	; 0
     8fc:	32 06       	cpc	r3, r18
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	42 06       	cpc	r4, r18
     902:	21 e0       	ldi	r18, 0x01	; 1
     904:	52 06       	cpc	r5, r18
     906:	28 f0       	brcs	.+10     	; 0x912 <__stack+0xb3>
     908:	48 e1       	ldi	r20, 0x18	; 24
     90a:	50 e0       	ldi	r21, 0x00	; 0
     90c:	60 e0       	ldi	r22, 0x00	; 0
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__stack+0xbb>
     912:	40 e1       	ldi	r20, 0x10	; 16
     914:	50 e0       	ldi	r21, 0x00	; 0
     916:	60 e0       	ldi	r22, 0x00	; 0
     918:	70 e0       	ldi	r23, 0x00	; 0
     91a:	d2 01       	movw	r26, r4
     91c:	c1 01       	movw	r24, r2
     91e:	04 2e       	mov	r0, r20
     920:	04 c0       	rjmp	.+8      	; 0x92a <__stack+0xcb>
     922:	b6 95       	lsr	r27
     924:	a7 95       	ror	r26
     926:	97 95       	ror	r25
     928:	87 95       	ror	r24
     92a:	0a 94       	dec	r0
     92c:	d2 f7       	brpl	.-12     	; 0x922 <__stack+0xc3>
     92e:	82 50       	subi	r24, 0x02	; 2
     930:	9f 4f       	sbci	r25, 0xFF	; 255
     932:	dc 01       	movw	r26, r24
     934:	2c 91       	ld	r18, X
     936:	e0 e2       	ldi	r30, 0x20	; 32
     938:	ee 2e       	mov	r14, r30
     93a:	f1 2c       	mov	r15, r1
     93c:	01 2d       	mov	r16, r1
     93e:	11 2d       	mov	r17, r1
     940:	d8 01       	movw	r26, r16
     942:	c7 01       	movw	r24, r14
     944:	84 1b       	sub	r24, r20
     946:	95 0b       	sbc	r25, r21
     948:	a6 0b       	sbc	r26, r22
     94a:	b7 0b       	sbc	r27, r23
     94c:	82 1b       	sub	r24, r18
     94e:	91 09       	sbc	r25, r1
     950:	a1 09       	sbc	r26, r1
     952:	b1 09       	sbc	r27, r1
     954:	00 97       	sbiw	r24, 0x00	; 0
     956:	a1 05       	cpc	r26, r1
     958:	b1 05       	cpc	r27, r1
     95a:	61 f4       	brne	.+24     	; 0x974 <__stack+0x115>
     95c:	64 01       	movw	r12, r8
     95e:	53 01       	movw	r10, r6
     960:	a2 18       	sub	r10, r2
     962:	b3 08       	sbc	r11, r3
     964:	c4 08       	sbc	r12, r4
     966:	d5 08       	sbc	r13, r5
     968:	31 e0       	ldi	r19, 0x01	; 1
     96a:	63 2e       	mov	r6, r19
     96c:	71 2c       	mov	r7, r1
     96e:	81 2c       	mov	r8, r1
     970:	91 2c       	mov	r9, r1
     972:	1e c1       	rjmp	.+572    	; 0xbb0 <__stack+0x351>
     974:	6f 96       	adiw	r28, 0x1f	; 31
     976:	8f af       	std	Y+63, r24	; 0x3f
     978:	6f 97       	sbiw	r28, 0x1f	; 31
     97a:	08 2e       	mov	r0, r24
     97c:	04 c0       	rjmp	.+8      	; 0x986 <__stack+0x127>
     97e:	22 0c       	add	r2, r2
     980:	33 1c       	adc	r3, r3
     982:	44 1c       	adc	r4, r4
     984:	55 1c       	adc	r5, r5
     986:	0a 94       	dec	r0
     988:	d2 f7       	brpl	.-12     	; 0x97e <__stack+0x11f>
     98a:	ee 2d       	mov	r30, r14
     98c:	e8 1b       	sub	r30, r24
     98e:	64 01       	movw	r12, r8
     990:	53 01       	movw	r10, r6
     992:	0e 2e       	mov	r0, r30
     994:	04 c0       	rjmp	.+8      	; 0x99e <__stack+0x13f>
     996:	d6 94       	lsr	r13
     998:	c7 94       	ror	r12
     99a:	b7 94       	ror	r11
     99c:	a7 94       	ror	r10
     99e:	0a 94       	dec	r0
     9a0:	d2 f7       	brpl	.-12     	; 0x996 <__stack+0x137>
     9a2:	a4 01       	movw	r20, r8
     9a4:	93 01       	movw	r18, r6
     9a6:	6f 96       	adiw	r28, 0x1f	; 31
     9a8:	0f ac       	ldd	r0, Y+63	; 0x3f
     9aa:	6f 97       	sbiw	r28, 0x1f	; 31
     9ac:	04 c0       	rjmp	.+8      	; 0x9b6 <__stack+0x157>
     9ae:	22 0f       	add	r18, r18
     9b0:	33 1f       	adc	r19, r19
     9b2:	44 1f       	adc	r20, r20
     9b4:	55 1f       	adc	r21, r21
     9b6:	0a 94       	dec	r0
     9b8:	d2 f7       	brpl	.-12     	; 0x9ae <__stack+0x14f>
     9ba:	6d a4       	ldd	r6, Y+45	; 0x2d
     9bc:	7e a4       	ldd	r7, Y+46	; 0x2e
     9be:	8f a4       	ldd	r8, Y+47	; 0x2f
     9c0:	98 a8       	ldd	r9, Y+48	; 0x30
     9c2:	0e 2e       	mov	r0, r30
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__stack+0x16f>
     9c6:	96 94       	lsr	r9
     9c8:	87 94       	ror	r8
     9ca:	77 94       	ror	r7
     9cc:	67 94       	ror	r6
     9ce:	0a 94       	dec	r0
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__stack+0x167>
     9d2:	84 01       	movw	r16, r8
     9d4:	73 01       	movw	r14, r6
     9d6:	e2 2a       	or	r14, r18
     9d8:	f3 2a       	or	r15, r19
     9da:	04 2b       	or	r16, r20
     9dc:	15 2b       	or	r17, r21
     9de:	e9 a6       	std	Y+41, r14	; 0x29
     9e0:	fa a6       	std	Y+42, r15	; 0x2a
     9e2:	0b a7       	std	Y+43, r16	; 0x2b
     9e4:	1c a7       	std	Y+44, r17	; 0x2c
     9e6:	32 01       	movw	r6, r4
     9e8:	88 24       	eor	r8, r8
     9ea:	99 24       	eor	r9, r9
     9ec:	92 01       	movw	r18, r4
     9ee:	81 01       	movw	r16, r2
     9f0:	20 70       	andi	r18, 0x00	; 0
     9f2:	30 70       	andi	r19, 0x00	; 0
     9f4:	21 96       	adiw	r28, 0x01	; 1
     9f6:	0c af       	std	Y+60, r16	; 0x3c
     9f8:	1d af       	std	Y+61, r17	; 0x3d
     9fa:	2e af       	std	Y+62, r18	; 0x3e
     9fc:	3f af       	std	Y+63, r19	; 0x3f
     9fe:	21 97       	sbiw	r28, 0x01	; 1
     a00:	c6 01       	movw	r24, r12
     a02:	b5 01       	movw	r22, r10
     a04:	a4 01       	movw	r20, r8
     a06:	93 01       	movw	r18, r6
     a08:	0e 94 48 3a 	call	0x7490	; 0x7490 <__udivmodsi4>
     a0c:	7b 01       	movw	r14, r22
     a0e:	8c 01       	movw	r16, r24
     a10:	c6 01       	movw	r24, r12
     a12:	b5 01       	movw	r22, r10
     a14:	a4 01       	movw	r20, r8
     a16:	93 01       	movw	r18, r6
     a18:	0e 94 48 3a 	call	0x7490	; 0x7490 <__udivmodsi4>
     a1c:	c9 01       	movw	r24, r18
     a1e:	da 01       	movw	r26, r20
     a20:	25 96       	adiw	r28, 0x05	; 5
     a22:	8c af       	std	Y+60, r24	; 0x3c
     a24:	9d af       	std	Y+61, r25	; 0x3d
     a26:	ae af       	std	Y+62, r26	; 0x3e
     a28:	bf af       	std	Y+63, r27	; 0x3f
     a2a:	25 97       	sbiw	r28, 0x05	; 5
     a2c:	bc 01       	movw	r22, r24
     a2e:	cd 01       	movw	r24, r26
     a30:	21 96       	adiw	r28, 0x01	; 1
     a32:	2c ad       	ldd	r18, Y+60	; 0x3c
     a34:	3d ad       	ldd	r19, Y+61	; 0x3d
     a36:	4e ad       	ldd	r20, Y+62	; 0x3e
     a38:	5f ad       	ldd	r21, Y+63	; 0x3f
     a3a:	21 97       	sbiw	r28, 0x01	; 1
     a3c:	0e 94 fa 39 	call	0x73f4	; 0x73f4 <__mulsi3>
     a40:	9b 01       	movw	r18, r22
     a42:	ac 01       	movw	r20, r24
     a44:	87 01       	movw	r16, r14
     a46:	ff 24       	eor	r15, r15
     a48:	ee 24       	eor	r14, r14
     a4a:	a9 a4       	ldd	r10, Y+41	; 0x29
     a4c:	ba a4       	ldd	r11, Y+42	; 0x2a
     a4e:	cb a4       	ldd	r12, Y+43	; 0x2b
     a50:	dc a4       	ldd	r13, Y+44	; 0x2c
     a52:	c6 01       	movw	r24, r12
     a54:	aa 27       	eor	r26, r26
     a56:	bb 27       	eor	r27, r27
     a58:	5c 01       	movw	r10, r24
     a5a:	6d 01       	movw	r12, r26
     a5c:	ae 28       	or	r10, r14
     a5e:	bf 28       	or	r11, r15
     a60:	c0 2a       	or	r12, r16
     a62:	d1 2a       	or	r13, r17
     a64:	a2 16       	cp	r10, r18
     a66:	b3 06       	cpc	r11, r19
     a68:	c4 06       	cpc	r12, r20
     a6a:	d5 06       	cpc	r13, r21
     a6c:	60 f5       	brcc	.+88     	; 0xac6 <__stack+0x267>
     a6e:	25 96       	adiw	r28, 0x05	; 5
     a70:	6c ad       	ldd	r22, Y+60	; 0x3c
     a72:	7d ad       	ldd	r23, Y+61	; 0x3d
     a74:	8e ad       	ldd	r24, Y+62	; 0x3e
     a76:	9f ad       	ldd	r25, Y+63	; 0x3f
     a78:	25 97       	sbiw	r28, 0x05	; 5
     a7a:	61 50       	subi	r22, 0x01	; 1
     a7c:	70 40       	sbci	r23, 0x00	; 0
     a7e:	80 40       	sbci	r24, 0x00	; 0
     a80:	90 40       	sbci	r25, 0x00	; 0
     a82:	25 96       	adiw	r28, 0x05	; 5
     a84:	6c af       	std	Y+60, r22	; 0x3c
     a86:	7d af       	std	Y+61, r23	; 0x3d
     a88:	8e af       	std	Y+62, r24	; 0x3e
     a8a:	9f af       	std	Y+63, r25	; 0x3f
     a8c:	25 97       	sbiw	r28, 0x05	; 5
     a8e:	a2 0c       	add	r10, r2
     a90:	b3 1c       	adc	r11, r3
     a92:	c4 1c       	adc	r12, r4
     a94:	d5 1c       	adc	r13, r5
     a96:	a2 14       	cp	r10, r2
     a98:	b3 04       	cpc	r11, r3
     a9a:	c4 04       	cpc	r12, r4
     a9c:	d5 04       	cpc	r13, r5
     a9e:	98 f0       	brcs	.+38     	; 0xac6 <__stack+0x267>
     aa0:	a2 16       	cp	r10, r18
     aa2:	b3 06       	cpc	r11, r19
     aa4:	c4 06       	cpc	r12, r20
     aa6:	d5 06       	cpc	r13, r21
     aa8:	70 f4       	brcc	.+28     	; 0xac6 <__stack+0x267>
     aaa:	61 50       	subi	r22, 0x01	; 1
     aac:	70 40       	sbci	r23, 0x00	; 0
     aae:	80 40       	sbci	r24, 0x00	; 0
     ab0:	90 40       	sbci	r25, 0x00	; 0
     ab2:	25 96       	adiw	r28, 0x05	; 5
     ab4:	6c af       	std	Y+60, r22	; 0x3c
     ab6:	7d af       	std	Y+61, r23	; 0x3d
     ab8:	8e af       	std	Y+62, r24	; 0x3e
     aba:	9f af       	std	Y+63, r25	; 0x3f
     abc:	25 97       	sbiw	r28, 0x05	; 5
     abe:	a2 0c       	add	r10, r2
     ac0:	b3 1c       	adc	r11, r3
     ac2:	c4 1c       	adc	r12, r4
     ac4:	d5 1c       	adc	r13, r5
     ac6:	a2 1a       	sub	r10, r18
     ac8:	b3 0a       	sbc	r11, r19
     aca:	c4 0a       	sbc	r12, r20
     acc:	d5 0a       	sbc	r13, r21
     ace:	c6 01       	movw	r24, r12
     ad0:	b5 01       	movw	r22, r10
     ad2:	a4 01       	movw	r20, r8
     ad4:	93 01       	movw	r18, r6
     ad6:	0e 94 48 3a 	call	0x7490	; 0x7490 <__udivmodsi4>
     ada:	7b 01       	movw	r14, r22
     adc:	8c 01       	movw	r16, r24
     ade:	c6 01       	movw	r24, r12
     ae0:	b5 01       	movw	r22, r10
     ae2:	a4 01       	movw	r20, r8
     ae4:	93 01       	movw	r18, r6
     ae6:	0e 94 48 3a 	call	0x7490	; 0x7490 <__udivmodsi4>
     aea:	c9 01       	movw	r24, r18
     aec:	da 01       	movw	r26, r20
     aee:	3c 01       	movw	r6, r24
     af0:	4d 01       	movw	r8, r26
     af2:	c4 01       	movw	r24, r8
     af4:	b3 01       	movw	r22, r6
     af6:	21 96       	adiw	r28, 0x01	; 1
     af8:	2c ad       	ldd	r18, Y+60	; 0x3c
     afa:	3d ad       	ldd	r19, Y+61	; 0x3d
     afc:	4e ad       	ldd	r20, Y+62	; 0x3e
     afe:	5f ad       	ldd	r21, Y+63	; 0x3f
     b00:	21 97       	sbiw	r28, 0x01	; 1
     b02:	0e 94 fa 39 	call	0x73f4	; 0x73f4 <__mulsi3>
     b06:	9b 01       	movw	r18, r22
     b08:	ac 01       	movw	r20, r24
     b0a:	87 01       	movw	r16, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	ee 24       	eor	r14, r14
     b10:	89 a5       	ldd	r24, Y+41	; 0x29
     b12:	9a a5       	ldd	r25, Y+42	; 0x2a
     b14:	ab a5       	ldd	r26, Y+43	; 0x2b
     b16:	bc a5       	ldd	r27, Y+44	; 0x2c
     b18:	a0 70       	andi	r26, 0x00	; 0
     b1a:	b0 70       	andi	r27, 0x00	; 0
     b1c:	57 01       	movw	r10, r14
     b1e:	68 01       	movw	r12, r16
     b20:	a8 2a       	or	r10, r24
     b22:	b9 2a       	or	r11, r25
     b24:	ca 2a       	or	r12, r26
     b26:	db 2a       	or	r13, r27
     b28:	a2 16       	cp	r10, r18
     b2a:	b3 06       	cpc	r11, r19
     b2c:	c4 06       	cpc	r12, r20
     b2e:	d5 06       	cpc	r13, r21
     b30:	e0 f4       	brcc	.+56     	; 0xb6a <__stack+0x30b>
     b32:	08 94       	sec
     b34:	61 08       	sbc	r6, r1
     b36:	71 08       	sbc	r7, r1
     b38:	81 08       	sbc	r8, r1
     b3a:	91 08       	sbc	r9, r1
     b3c:	a2 0c       	add	r10, r2
     b3e:	b3 1c       	adc	r11, r3
     b40:	c4 1c       	adc	r12, r4
     b42:	d5 1c       	adc	r13, r5
     b44:	a2 14       	cp	r10, r2
     b46:	b3 04       	cpc	r11, r3
     b48:	c4 04       	cpc	r12, r4
     b4a:	d5 04       	cpc	r13, r5
     b4c:	70 f0       	brcs	.+28     	; 0xb6a <__stack+0x30b>
     b4e:	a2 16       	cp	r10, r18
     b50:	b3 06       	cpc	r11, r19
     b52:	c4 06       	cpc	r12, r20
     b54:	d5 06       	cpc	r13, r21
     b56:	48 f4       	brcc	.+18     	; 0xb6a <__stack+0x30b>
     b58:	08 94       	sec
     b5a:	61 08       	sbc	r6, r1
     b5c:	71 08       	sbc	r7, r1
     b5e:	81 08       	sbc	r8, r1
     b60:	91 08       	sbc	r9, r1
     b62:	a2 0c       	add	r10, r2
     b64:	b3 1c       	adc	r11, r3
     b66:	c4 1c       	adc	r12, r4
     b68:	d5 1c       	adc	r13, r5
     b6a:	8d a5       	ldd	r24, Y+45	; 0x2d
     b6c:	9e a5       	ldd	r25, Y+46	; 0x2e
     b6e:	af a5       	ldd	r26, Y+47	; 0x2f
     b70:	b8 a9       	ldd	r27, Y+48	; 0x30
     b72:	6f 96       	adiw	r28, 0x1f	; 31
     b74:	0f ac       	ldd	r0, Y+63	; 0x3f
     b76:	6f 97       	sbiw	r28, 0x1f	; 31
     b78:	04 c0       	rjmp	.+8      	; 0xb82 <__stack+0x323>
     b7a:	88 0f       	add	r24, r24
     b7c:	99 1f       	adc	r25, r25
     b7e:	aa 1f       	adc	r26, r26
     b80:	bb 1f       	adc	r27, r27
     b82:	0a 94       	dec	r0
     b84:	d2 f7       	brpl	.-12     	; 0xb7a <__stack+0x31b>
     b86:	8d a7       	std	Y+45, r24	; 0x2d
     b88:	9e a7       	std	Y+46, r25	; 0x2e
     b8a:	af a7       	std	Y+47, r26	; 0x2f
     b8c:	b8 ab       	std	Y+48, r27	; 0x30
     b8e:	a2 1a       	sub	r10, r18
     b90:	b3 0a       	sbc	r11, r19
     b92:	c4 0a       	sbc	r12, r20
     b94:	d5 0a       	sbc	r13, r21
     b96:	25 96       	adiw	r28, 0x05	; 5
     b98:	ec ac       	ldd	r14, Y+60	; 0x3c
     b9a:	fd ac       	ldd	r15, Y+61	; 0x3d
     b9c:	0e ad       	ldd	r16, Y+62	; 0x3e
     b9e:	1f ad       	ldd	r17, Y+63	; 0x3f
     ba0:	25 97       	sbiw	r28, 0x05	; 5
     ba2:	d7 01       	movw	r26, r14
     ba4:	99 27       	eor	r25, r25
     ba6:	88 27       	eor	r24, r24
     ba8:	68 2a       	or	r6, r24
     baa:	79 2a       	or	r7, r25
     bac:	8a 2a       	or	r8, r26
     bae:	9b 2a       	or	r9, r27
     bb0:	82 01       	movw	r16, r4
     bb2:	22 27       	eor	r18, r18
     bb4:	33 27       	eor	r19, r19
     bb6:	29 96       	adiw	r28, 0x09	; 9
     bb8:	0c af       	std	Y+60, r16	; 0x3c
     bba:	1d af       	std	Y+61, r17	; 0x3d
     bbc:	2e af       	std	Y+62, r18	; 0x3e
     bbe:	3f af       	std	Y+63, r19	; 0x3f
     bc0:	29 97       	sbiw	r28, 0x09	; 9
     bc2:	a2 01       	movw	r20, r4
     bc4:	91 01       	movw	r18, r2
     bc6:	40 70       	andi	r20, 0x00	; 0
     bc8:	50 70       	andi	r21, 0x00	; 0
     bca:	2d 96       	adiw	r28, 0x0d	; 13
     bcc:	2c af       	std	Y+60, r18	; 0x3c
     bce:	3d af       	std	Y+61, r19	; 0x3d
     bd0:	4e af       	std	Y+62, r20	; 0x3e
     bd2:	5f af       	std	Y+63, r21	; 0x3f
     bd4:	2d 97       	sbiw	r28, 0x0d	; 13
     bd6:	c6 01       	movw	r24, r12
     bd8:	b5 01       	movw	r22, r10
     bda:	29 96       	adiw	r28, 0x09	; 9
     bdc:	2c ad       	ldd	r18, Y+60	; 0x3c
     bde:	3d ad       	ldd	r19, Y+61	; 0x3d
     be0:	4e ad       	ldd	r20, Y+62	; 0x3e
     be2:	5f ad       	ldd	r21, Y+63	; 0x3f
     be4:	29 97       	sbiw	r28, 0x09	; 9
     be6:	0e 94 48 3a 	call	0x7490	; 0x7490 <__udivmodsi4>
     bea:	7b 01       	movw	r14, r22
     bec:	8c 01       	movw	r16, r24
     bee:	c6 01       	movw	r24, r12
     bf0:	b5 01       	movw	r22, r10
     bf2:	29 96       	adiw	r28, 0x09	; 9
     bf4:	2c ad       	ldd	r18, Y+60	; 0x3c
     bf6:	3d ad       	ldd	r19, Y+61	; 0x3d
     bf8:	4e ad       	ldd	r20, Y+62	; 0x3e
     bfa:	5f ad       	ldd	r21, Y+63	; 0x3f
     bfc:	29 97       	sbiw	r28, 0x09	; 9
     bfe:	0e 94 48 3a 	call	0x7490	; 0x7490 <__udivmodsi4>
     c02:	c9 01       	movw	r24, r18
     c04:	da 01       	movw	r26, r20
     c06:	61 96       	adiw	r28, 0x11	; 17
     c08:	8c af       	std	Y+60, r24	; 0x3c
     c0a:	9d af       	std	Y+61, r25	; 0x3d
     c0c:	ae af       	std	Y+62, r26	; 0x3e
     c0e:	bf af       	std	Y+63, r27	; 0x3f
     c10:	61 97       	sbiw	r28, 0x11	; 17
     c12:	bc 01       	movw	r22, r24
     c14:	cd 01       	movw	r24, r26
     c16:	2d 96       	adiw	r28, 0x0d	; 13
     c18:	2c ad       	ldd	r18, Y+60	; 0x3c
     c1a:	3d ad       	ldd	r19, Y+61	; 0x3d
     c1c:	4e ad       	ldd	r20, Y+62	; 0x3e
     c1e:	5f ad       	ldd	r21, Y+63	; 0x3f
     c20:	2d 97       	sbiw	r28, 0x0d	; 13
     c22:	0e 94 fa 39 	call	0x73f4	; 0x73f4 <__mulsi3>
     c26:	9b 01       	movw	r18, r22
     c28:	ac 01       	movw	r20, r24
     c2a:	87 01       	movw	r16, r14
     c2c:	ff 24       	eor	r15, r15
     c2e:	ee 24       	eor	r14, r14
     c30:	ad a4       	ldd	r10, Y+45	; 0x2d
     c32:	be a4       	ldd	r11, Y+46	; 0x2e
     c34:	cf a4       	ldd	r12, Y+47	; 0x2f
     c36:	d8 a8       	ldd	r13, Y+48	; 0x30
     c38:	c6 01       	movw	r24, r12
     c3a:	aa 27       	eor	r26, r26
     c3c:	bb 27       	eor	r27, r27
     c3e:	57 01       	movw	r10, r14
     c40:	68 01       	movw	r12, r16
     c42:	a8 2a       	or	r10, r24
     c44:	b9 2a       	or	r11, r25
     c46:	ca 2a       	or	r12, r26
     c48:	db 2a       	or	r13, r27
     c4a:	a2 16       	cp	r10, r18
     c4c:	b3 06       	cpc	r11, r19
     c4e:	c4 06       	cpc	r12, r20
     c50:	d5 06       	cpc	r13, r21
     c52:	60 f5       	brcc	.+88     	; 0xcac <__stack+0x44d>
     c54:	61 96       	adiw	r28, 0x11	; 17
     c56:	6c ad       	ldd	r22, Y+60	; 0x3c
     c58:	7d ad       	ldd	r23, Y+61	; 0x3d
     c5a:	8e ad       	ldd	r24, Y+62	; 0x3e
     c5c:	9f ad       	ldd	r25, Y+63	; 0x3f
     c5e:	61 97       	sbiw	r28, 0x11	; 17
     c60:	61 50       	subi	r22, 0x01	; 1
     c62:	70 40       	sbci	r23, 0x00	; 0
     c64:	80 40       	sbci	r24, 0x00	; 0
     c66:	90 40       	sbci	r25, 0x00	; 0
     c68:	61 96       	adiw	r28, 0x11	; 17
     c6a:	6c af       	std	Y+60, r22	; 0x3c
     c6c:	7d af       	std	Y+61, r23	; 0x3d
     c6e:	8e af       	std	Y+62, r24	; 0x3e
     c70:	9f af       	std	Y+63, r25	; 0x3f
     c72:	61 97       	sbiw	r28, 0x11	; 17
     c74:	a2 0c       	add	r10, r2
     c76:	b3 1c       	adc	r11, r3
     c78:	c4 1c       	adc	r12, r4
     c7a:	d5 1c       	adc	r13, r5
     c7c:	a2 14       	cp	r10, r2
     c7e:	b3 04       	cpc	r11, r3
     c80:	c4 04       	cpc	r12, r4
     c82:	d5 04       	cpc	r13, r5
     c84:	98 f0       	brcs	.+38     	; 0xcac <__stack+0x44d>
     c86:	a2 16       	cp	r10, r18
     c88:	b3 06       	cpc	r11, r19
     c8a:	c4 06       	cpc	r12, r20
     c8c:	d5 06       	cpc	r13, r21
     c8e:	70 f4       	brcc	.+28     	; 0xcac <__stack+0x44d>
     c90:	61 50       	subi	r22, 0x01	; 1
     c92:	70 40       	sbci	r23, 0x00	; 0
     c94:	80 40       	sbci	r24, 0x00	; 0
     c96:	90 40       	sbci	r25, 0x00	; 0
     c98:	61 96       	adiw	r28, 0x11	; 17
     c9a:	6c af       	std	Y+60, r22	; 0x3c
     c9c:	7d af       	std	Y+61, r23	; 0x3d
     c9e:	8e af       	std	Y+62, r24	; 0x3e
     ca0:	9f af       	std	Y+63, r25	; 0x3f
     ca2:	61 97       	sbiw	r28, 0x11	; 17
     ca4:	a2 0c       	add	r10, r2
     ca6:	b3 1c       	adc	r11, r3
     ca8:	c4 1c       	adc	r12, r4
     caa:	d5 1c       	adc	r13, r5
     cac:	a2 1a       	sub	r10, r18
     cae:	b3 0a       	sbc	r11, r19
     cb0:	c4 0a       	sbc	r12, r20
     cb2:	d5 0a       	sbc	r13, r21
     cb4:	c6 01       	movw	r24, r12
     cb6:	b5 01       	movw	r22, r10
     cb8:	29 96       	adiw	r28, 0x09	; 9
     cba:	2c ad       	ldd	r18, Y+60	; 0x3c
     cbc:	3d ad       	ldd	r19, Y+61	; 0x3d
     cbe:	4e ad       	ldd	r20, Y+62	; 0x3e
     cc0:	5f ad       	ldd	r21, Y+63	; 0x3f
     cc2:	29 97       	sbiw	r28, 0x09	; 9
     cc4:	0e 94 48 3a 	call	0x7490	; 0x7490 <__udivmodsi4>
     cc8:	7b 01       	movw	r14, r22
     cca:	8c 01       	movw	r16, r24
     ccc:	c6 01       	movw	r24, r12
     cce:	b5 01       	movw	r22, r10
     cd0:	29 96       	adiw	r28, 0x09	; 9
     cd2:	2c ad       	ldd	r18, Y+60	; 0x3c
     cd4:	3d ad       	ldd	r19, Y+61	; 0x3d
     cd6:	4e ad       	ldd	r20, Y+62	; 0x3e
     cd8:	5f ad       	ldd	r21, Y+63	; 0x3f
     cda:	29 97       	sbiw	r28, 0x09	; 9
     cdc:	0e 94 48 3a 	call	0x7490	; 0x7490 <__udivmodsi4>
     ce0:	c9 01       	movw	r24, r18
     ce2:	da 01       	movw	r26, r20
     ce4:	5c 01       	movw	r10, r24
     ce6:	6d 01       	movw	r12, r26
     ce8:	c6 01       	movw	r24, r12
     cea:	b5 01       	movw	r22, r10
     cec:	2d 96       	adiw	r28, 0x0d	; 13
     cee:	2c ad       	ldd	r18, Y+60	; 0x3c
     cf0:	3d ad       	ldd	r19, Y+61	; 0x3d
     cf2:	4e ad       	ldd	r20, Y+62	; 0x3e
     cf4:	5f ad       	ldd	r21, Y+63	; 0x3f
     cf6:	2d 97       	sbiw	r28, 0x0d	; 13
     cf8:	0e 94 fa 39 	call	0x73f4	; 0x73f4 <__mulsi3>
     cfc:	9b 01       	movw	r18, r22
     cfe:	ac 01       	movw	r20, r24
     d00:	87 01       	movw	r16, r14
     d02:	ff 24       	eor	r15, r15
     d04:	ee 24       	eor	r14, r14
     d06:	8d a5       	ldd	r24, Y+45	; 0x2d
     d08:	9e a5       	ldd	r25, Y+46	; 0x2e
     d0a:	af a5       	ldd	r26, Y+47	; 0x2f
     d0c:	b8 a9       	ldd	r27, Y+48	; 0x30
     d0e:	a0 70       	andi	r26, 0x00	; 0
     d10:	b0 70       	andi	r27, 0x00	; 0
     d12:	e8 2a       	or	r14, r24
     d14:	f9 2a       	or	r15, r25
     d16:	0a 2b       	or	r16, r26
     d18:	1b 2b       	or	r17, r27
     d1a:	e2 16       	cp	r14, r18
     d1c:	f3 06       	cpc	r15, r19
     d1e:	04 07       	cpc	r16, r20
     d20:	15 07       	cpc	r17, r21
     d22:	c0 f4       	brcc	.+48     	; 0xd54 <__stack+0x4f5>
     d24:	08 94       	sec
     d26:	a1 08       	sbc	r10, r1
     d28:	b1 08       	sbc	r11, r1
     d2a:	c1 08       	sbc	r12, r1
     d2c:	d1 08       	sbc	r13, r1
     d2e:	e2 0c       	add	r14, r2
     d30:	f3 1c       	adc	r15, r3
     d32:	04 1d       	adc	r16, r4
     d34:	15 1d       	adc	r17, r5
     d36:	e2 14       	cp	r14, r2
     d38:	f3 04       	cpc	r15, r3
     d3a:	04 05       	cpc	r16, r4
     d3c:	15 05       	cpc	r17, r5
     d3e:	50 f0       	brcs	.+20     	; 0xd54 <__stack+0x4f5>
     d40:	e2 16       	cp	r14, r18
     d42:	f3 06       	cpc	r15, r19
     d44:	04 07       	cpc	r16, r20
     d46:	15 07       	cpc	r17, r21
     d48:	28 f4       	brcc	.+10     	; 0xd54 <__stack+0x4f5>
     d4a:	08 94       	sec
     d4c:	a1 08       	sbc	r10, r1
     d4e:	b1 08       	sbc	r11, r1
     d50:	c1 08       	sbc	r12, r1
     d52:	d1 08       	sbc	r13, r1
     d54:	61 96       	adiw	r28, 0x11	; 17
     d56:	ec ac       	ldd	r14, Y+60	; 0x3c
     d58:	fd ac       	ldd	r15, Y+61	; 0x3d
     d5a:	0e ad       	ldd	r16, Y+62	; 0x3e
     d5c:	1f ad       	ldd	r17, Y+63	; 0x3f
     d5e:	61 97       	sbiw	r28, 0x11	; 17
     d60:	d7 01       	movw	r26, r14
     d62:	99 27       	eor	r25, r25
     d64:	88 27       	eor	r24, r24
     d66:	96 01       	movw	r18, r12
     d68:	85 01       	movw	r16, r10
     d6a:	08 2b       	or	r16, r24
     d6c:	19 2b       	or	r17, r25
     d6e:	2a 2b       	or	r18, r26
     d70:	3b 2b       	or	r19, r27
     d72:	09 ab       	std	Y+49, r16	; 0x31
     d74:	1a ab       	std	Y+50, r17	; 0x32
     d76:	2b ab       	std	Y+51, r18	; 0x33
     d78:	3c ab       	std	Y+52, r19	; 0x34
     d7a:	62 c2       	rjmp	.+1220   	; 0x1240 <__stack+0x9e1>
     d7c:	6e 14       	cp	r6, r14
     d7e:	7f 04       	cpc	r7, r15
     d80:	80 06       	cpc	r8, r16
     d82:	91 06       	cpc	r9, r17
     d84:	08 f4       	brcc	.+2      	; 0xd88 <__stack+0x529>
     d86:	51 c2       	rjmp	.+1186   	; 0x122a <__stack+0x9cb>
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	e2 16       	cp	r14, r18
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	f2 06       	cpc	r15, r18
     d90:	21 e0       	ldi	r18, 0x01	; 1
     d92:	02 07       	cpc	r16, r18
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	12 07       	cpc	r17, r18
     d98:	88 f4       	brcc	.+34     	; 0xdbc <__stack+0x55d>
     d9a:	3f ef       	ldi	r19, 0xFF	; 255
     d9c:	e3 16       	cp	r14, r19
     d9e:	f1 04       	cpc	r15, r1
     da0:	01 05       	cpc	r16, r1
     da2:	11 05       	cpc	r17, r1
     da4:	31 f0       	breq	.+12     	; 0xdb2 <__stack+0x553>
     da6:	28 f0       	brcs	.+10     	; 0xdb2 <__stack+0x553>
     da8:	48 e0       	ldi	r20, 0x08	; 8
     daa:	50 e0       	ldi	r21, 0x00	; 0
     dac:	60 e0       	ldi	r22, 0x00	; 0
     dae:	70 e0       	ldi	r23, 0x00	; 0
     db0:	17 c0       	rjmp	.+46     	; 0xde0 <__stack+0x581>
     db2:	40 e0       	ldi	r20, 0x00	; 0
     db4:	50 e0       	ldi	r21, 0x00	; 0
     db6:	60 e0       	ldi	r22, 0x00	; 0
     db8:	70 e0       	ldi	r23, 0x00	; 0
     dba:	12 c0       	rjmp	.+36     	; 0xde0 <__stack+0x581>
     dbc:	40 e0       	ldi	r20, 0x00	; 0
     dbe:	e4 16       	cp	r14, r20
     dc0:	40 e0       	ldi	r20, 0x00	; 0
     dc2:	f4 06       	cpc	r15, r20
     dc4:	40 e0       	ldi	r20, 0x00	; 0
     dc6:	04 07       	cpc	r16, r20
     dc8:	41 e0       	ldi	r20, 0x01	; 1
     dca:	14 07       	cpc	r17, r20
     dcc:	28 f0       	brcs	.+10     	; 0xdd8 <__stack+0x579>
     dce:	48 e1       	ldi	r20, 0x18	; 24
     dd0:	50 e0       	ldi	r21, 0x00	; 0
     dd2:	60 e0       	ldi	r22, 0x00	; 0
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	04 c0       	rjmp	.+8      	; 0xde0 <__stack+0x581>
     dd8:	40 e1       	ldi	r20, 0x10	; 16
     dda:	50 e0       	ldi	r21, 0x00	; 0
     ddc:	60 e0       	ldi	r22, 0x00	; 0
     dde:	70 e0       	ldi	r23, 0x00	; 0
     de0:	d8 01       	movw	r26, r16
     de2:	c7 01       	movw	r24, r14
     de4:	04 2e       	mov	r0, r20
     de6:	04 c0       	rjmp	.+8      	; 0xdf0 <__stack+0x591>
     de8:	b6 95       	lsr	r27
     dea:	a7 95       	ror	r26
     dec:	97 95       	ror	r25
     dee:	87 95       	ror	r24
     df0:	0a 94       	dec	r0
     df2:	d2 f7       	brpl	.-12     	; 0xde8 <__stack+0x589>
     df4:	82 50       	subi	r24, 0x02	; 2
     df6:	9f 4f       	sbci	r25, 0xFF	; 255
     df8:	dc 01       	movw	r26, r24
     dfa:	2c 91       	ld	r18, X
     dfc:	30 e2       	ldi	r19, 0x20	; 32
     dfe:	a3 2e       	mov	r10, r19
     e00:	b1 2c       	mov	r11, r1
     e02:	c1 2c       	mov	r12, r1
     e04:	d1 2c       	mov	r13, r1
     e06:	d6 01       	movw	r26, r12
     e08:	c5 01       	movw	r24, r10
     e0a:	84 1b       	sub	r24, r20
     e0c:	95 0b       	sbc	r25, r21
     e0e:	a6 0b       	sbc	r26, r22
     e10:	b7 0b       	sbc	r27, r23
     e12:	82 1b       	sub	r24, r18
     e14:	91 09       	sbc	r25, r1
     e16:	a1 09       	sbc	r26, r1
     e18:	b1 09       	sbc	r27, r1
     e1a:	00 97       	sbiw	r24, 0x00	; 0
     e1c:	a1 05       	cpc	r26, r1
     e1e:	b1 05       	cpc	r27, r1
     e20:	89 f4       	brne	.+34     	; 0xe44 <__stack+0x5e5>
     e22:	e6 14       	cp	r14, r6
     e24:	f7 04       	cpc	r15, r7
     e26:	08 05       	cpc	r16, r8
     e28:	19 05       	cpc	r17, r9
     e2a:	08 f4       	brcc	.+2      	; 0xe2e <__stack+0x5cf>
     e2c:	f2 c1       	rjmp	.+996    	; 0x1212 <__stack+0x9b3>
     e2e:	6d a4       	ldd	r6, Y+45	; 0x2d
     e30:	7e a4       	ldd	r7, Y+46	; 0x2e
     e32:	8f a4       	ldd	r8, Y+47	; 0x2f
     e34:	98 a8       	ldd	r9, Y+48	; 0x30
     e36:	62 14       	cp	r6, r2
     e38:	73 04       	cpc	r7, r3
     e3a:	84 04       	cpc	r8, r4
     e3c:	95 04       	cpc	r9, r5
     e3e:	08 f0       	brcs	.+2      	; 0xe42 <__stack+0x5e3>
     e40:	e8 c1       	rjmp	.+976    	; 0x1212 <__stack+0x9b3>
     e42:	f3 c1       	rjmp	.+998    	; 0x122a <__stack+0x9cb>
     e44:	6e 96       	adiw	r28, 0x1e	; 30
     e46:	8f af       	std	Y+63, r24	; 0x3f
     e48:	6e 97       	sbiw	r28, 0x1e	; 30
     e4a:	08 2e       	mov	r0, r24
     e4c:	04 c0       	rjmp	.+8      	; 0xe56 <__stack+0x5f7>
     e4e:	ee 0c       	add	r14, r14
     e50:	ff 1c       	adc	r15, r15
     e52:	00 1f       	adc	r16, r16
     e54:	11 1f       	adc	r17, r17
     e56:	0a 94       	dec	r0
     e58:	d2 f7       	brpl	.-12     	; 0xe4e <__stack+0x5ef>
     e5a:	6a 2d       	mov	r22, r10
     e5c:	68 1b       	sub	r22, r24
     e5e:	d2 01       	movw	r26, r4
     e60:	c1 01       	movw	r24, r2
     e62:	06 2e       	mov	r0, r22
     e64:	04 c0       	rjmp	.+8      	; 0xe6e <__stack+0x60f>
     e66:	b6 95       	lsr	r27
     e68:	a7 95       	ror	r26
     e6a:	97 95       	ror	r25
     e6c:	87 95       	ror	r24
     e6e:	0a 94       	dec	r0
     e70:	d2 f7       	brpl	.-12     	; 0xe66 <__stack+0x607>
     e72:	5c 01       	movw	r10, r24
     e74:	6d 01       	movw	r12, r26
     e76:	ae 28       	or	r10, r14
     e78:	bf 28       	or	r11, r15
     e7a:	c0 2a       	or	r12, r16
     e7c:	d1 2a       	or	r13, r17
     e7e:	ad a2       	std	Y+37, r10	; 0x25
     e80:	be a2       	std	Y+38, r11	; 0x26
     e82:	cf a2       	std	Y+39, r12	; 0x27
     e84:	d8 a6       	std	Y+40, r13	; 0x28
     e86:	72 01       	movw	r14, r4
     e88:	61 01       	movw	r12, r2
     e8a:	6e 96       	adiw	r28, 0x1e	; 30
     e8c:	0f ac       	ldd	r0, Y+63	; 0x3f
     e8e:	6e 97       	sbiw	r28, 0x1e	; 30
     e90:	04 c0       	rjmp	.+8      	; 0xe9a <__stack+0x63b>
     e92:	cc 0c       	add	r12, r12
     e94:	dd 1c       	adc	r13, r13
     e96:	ee 1c       	adc	r14, r14
     e98:	ff 1c       	adc	r15, r15
     e9a:	0a 94       	dec	r0
     e9c:	d2 f7       	brpl	.-12     	; 0xe92 <__stack+0x633>
     e9e:	c9 a2       	std	Y+33, r12	; 0x21
     ea0:	da a2       	std	Y+34, r13	; 0x22
     ea2:	eb a2       	std	Y+35, r14	; 0x23
     ea4:	fc a2       	std	Y+36, r15	; 0x24
     ea6:	64 01       	movw	r12, r8
     ea8:	53 01       	movw	r10, r6
     eaa:	06 2e       	mov	r0, r22
     eac:	04 c0       	rjmp	.+8      	; 0xeb6 <__stack+0x657>
     eae:	d6 94       	lsr	r13
     eb0:	c7 94       	ror	r12
     eb2:	b7 94       	ror	r11
     eb4:	a7 94       	ror	r10
     eb6:	0a 94       	dec	r0
     eb8:	d2 f7       	brpl	.-12     	; 0xeae <__stack+0x64f>
     eba:	d4 01       	movw	r26, r8
     ebc:	c3 01       	movw	r24, r6
     ebe:	6e 96       	adiw	r28, 0x1e	; 30
     ec0:	0f ac       	ldd	r0, Y+63	; 0x3f
     ec2:	6e 97       	sbiw	r28, 0x1e	; 30
     ec4:	04 c0       	rjmp	.+8      	; 0xece <__stack+0x66f>
     ec6:	88 0f       	add	r24, r24
     ec8:	99 1f       	adc	r25, r25
     eca:	aa 1f       	adc	r26, r26
     ecc:	bb 1f       	adc	r27, r27
     ece:	0a 94       	dec	r0
     ed0:	d2 f7       	brpl	.-12     	; 0xec6 <__stack+0x667>
     ed2:	ed a4       	ldd	r14, Y+45	; 0x2d
     ed4:	fe a4       	ldd	r15, Y+46	; 0x2e
     ed6:	0f a5       	ldd	r16, Y+47	; 0x2f
     ed8:	18 a9       	ldd	r17, Y+48	; 0x30
     eda:	04 c0       	rjmp	.+8      	; 0xee4 <__stack+0x685>
     edc:	16 95       	lsr	r17
     ede:	07 95       	ror	r16
     ee0:	f7 94       	ror	r15
     ee2:	e7 94       	ror	r14
     ee4:	6a 95       	dec	r22
     ee6:	d2 f7       	brpl	.-12     	; 0xedc <__stack+0x67d>
     ee8:	37 01       	movw	r6, r14
     eea:	48 01       	movw	r8, r16
     eec:	68 2a       	or	r6, r24
     eee:	79 2a       	or	r7, r25
     ef0:	8a 2a       	or	r8, r26
     ef2:	9b 2a       	or	r9, r27
     ef4:	6d 8e       	std	Y+29, r6	; 0x1d
     ef6:	7e 8e       	std	Y+30, r7	; 0x1e
     ef8:	8f 8e       	std	Y+31, r8	; 0x1f
     efa:	98 a2       	std	Y+32, r9	; 0x20
     efc:	ed a0       	ldd	r14, Y+37	; 0x25
     efe:	fe a0       	ldd	r15, Y+38	; 0x26
     f00:	0f a1       	ldd	r16, Y+39	; 0x27
     f02:	18 a5       	ldd	r17, Y+40	; 0x28
     f04:	38 01       	movw	r6, r16
     f06:	88 24       	eor	r8, r8
     f08:	99 24       	eor	r9, r9
     f0a:	98 01       	movw	r18, r16
     f0c:	87 01       	movw	r16, r14
     f0e:	20 70       	andi	r18, 0x00	; 0
     f10:	30 70       	andi	r19, 0x00	; 0
     f12:	65 96       	adiw	r28, 0x15	; 21
     f14:	0c af       	std	Y+60, r16	; 0x3c
     f16:	1d af       	std	Y+61, r17	; 0x3d
     f18:	2e af       	std	Y+62, r18	; 0x3e
     f1a:	3f af       	std	Y+63, r19	; 0x3f
     f1c:	65 97       	sbiw	r28, 0x15	; 21
     f1e:	c6 01       	movw	r24, r12
     f20:	b5 01       	movw	r22, r10
     f22:	a4 01       	movw	r20, r8
     f24:	93 01       	movw	r18, r6
     f26:	0e 94 48 3a 	call	0x7490	; 0x7490 <__udivmodsi4>
     f2a:	7b 01       	movw	r14, r22
     f2c:	8c 01       	movw	r16, r24
     f2e:	c6 01       	movw	r24, r12
     f30:	b5 01       	movw	r22, r10
     f32:	a4 01       	movw	r20, r8
     f34:	93 01       	movw	r18, r6
     f36:	0e 94 48 3a 	call	0x7490	; 0x7490 <__udivmodsi4>
     f3a:	c9 01       	movw	r24, r18
     f3c:	da 01       	movw	r26, r20
     f3e:	1c 01       	movw	r2, r24
     f40:	2d 01       	movw	r4, r26
     f42:	c2 01       	movw	r24, r4
     f44:	b1 01       	movw	r22, r2
     f46:	65 96       	adiw	r28, 0x15	; 21
     f48:	2c ad       	ldd	r18, Y+60	; 0x3c
     f4a:	3d ad       	ldd	r19, Y+61	; 0x3d
     f4c:	4e ad       	ldd	r20, Y+62	; 0x3e
     f4e:	5f ad       	ldd	r21, Y+63	; 0x3f
     f50:	65 97       	sbiw	r28, 0x15	; 21
     f52:	0e 94 fa 39 	call	0x73f4	; 0x73f4 <__mulsi3>
     f56:	9b 01       	movw	r18, r22
     f58:	ac 01       	movw	r20, r24
     f5a:	87 01       	movw	r16, r14
     f5c:	ff 24       	eor	r15, r15
     f5e:	ee 24       	eor	r14, r14
     f60:	ad 8c       	ldd	r10, Y+29	; 0x1d
     f62:	be 8c       	ldd	r11, Y+30	; 0x1e
     f64:	cf 8c       	ldd	r12, Y+31	; 0x1f
     f66:	d8 a0       	ldd	r13, Y+32	; 0x20
     f68:	c6 01       	movw	r24, r12
     f6a:	aa 27       	eor	r26, r26
     f6c:	bb 27       	eor	r27, r27
     f6e:	57 01       	movw	r10, r14
     f70:	68 01       	movw	r12, r16
     f72:	a8 2a       	or	r10, r24
     f74:	b9 2a       	or	r11, r25
     f76:	ca 2a       	or	r12, r26
     f78:	db 2a       	or	r13, r27
     f7a:	a2 16       	cp	r10, r18
     f7c:	b3 06       	cpc	r11, r19
     f7e:	c4 06       	cpc	r12, r20
     f80:	d5 06       	cpc	r13, r21
     f82:	00 f5       	brcc	.+64     	; 0xfc4 <__stack+0x765>
     f84:	08 94       	sec
     f86:	21 08       	sbc	r2, r1
     f88:	31 08       	sbc	r3, r1
     f8a:	41 08       	sbc	r4, r1
     f8c:	51 08       	sbc	r5, r1
     f8e:	ed a0       	ldd	r14, Y+37	; 0x25
     f90:	fe a0       	ldd	r15, Y+38	; 0x26
     f92:	0f a1       	ldd	r16, Y+39	; 0x27
     f94:	18 a5       	ldd	r17, Y+40	; 0x28
     f96:	ae 0c       	add	r10, r14
     f98:	bf 1c       	adc	r11, r15
     f9a:	c0 1e       	adc	r12, r16
     f9c:	d1 1e       	adc	r13, r17
     f9e:	ae 14       	cp	r10, r14
     fa0:	bf 04       	cpc	r11, r15
     fa2:	c0 06       	cpc	r12, r16
     fa4:	d1 06       	cpc	r13, r17
     fa6:	70 f0       	brcs	.+28     	; 0xfc4 <__stack+0x765>
     fa8:	a2 16       	cp	r10, r18
     faa:	b3 06       	cpc	r11, r19
     fac:	c4 06       	cpc	r12, r20
     fae:	d5 06       	cpc	r13, r21
     fb0:	48 f4       	brcc	.+18     	; 0xfc4 <__stack+0x765>
     fb2:	08 94       	sec
     fb4:	21 08       	sbc	r2, r1
     fb6:	31 08       	sbc	r3, r1
     fb8:	41 08       	sbc	r4, r1
     fba:	51 08       	sbc	r5, r1
     fbc:	ae 0c       	add	r10, r14
     fbe:	bf 1c       	adc	r11, r15
     fc0:	c0 1e       	adc	r12, r16
     fc2:	d1 1e       	adc	r13, r17
     fc4:	a2 1a       	sub	r10, r18
     fc6:	b3 0a       	sbc	r11, r19
     fc8:	c4 0a       	sbc	r12, r20
     fca:	d5 0a       	sbc	r13, r21
     fcc:	c6 01       	movw	r24, r12
     fce:	b5 01       	movw	r22, r10
     fd0:	a4 01       	movw	r20, r8
     fd2:	93 01       	movw	r18, r6
     fd4:	0e 94 48 3a 	call	0x7490	; 0x7490 <__udivmodsi4>
     fd8:	7b 01       	movw	r14, r22
     fda:	8c 01       	movw	r16, r24
     fdc:	c6 01       	movw	r24, r12
     fde:	b5 01       	movw	r22, r10
     fe0:	a4 01       	movw	r20, r8
     fe2:	93 01       	movw	r18, r6
     fe4:	0e 94 48 3a 	call	0x7490	; 0x7490 <__udivmodsi4>
     fe8:	c9 01       	movw	r24, r18
     fea:	da 01       	movw	r26, r20
     fec:	3c 01       	movw	r6, r24
     fee:	4d 01       	movw	r8, r26
     ff0:	c4 01       	movw	r24, r8
     ff2:	b3 01       	movw	r22, r6
     ff4:	65 96       	adiw	r28, 0x15	; 21
     ff6:	2c ad       	ldd	r18, Y+60	; 0x3c
     ff8:	3d ad       	ldd	r19, Y+61	; 0x3d
     ffa:	4e ad       	ldd	r20, Y+62	; 0x3e
     ffc:	5f ad       	ldd	r21, Y+63	; 0x3f
     ffe:	65 97       	sbiw	r28, 0x15	; 21
    1000:	0e 94 fa 39 	call	0x73f4	; 0x73f4 <__mulsi3>
    1004:	9b 01       	movw	r18, r22
    1006:	ac 01       	movw	r20, r24
    1008:	87 01       	movw	r16, r14
    100a:	ff 24       	eor	r15, r15
    100c:	ee 24       	eor	r14, r14
    100e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1010:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1012:	af 8d       	ldd	r26, Y+31	; 0x1f
    1014:	b8 a1       	ldd	r27, Y+32	; 0x20
    1016:	a0 70       	andi	r26, 0x00	; 0
    1018:	b0 70       	andi	r27, 0x00	; 0
    101a:	57 01       	movw	r10, r14
    101c:	68 01       	movw	r12, r16
    101e:	a8 2a       	or	r10, r24
    1020:	b9 2a       	or	r11, r25
    1022:	ca 2a       	or	r12, r26
    1024:	db 2a       	or	r13, r27
    1026:	a2 16       	cp	r10, r18
    1028:	b3 06       	cpc	r11, r19
    102a:	c4 06       	cpc	r12, r20
    102c:	d5 06       	cpc	r13, r21
    102e:	00 f5       	brcc	.+64     	; 0x1070 <__stack+0x811>
    1030:	08 94       	sec
    1032:	61 08       	sbc	r6, r1
    1034:	71 08       	sbc	r7, r1
    1036:	81 08       	sbc	r8, r1
    1038:	91 08       	sbc	r9, r1
    103a:	6d a1       	ldd	r22, Y+37	; 0x25
    103c:	7e a1       	ldd	r23, Y+38	; 0x26
    103e:	8f a1       	ldd	r24, Y+39	; 0x27
    1040:	98 a5       	ldd	r25, Y+40	; 0x28
    1042:	a6 0e       	add	r10, r22
    1044:	b7 1e       	adc	r11, r23
    1046:	c8 1e       	adc	r12, r24
    1048:	d9 1e       	adc	r13, r25
    104a:	a6 16       	cp	r10, r22
    104c:	b7 06       	cpc	r11, r23
    104e:	c8 06       	cpc	r12, r24
    1050:	d9 06       	cpc	r13, r25
    1052:	70 f0       	brcs	.+28     	; 0x1070 <__stack+0x811>
    1054:	a2 16       	cp	r10, r18
    1056:	b3 06       	cpc	r11, r19
    1058:	c4 06       	cpc	r12, r20
    105a:	d5 06       	cpc	r13, r21
    105c:	48 f4       	brcc	.+18     	; 0x1070 <__stack+0x811>
    105e:	08 94       	sec
    1060:	61 08       	sbc	r6, r1
    1062:	71 08       	sbc	r7, r1
    1064:	81 08       	sbc	r8, r1
    1066:	91 08       	sbc	r9, r1
    1068:	a6 0e       	add	r10, r22
    106a:	b7 1e       	adc	r11, r23
    106c:	c8 1e       	adc	r12, r24
    106e:	d9 1e       	adc	r13, r25
    1070:	d6 01       	movw	r26, r12
    1072:	c5 01       	movw	r24, r10
    1074:	82 1b       	sub	r24, r18
    1076:	93 0b       	sbc	r25, r19
    1078:	a4 0b       	sbc	r26, r20
    107a:	b5 0b       	sbc	r27, r21
    107c:	89 8f       	std	Y+25, r24	; 0x19
    107e:	9a 8f       	std	Y+26, r25	; 0x1a
    1080:	ab 8f       	std	Y+27, r26	; 0x1b
    1082:	bc 8f       	std	Y+28, r27	; 0x1c
    1084:	d1 01       	movw	r26, r2
    1086:	99 27       	eor	r25, r25
    1088:	88 27       	eor	r24, r24
    108a:	64 01       	movw	r12, r8
    108c:	53 01       	movw	r10, r6
    108e:	a8 2a       	or	r10, r24
    1090:	b9 2a       	or	r11, r25
    1092:	ca 2a       	or	r12, r26
    1094:	db 2a       	or	r13, r27
    1096:	a9 aa       	std	Y+49, r10	; 0x31
    1098:	ba aa       	std	Y+50, r11	; 0x32
    109a:	cb aa       	std	Y+51, r12	; 0x33
    109c:	dc aa       	std	Y+52, r13	; 0x34
    109e:	86 01       	movw	r16, r12
    10a0:	75 01       	movw	r14, r10
    10a2:	2f ef       	ldi	r18, 0xFF	; 255
    10a4:	3f ef       	ldi	r19, 0xFF	; 255
    10a6:	40 e0       	ldi	r20, 0x00	; 0
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	e2 22       	and	r14, r18
    10ac:	f3 22       	and	r15, r19
    10ae:	04 23       	and	r16, r20
    10b0:	15 23       	and	r17, r21
    10b2:	a6 01       	movw	r20, r12
    10b4:	66 27       	eor	r22, r22
    10b6:	77 27       	eor	r23, r23
    10b8:	6d 96       	adiw	r28, 0x1d	; 29
    10ba:	4c af       	std	Y+60, r20	; 0x3c
    10bc:	5d af       	std	Y+61, r21	; 0x3d
    10be:	6e af       	std	Y+62, r22	; 0x3e
    10c0:	7f af       	std	Y+63, r23	; 0x3f
    10c2:	6d 97       	sbiw	r28, 0x1d	; 29
    10c4:	a9 a0       	ldd	r10, Y+33	; 0x21
    10c6:	ba a0       	ldd	r11, Y+34	; 0x22
    10c8:	cb a0       	ldd	r12, Y+35	; 0x23
    10ca:	dc a0       	ldd	r13, Y+36	; 0x24
    10cc:	6f ef       	ldi	r22, 0xFF	; 255
    10ce:	7f ef       	ldi	r23, 0xFF	; 255
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	a6 22       	and	r10, r22
    10d6:	b7 22       	and	r11, r23
    10d8:	c8 22       	and	r12, r24
    10da:	d9 22       	and	r13, r25
    10dc:	89 a1       	ldd	r24, Y+33	; 0x21
    10de:	9a a1       	ldd	r25, Y+34	; 0x22
    10e0:	ab a1       	ldd	r26, Y+35	; 0x23
    10e2:	bc a1       	ldd	r27, Y+36	; 0x24
    10e4:	1d 01       	movw	r2, r26
    10e6:	44 24       	eor	r4, r4
    10e8:	55 24       	eor	r5, r5
    10ea:	c8 01       	movw	r24, r16
    10ec:	b7 01       	movw	r22, r14
    10ee:	a6 01       	movw	r20, r12
    10f0:	95 01       	movw	r18, r10
    10f2:	0e 94 fa 39 	call	0x73f4	; 0x73f4 <__mulsi3>
    10f6:	69 96       	adiw	r28, 0x19	; 25
    10f8:	6c af       	std	Y+60, r22	; 0x3c
    10fa:	7d af       	std	Y+61, r23	; 0x3d
    10fc:	8e af       	std	Y+62, r24	; 0x3e
    10fe:	9f af       	std	Y+63, r25	; 0x3f
    1100:	69 97       	sbiw	r28, 0x19	; 25
    1102:	c8 01       	movw	r24, r16
    1104:	b7 01       	movw	r22, r14
    1106:	a2 01       	movw	r20, r4
    1108:	91 01       	movw	r18, r2
    110a:	0e 94 fa 39 	call	0x73f4	; 0x73f4 <__mulsi3>
    110e:	3b 01       	movw	r6, r22
    1110:	4c 01       	movw	r8, r24
    1112:	6d 96       	adiw	r28, 0x1d	; 29
    1114:	6c ad       	ldd	r22, Y+60	; 0x3c
    1116:	7d ad       	ldd	r23, Y+61	; 0x3d
    1118:	8e ad       	ldd	r24, Y+62	; 0x3e
    111a:	9f ad       	ldd	r25, Y+63	; 0x3f
    111c:	6d 97       	sbiw	r28, 0x1d	; 29
    111e:	a6 01       	movw	r20, r12
    1120:	95 01       	movw	r18, r10
    1122:	0e 94 fa 39 	call	0x73f4	; 0x73f4 <__mulsi3>
    1126:	7b 01       	movw	r14, r22
    1128:	8c 01       	movw	r16, r24
    112a:	6d 96       	adiw	r28, 0x1d	; 29
    112c:	6c ad       	ldd	r22, Y+60	; 0x3c
    112e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1130:	8e ad       	ldd	r24, Y+62	; 0x3e
    1132:	9f ad       	ldd	r25, Y+63	; 0x3f
    1134:	6d 97       	sbiw	r28, 0x1d	; 29
    1136:	a2 01       	movw	r20, r4
    1138:	91 01       	movw	r18, r2
    113a:	0e 94 fa 39 	call	0x73f4	; 0x73f4 <__mulsi3>
    113e:	5b 01       	movw	r10, r22
    1140:	6c 01       	movw	r12, r24
    1142:	a8 01       	movw	r20, r16
    1144:	97 01       	movw	r18, r14
    1146:	26 0d       	add	r18, r6
    1148:	37 1d       	adc	r19, r7
    114a:	48 1d       	adc	r20, r8
    114c:	59 1d       	adc	r21, r9
    114e:	69 96       	adiw	r28, 0x19	; 25
    1150:	6c ac       	ldd	r6, Y+60	; 0x3c
    1152:	7d ac       	ldd	r7, Y+61	; 0x3d
    1154:	8e ac       	ldd	r8, Y+62	; 0x3e
    1156:	9f ac       	ldd	r9, Y+63	; 0x3f
    1158:	69 97       	sbiw	r28, 0x19	; 25
    115a:	c4 01       	movw	r24, r8
    115c:	aa 27       	eor	r26, r26
    115e:	bb 27       	eor	r27, r27
    1160:	28 0f       	add	r18, r24
    1162:	39 1f       	adc	r19, r25
    1164:	4a 1f       	adc	r20, r26
    1166:	5b 1f       	adc	r21, r27
    1168:	2e 15       	cp	r18, r14
    116a:	3f 05       	cpc	r19, r15
    116c:	40 07       	cpc	r20, r16
    116e:	51 07       	cpc	r21, r17
    1170:	48 f4       	brcc	.+18     	; 0x1184 <__stack+0x925>
    1172:	e1 2c       	mov	r14, r1
    1174:	f1 2c       	mov	r15, r1
    1176:	61 e0       	ldi	r22, 0x01	; 1
    1178:	06 2f       	mov	r16, r22
    117a:	11 2d       	mov	r17, r1
    117c:	ae 0c       	add	r10, r14
    117e:	bf 1c       	adc	r11, r15
    1180:	c0 1e       	adc	r12, r16
    1182:	d1 1e       	adc	r13, r17
    1184:	ca 01       	movw	r24, r20
    1186:	aa 27       	eor	r26, r26
    1188:	bb 27       	eor	r27, r27
    118a:	bc 01       	movw	r22, r24
    118c:	cd 01       	movw	r24, r26
    118e:	6a 0d       	add	r22, r10
    1190:	7b 1d       	adc	r23, r11
    1192:	8c 1d       	adc	r24, r12
    1194:	9d 1d       	adc	r25, r13
    1196:	69 8c       	ldd	r6, Y+25	; 0x19
    1198:	7a 8c       	ldd	r7, Y+26	; 0x1a
    119a:	8b 8c       	ldd	r8, Y+27	; 0x1b
    119c:	9c 8c       	ldd	r9, Y+28	; 0x1c
    119e:	66 16       	cp	r6, r22
    11a0:	77 06       	cpc	r7, r23
    11a2:	88 06       	cpc	r8, r24
    11a4:	99 06       	cpc	r9, r25
    11a6:	40 f1       	brcs	.+80     	; 0x11f8 <__stack+0x999>
    11a8:	66 15       	cp	r22, r6
    11aa:	77 05       	cpc	r23, r7
    11ac:	88 05       	cpc	r24, r8
    11ae:	99 05       	cpc	r25, r9
    11b0:	09 f0       	breq	.+2      	; 0x11b4 <__stack+0x955>
    11b2:	43 c0       	rjmp	.+134    	; 0x123a <__stack+0x9db>
    11b4:	d9 01       	movw	r26, r18
    11b6:	99 27       	eor	r25, r25
    11b8:	88 27       	eor	r24, r24
    11ba:	69 96       	adiw	r28, 0x19	; 25
    11bc:	2c ad       	ldd	r18, Y+60	; 0x3c
    11be:	3d ad       	ldd	r19, Y+61	; 0x3d
    11c0:	4e ad       	ldd	r20, Y+62	; 0x3e
    11c2:	5f ad       	ldd	r21, Y+63	; 0x3f
    11c4:	69 97       	sbiw	r28, 0x19	; 25
    11c6:	40 70       	andi	r20, 0x00	; 0
    11c8:	50 70       	andi	r21, 0x00	; 0
    11ca:	82 0f       	add	r24, r18
    11cc:	93 1f       	adc	r25, r19
    11ce:	a4 1f       	adc	r26, r20
    11d0:	b5 1f       	adc	r27, r21
    11d2:	2d a5       	ldd	r18, Y+45	; 0x2d
    11d4:	3e a5       	ldd	r19, Y+46	; 0x2e
    11d6:	4f a5       	ldd	r20, Y+47	; 0x2f
    11d8:	58 a9       	ldd	r21, Y+48	; 0x30
    11da:	6e 96       	adiw	r28, 0x1e	; 30
    11dc:	0f ac       	ldd	r0, Y+63	; 0x3f
    11de:	6e 97       	sbiw	r28, 0x1e	; 30
    11e0:	04 c0       	rjmp	.+8      	; 0x11ea <__stack+0x98b>
    11e2:	22 0f       	add	r18, r18
    11e4:	33 1f       	adc	r19, r19
    11e6:	44 1f       	adc	r20, r20
    11e8:	55 1f       	adc	r21, r21
    11ea:	0a 94       	dec	r0
    11ec:	d2 f7       	brpl	.-12     	; 0x11e2 <__stack+0x983>
    11ee:	28 17       	cp	r18, r24
    11f0:	39 07       	cpc	r19, r25
    11f2:	4a 07       	cpc	r20, r26
    11f4:	5b 07       	cpc	r21, r27
    11f6:	08 f5       	brcc	.+66     	; 0x123a <__stack+0x9db>
    11f8:	09 a9       	ldd	r16, Y+49	; 0x31
    11fa:	1a a9       	ldd	r17, Y+50	; 0x32
    11fc:	2b a9       	ldd	r18, Y+51	; 0x33
    11fe:	3c a9       	ldd	r19, Y+52	; 0x34
    1200:	01 50       	subi	r16, 0x01	; 1
    1202:	10 40       	sbci	r17, 0x00	; 0
    1204:	20 40       	sbci	r18, 0x00	; 0
    1206:	30 40       	sbci	r19, 0x00	; 0
    1208:	09 ab       	std	Y+49, r16	; 0x31
    120a:	1a ab       	std	Y+50, r17	; 0x32
    120c:	2b ab       	std	Y+51, r18	; 0x33
    120e:	3c ab       	std	Y+52, r19	; 0x34
    1210:	14 c0       	rjmp	.+40     	; 0x123a <__stack+0x9db>
    1212:	66 24       	eor	r6, r6
    1214:	77 24       	eor	r7, r7
    1216:	43 01       	movw	r8, r6
    1218:	21 e0       	ldi	r18, 0x01	; 1
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	40 e0       	ldi	r20, 0x00	; 0
    121e:	50 e0       	ldi	r21, 0x00	; 0
    1220:	29 ab       	std	Y+49, r18	; 0x31
    1222:	3a ab       	std	Y+50, r19	; 0x32
    1224:	4b ab       	std	Y+51, r20	; 0x33
    1226:	5c ab       	std	Y+52, r21	; 0x34
    1228:	0b c0       	rjmp	.+22     	; 0x1240 <__stack+0x9e1>
    122a:	66 24       	eor	r6, r6
    122c:	77 24       	eor	r7, r7
    122e:	43 01       	movw	r8, r6
    1230:	19 aa       	std	Y+49, r1	; 0x31
    1232:	1a aa       	std	Y+50, r1	; 0x32
    1234:	1b aa       	std	Y+51, r1	; 0x33
    1236:	1c aa       	std	Y+52, r1	; 0x34
    1238:	03 c0       	rjmp	.+6      	; 0x1240 <__stack+0x9e1>
    123a:	66 24       	eor	r6, r6
    123c:	77 24       	eor	r7, r7
    123e:	43 01       	movw	r8, r6
    1240:	fe 01       	movw	r30, r28
    1242:	71 96       	adiw	r30, 0x11	; 17
    1244:	88 e0       	ldi	r24, 0x08	; 8
    1246:	df 01       	movw	r26, r30
    1248:	1d 92       	st	X+, r1
    124a:	8a 95       	dec	r24
    124c:	e9 f7       	brne	.-6      	; 0x1248 <__stack+0x9e9>
    124e:	a9 a8       	ldd	r10, Y+49	; 0x31
    1250:	ba a8       	ldd	r11, Y+50	; 0x32
    1252:	cb a8       	ldd	r12, Y+51	; 0x33
    1254:	dc a8       	ldd	r13, Y+52	; 0x34
    1256:	a9 8a       	std	Y+17, r10	; 0x11
    1258:	ba 8a       	std	Y+18, r11	; 0x12
    125a:	cb 8a       	std	Y+19, r12	; 0x13
    125c:	dc 8a       	std	Y+20, r13	; 0x14
    125e:	6d 8a       	std	Y+21, r6	; 0x15
    1260:	7e 8a       	std	Y+22, r7	; 0x16
    1262:	8f 8a       	std	Y+23, r8	; 0x17
    1264:	98 8e       	std	Y+24, r9	; 0x18
    1266:	29 a9       	ldd	r18, Y+49	; 0x31
    1268:	3a 89       	ldd	r19, Y+18	; 0x12
    126a:	4b 89       	ldd	r20, Y+19	; 0x13
    126c:	5c 89       	ldd	r21, Y+20	; 0x14
    126e:	66 2d       	mov	r22, r6
    1270:	7e 89       	ldd	r23, Y+22	; 0x16
    1272:	8f 89       	ldd	r24, Y+23	; 0x17
    1274:	98 8d       	ldd	r25, Y+24	; 0x18
    1276:	c2 5a       	subi	r28, 0xA2	; 162
    1278:	df 4f       	sbci	r29, 0xFF	; 255
    127a:	e2 e1       	ldi	r30, 0x12	; 18
    127c:	0c 94 86 3a 	jmp	0x750c	; 0x750c <__epilogue_restores__>

00001280 <__umoddi3>:
    1280:	ab e5       	ldi	r26, 0x5B	; 91
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	e6 e4       	ldi	r30, 0x46	; 70
    1286:	f9 e0       	ldi	r31, 0x09	; 9
    1288:	0c 94 6a 3a 	jmp	0x74d4	; 0x74d4 <__prologue_saves__>
    128c:	a8 e0       	ldi	r26, 0x08	; 8
    128e:	4e 01       	movw	r8, r28
    1290:	08 94       	sec
    1292:	81 1c       	adc	r8, r1
    1294:	91 1c       	adc	r9, r1
    1296:	f4 01       	movw	r30, r8
    1298:	6a 2e       	mov	r6, r26
    129a:	11 92       	st	Z+, r1
    129c:	6a 94       	dec	r6
    129e:	e9 f7       	brne	.-6      	; 0x129a <__umoddi3+0x1a>
    12a0:	29 83       	std	Y+1, r18	; 0x01
    12a2:	3a 83       	std	Y+2, r19	; 0x02
    12a4:	4b 83       	std	Y+3, r20	; 0x03
    12a6:	5c 83       	std	Y+4, r21	; 0x04
    12a8:	6d 83       	std	Y+5, r22	; 0x05
    12aa:	7e 83       	std	Y+6, r23	; 0x06
    12ac:	8f 83       	std	Y+7, r24	; 0x07
    12ae:	98 87       	std	Y+8, r25	; 0x08
    12b0:	ce 01       	movw	r24, r28
    12b2:	09 96       	adiw	r24, 0x09	; 9
    12b4:	fc 01       	movw	r30, r24
    12b6:	11 92       	st	Z+, r1
    12b8:	aa 95       	dec	r26
    12ba:	e9 f7       	brne	.-6      	; 0x12b6 <__umoddi3+0x36>
    12bc:	a9 86       	std	Y+9, r10	; 0x09
    12be:	ba 86       	std	Y+10, r11	; 0x0a
    12c0:	cb 86       	std	Y+11, r12	; 0x0b
    12c2:	dc 86       	std	Y+12, r13	; 0x0c
    12c4:	ed 86       	std	Y+13, r14	; 0x0d
    12c6:	fe 86       	std	Y+14, r15	; 0x0e
    12c8:	0f 87       	std	Y+15, r16	; 0x0f
    12ca:	18 8b       	std	Y+16, r17	; 0x10
    12cc:	29 84       	ldd	r2, Y+9	; 0x09
    12ce:	3a 84       	ldd	r3, Y+10	; 0x0a
    12d0:	4b 84       	ldd	r4, Y+11	; 0x0b
    12d2:	5c 84       	ldd	r5, Y+12	; 0x0c
    12d4:	ad 84       	ldd	r10, Y+13	; 0x0d
    12d6:	be 84       	ldd	r11, Y+14	; 0x0e
    12d8:	cf 84       	ldd	r12, Y+15	; 0x0f
    12da:	d8 88       	ldd	r13, Y+16	; 0x10
    12dc:	29 81       	ldd	r18, Y+1	; 0x01
    12de:	3a 81       	ldd	r19, Y+2	; 0x02
    12e0:	4b 81       	ldd	r20, Y+3	; 0x03
    12e2:	5c 81       	ldd	r21, Y+4	; 0x04
    12e4:	69 96       	adiw	r28, 0x19	; 25
    12e6:	2f af       	std	Y+63, r18	; 0x3f
    12e8:	69 97       	sbiw	r28, 0x19	; 25
    12ea:	6a 96       	adiw	r28, 0x1a	; 26
    12ec:	3f af       	std	Y+63, r19	; 0x3f
    12ee:	6a 97       	sbiw	r28, 0x1a	; 26
    12f0:	6b 96       	adiw	r28, 0x1b	; 27
    12f2:	4f af       	std	Y+63, r20	; 0x3f
    12f4:	6b 97       	sbiw	r28, 0x1b	; 27
    12f6:	6c 96       	adiw	r28, 0x1c	; 28
    12f8:	5f af       	std	Y+63, r21	; 0x3f
    12fa:	6c 97       	sbiw	r28, 0x1c	; 28
    12fc:	6c 96       	adiw	r28, 0x1c	; 28
    12fe:	6c ac       	ldd	r6, Y+60	; 0x3c
    1300:	7d ac       	ldd	r7, Y+61	; 0x3d
    1302:	8e ac       	ldd	r8, Y+62	; 0x3e
    1304:	9f ac       	ldd	r9, Y+63	; 0x3f
    1306:	6c 97       	sbiw	r28, 0x1c	; 28
    1308:	69 aa       	std	Y+49, r6	; 0x31
    130a:	7a aa       	std	Y+50, r7	; 0x32
    130c:	8b aa       	std	Y+51, r8	; 0x33
    130e:	9c aa       	std	Y+52, r9	; 0x34
    1310:	6d 81       	ldd	r22, Y+5	; 0x05
    1312:	7e 81       	ldd	r23, Y+6	; 0x06
    1314:	8f 81       	ldd	r24, Y+7	; 0x07
    1316:	98 85       	ldd	r25, Y+8	; 0x08
    1318:	3b 01       	movw	r6, r22
    131a:	4c 01       	movw	r8, r24
    131c:	6d aa       	std	Y+53, r6	; 0x35
    131e:	7e aa       	std	Y+54, r7	; 0x36
    1320:	8f aa       	std	Y+55, r8	; 0x37
    1322:	98 ae       	std	Y+56, r9	; 0x38
    1324:	a1 14       	cp	r10, r1
    1326:	b1 04       	cpc	r11, r1
    1328:	c1 04       	cpc	r12, r1
    132a:	d1 04       	cpc	r13, r1
    132c:	09 f0       	breq	.+2      	; 0x1330 <__umoddi3+0xb0>
    132e:	04 c3       	rjmp	.+1544   	; 0x1938 <__umoddi3+0x6b8>
    1330:	62 14       	cp	r6, r2
    1332:	73 04       	cpc	r7, r3
    1334:	84 04       	cpc	r8, r4
    1336:	95 04       	cpc	r9, r5
    1338:	08 f0       	brcs	.+2      	; 0x133c <__umoddi3+0xbc>
    133a:	00 c1       	rjmp	.+512    	; 0x153c <__umoddi3+0x2bc>
    133c:	00 e0       	ldi	r16, 0x00	; 0
    133e:	20 16       	cp	r2, r16
    1340:	00 e0       	ldi	r16, 0x00	; 0
    1342:	30 06       	cpc	r3, r16
    1344:	01 e0       	ldi	r16, 0x01	; 1
    1346:	40 06       	cpc	r4, r16
    1348:	00 e0       	ldi	r16, 0x00	; 0
    134a:	50 06       	cpc	r5, r16
    134c:	88 f4       	brcc	.+34     	; 0x1370 <__umoddi3+0xf0>
    134e:	1f ef       	ldi	r17, 0xFF	; 255
    1350:	21 16       	cp	r2, r17
    1352:	31 04       	cpc	r3, r1
    1354:	41 04       	cpc	r4, r1
    1356:	51 04       	cpc	r5, r1
    1358:	39 f0       	breq	.+14     	; 0x1368 <__umoddi3+0xe8>
    135a:	30 f0       	brcs	.+12     	; 0x1368 <__umoddi3+0xe8>
    135c:	88 e0       	ldi	r24, 0x08	; 8
    135e:	e8 2e       	mov	r14, r24
    1360:	f1 2c       	mov	r15, r1
    1362:	01 2d       	mov	r16, r1
    1364:	11 2d       	mov	r17, r1
    1366:	18 c0       	rjmp	.+48     	; 0x1398 <__umoddi3+0x118>
    1368:	ee 24       	eor	r14, r14
    136a:	ff 24       	eor	r15, r15
    136c:	87 01       	movw	r16, r14
    136e:	14 c0       	rjmp	.+40     	; 0x1398 <__umoddi3+0x118>
    1370:	40 e0       	ldi	r20, 0x00	; 0
    1372:	24 16       	cp	r2, r20
    1374:	40 e0       	ldi	r20, 0x00	; 0
    1376:	34 06       	cpc	r3, r20
    1378:	40 e0       	ldi	r20, 0x00	; 0
    137a:	44 06       	cpc	r4, r20
    137c:	41 e0       	ldi	r20, 0x01	; 1
    137e:	54 06       	cpc	r5, r20
    1380:	30 f0       	brcs	.+12     	; 0x138e <__umoddi3+0x10e>
    1382:	b8 e1       	ldi	r27, 0x18	; 24
    1384:	eb 2e       	mov	r14, r27
    1386:	f1 2c       	mov	r15, r1
    1388:	01 2d       	mov	r16, r1
    138a:	11 2d       	mov	r17, r1
    138c:	05 c0       	rjmp	.+10     	; 0x1398 <__umoddi3+0x118>
    138e:	a0 e1       	ldi	r26, 0x10	; 16
    1390:	ea 2e       	mov	r14, r26
    1392:	f1 2c       	mov	r15, r1
    1394:	01 2d       	mov	r16, r1
    1396:	11 2d       	mov	r17, r1
    1398:	d2 01       	movw	r26, r4
    139a:	c1 01       	movw	r24, r2
    139c:	0e 2c       	mov	r0, r14
    139e:	04 c0       	rjmp	.+8      	; 0x13a8 <__umoddi3+0x128>
    13a0:	b6 95       	lsr	r27
    13a2:	a7 95       	ror	r26
    13a4:	97 95       	ror	r25
    13a6:	87 95       	ror	r24
    13a8:	0a 94       	dec	r0
    13aa:	d2 f7       	brpl	.-12     	; 0x13a0 <__umoddi3+0x120>
    13ac:	82 50       	subi	r24, 0x02	; 2
    13ae:	9f 4f       	sbci	r25, 0xFF	; 255
    13b0:	dc 01       	movw	r26, r24
    13b2:	2c 91       	ld	r18, X
    13b4:	80 e2       	ldi	r24, 0x20	; 32
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	a0 e0       	ldi	r26, 0x00	; 0
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	8e 19       	sub	r24, r14
    13be:	9f 09       	sbc	r25, r15
    13c0:	a0 0b       	sbc	r26, r16
    13c2:	b1 0b       	sbc	r27, r17
    13c4:	5c 01       	movw	r10, r24
    13c6:	6d 01       	movw	r12, r26
    13c8:	a2 1a       	sub	r10, r18
    13ca:	b1 08       	sbc	r11, r1
    13cc:	c1 08       	sbc	r12, r1
    13ce:	d1 08       	sbc	r13, r1
    13d0:	a9 ae       	std	Y+57, r10	; 0x39
    13d2:	ba ae       	std	Y+58, r11	; 0x3a
    13d4:	cb ae       	std	Y+59, r12	; 0x3b
    13d6:	dc ae       	std	Y+60, r13	; 0x3c
    13d8:	a1 14       	cp	r10, r1
    13da:	b1 04       	cpc	r11, r1
    13dc:	c1 04       	cpc	r12, r1
    13de:	d1 04       	cpc	r13, r1
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <__umoddi3+0x164>
    13e2:	3f c0       	rjmp	.+126    	; 0x1462 <__umoddi3+0x1e2>
    13e4:	69 ad       	ldd	r22, Y+57	; 0x39
    13e6:	06 2e       	mov	r0, r22
    13e8:	04 c0       	rjmp	.+8      	; 0x13f2 <__umoddi3+0x172>
    13ea:	22 0c       	add	r2, r2
    13ec:	33 1c       	adc	r3, r3
    13ee:	44 1c       	adc	r4, r4
    13f0:	55 1c       	adc	r5, r5
    13f2:	0a 94       	dec	r0
    13f4:	d2 f7       	brpl	.-12     	; 0x13ea <__umoddi3+0x16a>
    13f6:	a4 01       	movw	r20, r8
    13f8:	93 01       	movw	r18, r6
    13fa:	06 2e       	mov	r0, r22
    13fc:	04 c0       	rjmp	.+8      	; 0x1406 <__umoddi3+0x186>
    13fe:	22 0f       	add	r18, r18
    1400:	33 1f       	adc	r19, r19
    1402:	44 1f       	adc	r20, r20
    1404:	55 1f       	adc	r21, r21
    1406:	0a 94       	dec	r0
    1408:	d2 f7       	brpl	.-12     	; 0x13fe <__umoddi3+0x17e>
    140a:	80 e2       	ldi	r24, 0x20	; 32
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	8a 19       	sub	r24, r10
    1410:	9b 09       	sbc	r25, r11
    1412:	6c 96       	adiw	r28, 0x1c	; 28
    1414:	cc ac       	ldd	r12, Y+60	; 0x3c
    1416:	dd ac       	ldd	r13, Y+61	; 0x3d
    1418:	ee ac       	ldd	r14, Y+62	; 0x3e
    141a:	ff ac       	ldd	r15, Y+63	; 0x3f
    141c:	6c 97       	sbiw	r28, 0x1c	; 28
    141e:	04 c0       	rjmp	.+8      	; 0x1428 <__umoddi3+0x1a8>
    1420:	f6 94       	lsr	r15
    1422:	e7 94       	ror	r14
    1424:	d7 94       	ror	r13
    1426:	c7 94       	ror	r12
    1428:	8a 95       	dec	r24
    142a:	d2 f7       	brpl	.-12     	; 0x1420 <__umoddi3+0x1a0>
    142c:	87 01       	movw	r16, r14
    142e:	76 01       	movw	r14, r12
    1430:	e2 2a       	or	r14, r18
    1432:	f3 2a       	or	r15, r19
    1434:	04 2b       	or	r16, r20
    1436:	15 2b       	or	r17, r21
    1438:	ed aa       	std	Y+53, r14	; 0x35
    143a:	fe aa       	std	Y+54, r15	; 0x36
    143c:	0f ab       	std	Y+55, r16	; 0x37
    143e:	18 af       	std	Y+56, r17	; 0x38
    1440:	6c 96       	adiw	r28, 0x1c	; 28
    1442:	8c ad       	ldd	r24, Y+60	; 0x3c
    1444:	9d ad       	ldd	r25, Y+61	; 0x3d
    1446:	ae ad       	ldd	r26, Y+62	; 0x3e
    1448:	bf ad       	ldd	r27, Y+63	; 0x3f
    144a:	6c 97       	sbiw	r28, 0x1c	; 28
    144c:	04 c0       	rjmp	.+8      	; 0x1456 <__umoddi3+0x1d6>
    144e:	88 0f       	add	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	aa 1f       	adc	r26, r26
    1454:	bb 1f       	adc	r27, r27
    1456:	6a 95       	dec	r22
    1458:	d2 f7       	brpl	.-12     	; 0x144e <__umoddi3+0x1ce>
    145a:	89 ab       	std	Y+49, r24	; 0x31
    145c:	9a ab       	std	Y+50, r25	; 0x32
    145e:	ab ab       	std	Y+51, r26	; 0x33
    1460:	bc ab       	std	Y+52, r27	; 0x34
    1462:	32 01       	movw	r6, r4
    1464:	88 24       	eor	r8, r8
    1466:	99 24       	eor	r9, r9
    1468:	b2 01       	movw	r22, r4
    146a:	a1 01       	movw	r20, r2
    146c:	60 70       	andi	r22, 0x00	; 0
    146e:	70 70       	andi	r23, 0x00	; 0
    1470:	21 96       	adiw	r28, 0x01	; 1
    1472:	4c af       	std	Y+60, r20	; 0x3c
    1474:	5d af       	std	Y+61, r21	; 0x3d
    1476:	6e af       	std	Y+62, r22	; 0x3e
    1478:	7f af       	std	Y+63, r23	; 0x3f
    147a:	21 97       	sbiw	r28, 0x01	; 1
    147c:	6d a9       	ldd	r22, Y+53	; 0x35
    147e:	7e a9       	ldd	r23, Y+54	; 0x36
    1480:	8f a9       	ldd	r24, Y+55	; 0x37
    1482:	98 ad       	ldd	r25, Y+56	; 0x38
    1484:	a4 01       	movw	r20, r8
    1486:	93 01       	movw	r18, r6
    1488:	0e 94 48 3a 	call	0x7490	; 0x7490 <__udivmodsi4>
    148c:	7b 01       	movw	r14, r22
    148e:	8c 01       	movw	r16, r24
    1490:	6d a9       	ldd	r22, Y+53	; 0x35
    1492:	7e a9       	ldd	r23, Y+54	; 0x36
    1494:	8f a9       	ldd	r24, Y+55	; 0x37
    1496:	98 ad       	ldd	r25, Y+56	; 0x38
    1498:	a4 01       	movw	r20, r8
    149a:	93 01       	movw	r18, r6
    149c:	0e 94 48 3a 	call	0x7490	; 0x7490 <__udivmodsi4>
    14a0:	ca 01       	movw	r24, r20
    14a2:	b9 01       	movw	r22, r18
    14a4:	21 96       	adiw	r28, 0x01	; 1
    14a6:	2c ad       	ldd	r18, Y+60	; 0x3c
    14a8:	3d ad       	ldd	r19, Y+61	; 0x3d
    14aa:	4e ad       	ldd	r20, Y+62	; 0x3e
    14ac:	5f ad       	ldd	r21, Y+63	; 0x3f
    14ae:	21 97       	sbiw	r28, 0x01	; 1
    14b0:	0e 94 fa 39 	call	0x73f4	; 0x73f4 <__mulsi3>
    14b4:	9b 01       	movw	r18, r22
    14b6:	ac 01       	movw	r20, r24
    14b8:	87 01       	movw	r16, r14
    14ba:	ff 24       	eor	r15, r15
    14bc:	ee 24       	eor	r14, r14
    14be:	a9 a8       	ldd	r10, Y+49	; 0x31
    14c0:	ba a8       	ldd	r11, Y+50	; 0x32
    14c2:	cb a8       	ldd	r12, Y+51	; 0x33
    14c4:	dc a8       	ldd	r13, Y+52	; 0x34
    14c6:	c6 01       	movw	r24, r12
    14c8:	aa 27       	eor	r26, r26
    14ca:	bb 27       	eor	r27, r27
    14cc:	57 01       	movw	r10, r14
    14ce:	68 01       	movw	r12, r16
    14d0:	a8 2a       	or	r10, r24
    14d2:	b9 2a       	or	r11, r25
    14d4:	ca 2a       	or	r12, r26
    14d6:	db 2a       	or	r13, r27
    14d8:	a2 16       	cp	r10, r18
    14da:	b3 06       	cpc	r11, r19
    14dc:	c4 06       	cpc	r12, r20
    14de:	d5 06       	cpc	r13, r21
    14e0:	90 f4       	brcc	.+36     	; 0x1506 <__umoddi3+0x286>
    14e2:	a2 0c       	add	r10, r2
    14e4:	b3 1c       	adc	r11, r3
    14e6:	c4 1c       	adc	r12, r4
    14e8:	d5 1c       	adc	r13, r5
    14ea:	a2 14       	cp	r10, r2
    14ec:	b3 04       	cpc	r11, r3
    14ee:	c4 04       	cpc	r12, r4
    14f0:	d5 04       	cpc	r13, r5
    14f2:	48 f0       	brcs	.+18     	; 0x1506 <__umoddi3+0x286>
    14f4:	a2 16       	cp	r10, r18
    14f6:	b3 06       	cpc	r11, r19
    14f8:	c4 06       	cpc	r12, r20
    14fa:	d5 06       	cpc	r13, r21
    14fc:	20 f4       	brcc	.+8      	; 0x1506 <__umoddi3+0x286>
    14fe:	a2 0c       	add	r10, r2
    1500:	b3 1c       	adc	r11, r3
    1502:	c4 1c       	adc	r12, r4
    1504:	d5 1c       	adc	r13, r5
    1506:	a2 1a       	sub	r10, r18
    1508:	b3 0a       	sbc	r11, r19
    150a:	c4 0a       	sbc	r12, r20
    150c:	d5 0a       	sbc	r13, r21
    150e:	c6 01       	movw	r24, r12
    1510:	b5 01       	movw	r22, r10
    1512:	a4 01       	movw	r20, r8
    1514:	93 01       	movw	r18, r6
    1516:	0e 94 48 3a 	call	0x7490	; 0x7490 <__udivmodsi4>
    151a:	7b 01       	movw	r14, r22
    151c:	8c 01       	movw	r16, r24
    151e:	c6 01       	movw	r24, r12
    1520:	b5 01       	movw	r22, r10
    1522:	a4 01       	movw	r20, r8
    1524:	93 01       	movw	r18, r6
    1526:	0e 94 48 3a 	call	0x7490	; 0x7490 <__udivmodsi4>
    152a:	ca 01       	movw	r24, r20
    152c:	b9 01       	movw	r22, r18
    152e:	21 96       	adiw	r28, 0x01	; 1
    1530:	2c ad       	ldd	r18, Y+60	; 0x3c
    1532:	3d ad       	ldd	r19, Y+61	; 0x3d
    1534:	4e ad       	ldd	r20, Y+62	; 0x3e
    1536:	5f ad       	ldd	r21, Y+63	; 0x3f
    1538:	21 97       	sbiw	r28, 0x01	; 1
    153a:	ba c1       	rjmp	.+884    	; 0x18b0 <__umoddi3+0x630>
    153c:	21 14       	cp	r2, r1
    153e:	31 04       	cpc	r3, r1
    1540:	41 04       	cpc	r4, r1
    1542:	51 04       	cpc	r5, r1
    1544:	71 f4       	brne	.+28     	; 0x1562 <__umoddi3+0x2e2>
    1546:	61 e0       	ldi	r22, 0x01	; 1
    1548:	70 e0       	ldi	r23, 0x00	; 0
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	40 e0       	ldi	r20, 0x00	; 0
    1554:	50 e0       	ldi	r21, 0x00	; 0
    1556:	0e 94 48 3a 	call	0x7490	; 0x7490 <__udivmodsi4>
    155a:	c9 01       	movw	r24, r18
    155c:	da 01       	movw	r26, r20
    155e:	1c 01       	movw	r2, r24
    1560:	2d 01       	movw	r4, r26
    1562:	00 e0       	ldi	r16, 0x00	; 0
    1564:	20 16       	cp	r2, r16
    1566:	00 e0       	ldi	r16, 0x00	; 0
    1568:	30 06       	cpc	r3, r16
    156a:	01 e0       	ldi	r16, 0x01	; 1
    156c:	40 06       	cpc	r4, r16
    156e:	00 e0       	ldi	r16, 0x00	; 0
    1570:	50 06       	cpc	r5, r16
    1572:	88 f4       	brcc	.+34     	; 0x1596 <__umoddi3+0x316>
    1574:	1f ef       	ldi	r17, 0xFF	; 255
    1576:	21 16       	cp	r2, r17
    1578:	31 04       	cpc	r3, r1
    157a:	41 04       	cpc	r4, r1
    157c:	51 04       	cpc	r5, r1
    157e:	39 f0       	breq	.+14     	; 0x158e <__umoddi3+0x30e>
    1580:	30 f0       	brcs	.+12     	; 0x158e <__umoddi3+0x30e>
    1582:	68 e0       	ldi	r22, 0x08	; 8
    1584:	e6 2e       	mov	r14, r22
    1586:	f1 2c       	mov	r15, r1
    1588:	01 2d       	mov	r16, r1
    158a:	11 2d       	mov	r17, r1
    158c:	18 c0       	rjmp	.+48     	; 0x15be <__umoddi3+0x33e>
    158e:	ee 24       	eor	r14, r14
    1590:	ff 24       	eor	r15, r15
    1592:	87 01       	movw	r16, r14
    1594:	14 c0       	rjmp	.+40     	; 0x15be <__umoddi3+0x33e>
    1596:	40 e0       	ldi	r20, 0x00	; 0
    1598:	24 16       	cp	r2, r20
    159a:	40 e0       	ldi	r20, 0x00	; 0
    159c:	34 06       	cpc	r3, r20
    159e:	40 e0       	ldi	r20, 0x00	; 0
    15a0:	44 06       	cpc	r4, r20
    15a2:	41 e0       	ldi	r20, 0x01	; 1
    15a4:	54 06       	cpc	r5, r20
    15a6:	30 f0       	brcs	.+12     	; 0x15b4 <__umoddi3+0x334>
    15a8:	58 e1       	ldi	r21, 0x18	; 24
    15aa:	e5 2e       	mov	r14, r21
    15ac:	f1 2c       	mov	r15, r1
    15ae:	01 2d       	mov	r16, r1
    15b0:	11 2d       	mov	r17, r1
    15b2:	05 c0       	rjmp	.+10     	; 0x15be <__umoddi3+0x33e>
    15b4:	40 e1       	ldi	r20, 0x10	; 16
    15b6:	e4 2e       	mov	r14, r20
    15b8:	f1 2c       	mov	r15, r1
    15ba:	01 2d       	mov	r16, r1
    15bc:	11 2d       	mov	r17, r1
    15be:	d2 01       	movw	r26, r4
    15c0:	c1 01       	movw	r24, r2
    15c2:	0e 2c       	mov	r0, r14
    15c4:	04 c0       	rjmp	.+8      	; 0x15ce <__umoddi3+0x34e>
    15c6:	b6 95       	lsr	r27
    15c8:	a7 95       	ror	r26
    15ca:	97 95       	ror	r25
    15cc:	87 95       	ror	r24
    15ce:	0a 94       	dec	r0
    15d0:	d2 f7       	brpl	.-12     	; 0x15c6 <__umoddi3+0x346>
    15d2:	82 50       	subi	r24, 0x02	; 2
    15d4:	9f 4f       	sbci	r25, 0xFF	; 255
    15d6:	dc 01       	movw	r26, r24
    15d8:	2c 91       	ld	r18, X
    15da:	30 e2       	ldi	r19, 0x20	; 32
    15dc:	a3 2e       	mov	r10, r19
    15de:	b1 2c       	mov	r11, r1
    15e0:	c1 2c       	mov	r12, r1
    15e2:	d1 2c       	mov	r13, r1
    15e4:	d6 01       	movw	r26, r12
    15e6:	c5 01       	movw	r24, r10
    15e8:	8e 19       	sub	r24, r14
    15ea:	9f 09       	sbc	r25, r15
    15ec:	a0 0b       	sbc	r26, r16
    15ee:	b1 0b       	sbc	r27, r17
    15f0:	7c 01       	movw	r14, r24
    15f2:	8d 01       	movw	r16, r26
    15f4:	e2 1a       	sub	r14, r18
    15f6:	f1 08       	sbc	r15, r1
    15f8:	01 09       	sbc	r16, r1
    15fa:	11 09       	sbc	r17, r1
    15fc:	e9 ae       	std	Y+57, r14	; 0x39
    15fe:	fa ae       	std	Y+58, r15	; 0x3a
    1600:	0b af       	std	Y+59, r16	; 0x3b
    1602:	1c af       	std	Y+60, r17	; 0x3c
    1604:	e1 14       	cp	r14, r1
    1606:	f1 04       	cpc	r15, r1
    1608:	01 05       	cpc	r16, r1
    160a:	11 05       	cpc	r17, r1
    160c:	39 f4       	brne	.+14     	; 0x161c <__umoddi3+0x39c>
    160e:	64 01       	movw	r12, r8
    1610:	53 01       	movw	r10, r6
    1612:	a2 18       	sub	r10, r2
    1614:	b3 08       	sbc	r11, r3
    1616:	c4 08       	sbc	r12, r4
    1618:	d5 08       	sbc	r13, r5
    161a:	e2 c0       	rjmp	.+452    	; 0x17e0 <__umoddi3+0x560>
    161c:	f9 ac       	ldd	r15, Y+57	; 0x39
    161e:	68 96       	adiw	r28, 0x18	; 24
    1620:	ff ae       	std	Y+63, r15	; 0x3f
    1622:	68 97       	sbiw	r28, 0x18	; 24
    1624:	0f 2c       	mov	r0, r15
    1626:	04 c0       	rjmp	.+8      	; 0x1630 <__umoddi3+0x3b0>
    1628:	22 0c       	add	r2, r2
    162a:	33 1c       	adc	r3, r3
    162c:	44 1c       	adc	r4, r4
    162e:	55 1c       	adc	r5, r5
    1630:	0a 94       	dec	r0
    1632:	d2 f7       	brpl	.-12     	; 0x1628 <__umoddi3+0x3a8>
    1634:	8a 2d       	mov	r24, r10
    1636:	8f 19       	sub	r24, r15
    1638:	64 01       	movw	r12, r8
    163a:	53 01       	movw	r10, r6
    163c:	08 2e       	mov	r0, r24
    163e:	04 c0       	rjmp	.+8      	; 0x1648 <__umoddi3+0x3c8>
    1640:	d6 94       	lsr	r13
    1642:	c7 94       	ror	r12
    1644:	b7 94       	ror	r11
    1646:	a7 94       	ror	r10
    1648:	0a 94       	dec	r0
    164a:	d2 f7       	brpl	.-12     	; 0x1640 <__umoddi3+0x3c0>
    164c:	a4 01       	movw	r20, r8
    164e:	93 01       	movw	r18, r6
    1650:	04 c0       	rjmp	.+8      	; 0x165a <__umoddi3+0x3da>
    1652:	22 0f       	add	r18, r18
    1654:	33 1f       	adc	r19, r19
    1656:	44 1f       	adc	r20, r20
    1658:	55 1f       	adc	r21, r21
    165a:	fa 94       	dec	r15
    165c:	d2 f7       	brpl	.-12     	; 0x1652 <__umoddi3+0x3d2>
    165e:	6c 96       	adiw	r28, 0x1c	; 28
    1660:	6c ac       	ldd	r6, Y+60	; 0x3c
    1662:	7d ac       	ldd	r7, Y+61	; 0x3d
    1664:	8e ac       	ldd	r8, Y+62	; 0x3e
    1666:	9f ac       	ldd	r9, Y+63	; 0x3f
    1668:	6c 97       	sbiw	r28, 0x1c	; 28
    166a:	04 c0       	rjmp	.+8      	; 0x1674 <__umoddi3+0x3f4>
    166c:	96 94       	lsr	r9
    166e:	87 94       	ror	r8
    1670:	77 94       	ror	r7
    1672:	67 94       	ror	r6
    1674:	8a 95       	dec	r24
    1676:	d2 f7       	brpl	.-12     	; 0x166c <__umoddi3+0x3ec>
    1678:	84 01       	movw	r16, r8
    167a:	73 01       	movw	r14, r6
    167c:	e2 2a       	or	r14, r18
    167e:	f3 2a       	or	r15, r19
    1680:	04 2b       	or	r16, r20
    1682:	15 2b       	or	r17, r21
    1684:	ed a6       	std	Y+45, r14	; 0x2d
    1686:	fe a6       	std	Y+46, r15	; 0x2e
    1688:	0f a7       	std	Y+47, r16	; 0x2f
    168a:	18 ab       	std	Y+48, r17	; 0x30
    168c:	32 01       	movw	r6, r4
    168e:	88 24       	eor	r8, r8
    1690:	99 24       	eor	r9, r9
    1692:	b2 01       	movw	r22, r4
    1694:	a1 01       	movw	r20, r2
    1696:	60 70       	andi	r22, 0x00	; 0
    1698:	70 70       	andi	r23, 0x00	; 0
    169a:	25 96       	adiw	r28, 0x05	; 5
    169c:	4c af       	std	Y+60, r20	; 0x3c
    169e:	5d af       	std	Y+61, r21	; 0x3d
    16a0:	6e af       	std	Y+62, r22	; 0x3e
    16a2:	7f af       	std	Y+63, r23	; 0x3f
    16a4:	25 97       	sbiw	r28, 0x05	; 5
    16a6:	c6 01       	movw	r24, r12
    16a8:	b5 01       	movw	r22, r10
    16aa:	a4 01       	movw	r20, r8
    16ac:	93 01       	movw	r18, r6
    16ae:	0e 94 48 3a 	call	0x7490	; 0x7490 <__udivmodsi4>
    16b2:	7b 01       	movw	r14, r22
    16b4:	8c 01       	movw	r16, r24
    16b6:	c6 01       	movw	r24, r12
    16b8:	b5 01       	movw	r22, r10
    16ba:	a4 01       	movw	r20, r8
    16bc:	93 01       	movw	r18, r6
    16be:	0e 94 48 3a 	call	0x7490	; 0x7490 <__udivmodsi4>
    16c2:	ca 01       	movw	r24, r20
    16c4:	b9 01       	movw	r22, r18
    16c6:	25 96       	adiw	r28, 0x05	; 5
    16c8:	2c ad       	ldd	r18, Y+60	; 0x3c
    16ca:	3d ad       	ldd	r19, Y+61	; 0x3d
    16cc:	4e ad       	ldd	r20, Y+62	; 0x3e
    16ce:	5f ad       	ldd	r21, Y+63	; 0x3f
    16d0:	25 97       	sbiw	r28, 0x05	; 5
    16d2:	0e 94 fa 39 	call	0x73f4	; 0x73f4 <__mulsi3>
    16d6:	9b 01       	movw	r18, r22
    16d8:	ac 01       	movw	r20, r24
    16da:	87 01       	movw	r16, r14
    16dc:	ff 24       	eor	r15, r15
    16de:	ee 24       	eor	r14, r14
    16e0:	ad a4       	ldd	r10, Y+45	; 0x2d
    16e2:	be a4       	ldd	r11, Y+46	; 0x2e
    16e4:	cf a4       	ldd	r12, Y+47	; 0x2f
    16e6:	d8 a8       	ldd	r13, Y+48	; 0x30
    16e8:	c6 01       	movw	r24, r12
    16ea:	aa 27       	eor	r26, r26
    16ec:	bb 27       	eor	r27, r27
    16ee:	5c 01       	movw	r10, r24
    16f0:	6d 01       	movw	r12, r26
    16f2:	ae 28       	or	r10, r14
    16f4:	bf 28       	or	r11, r15
    16f6:	c0 2a       	or	r12, r16
    16f8:	d1 2a       	or	r13, r17
    16fa:	a2 16       	cp	r10, r18
    16fc:	b3 06       	cpc	r11, r19
    16fe:	c4 06       	cpc	r12, r20
    1700:	d5 06       	cpc	r13, r21
    1702:	90 f4       	brcc	.+36     	; 0x1728 <__umoddi3+0x4a8>
    1704:	a2 0c       	add	r10, r2
    1706:	b3 1c       	adc	r11, r3
    1708:	c4 1c       	adc	r12, r4
    170a:	d5 1c       	adc	r13, r5
    170c:	a2 14       	cp	r10, r2
    170e:	b3 04       	cpc	r11, r3
    1710:	c4 04       	cpc	r12, r4
    1712:	d5 04       	cpc	r13, r5
    1714:	48 f0       	brcs	.+18     	; 0x1728 <__umoddi3+0x4a8>
    1716:	a2 16       	cp	r10, r18
    1718:	b3 06       	cpc	r11, r19
    171a:	c4 06       	cpc	r12, r20
    171c:	d5 06       	cpc	r13, r21
    171e:	20 f4       	brcc	.+8      	; 0x1728 <__umoddi3+0x4a8>
    1720:	a2 0c       	add	r10, r2
    1722:	b3 1c       	adc	r11, r3
    1724:	c4 1c       	adc	r12, r4
    1726:	d5 1c       	adc	r13, r5
    1728:	a2 1a       	sub	r10, r18
    172a:	b3 0a       	sbc	r11, r19
    172c:	c4 0a       	sbc	r12, r20
    172e:	d5 0a       	sbc	r13, r21
    1730:	c6 01       	movw	r24, r12
    1732:	b5 01       	movw	r22, r10
    1734:	a4 01       	movw	r20, r8
    1736:	93 01       	movw	r18, r6
    1738:	0e 94 48 3a 	call	0x7490	; 0x7490 <__udivmodsi4>
    173c:	7b 01       	movw	r14, r22
    173e:	8c 01       	movw	r16, r24
    1740:	c6 01       	movw	r24, r12
    1742:	b5 01       	movw	r22, r10
    1744:	a4 01       	movw	r20, r8
    1746:	93 01       	movw	r18, r6
    1748:	0e 94 48 3a 	call	0x7490	; 0x7490 <__udivmodsi4>
    174c:	ca 01       	movw	r24, r20
    174e:	b9 01       	movw	r22, r18
    1750:	25 96       	adiw	r28, 0x05	; 5
    1752:	2c ad       	ldd	r18, Y+60	; 0x3c
    1754:	3d ad       	ldd	r19, Y+61	; 0x3d
    1756:	4e ad       	ldd	r20, Y+62	; 0x3e
    1758:	5f ad       	ldd	r21, Y+63	; 0x3f
    175a:	25 97       	sbiw	r28, 0x05	; 5
    175c:	0e 94 fa 39 	call	0x73f4	; 0x73f4 <__mulsi3>
    1760:	9b 01       	movw	r18, r22
    1762:	ac 01       	movw	r20, r24
    1764:	87 01       	movw	r16, r14
    1766:	ff 24       	eor	r15, r15
    1768:	ee 24       	eor	r14, r14
    176a:	8d a5       	ldd	r24, Y+45	; 0x2d
    176c:	9e a5       	ldd	r25, Y+46	; 0x2e
    176e:	af a5       	ldd	r26, Y+47	; 0x2f
    1770:	b8 a9       	ldd	r27, Y+48	; 0x30
    1772:	a0 70       	andi	r26, 0x00	; 0
    1774:	b0 70       	andi	r27, 0x00	; 0
    1776:	57 01       	movw	r10, r14
    1778:	68 01       	movw	r12, r16
    177a:	a8 2a       	or	r10, r24
    177c:	b9 2a       	or	r11, r25
    177e:	ca 2a       	or	r12, r26
    1780:	db 2a       	or	r13, r27
    1782:	a2 16       	cp	r10, r18
    1784:	b3 06       	cpc	r11, r19
    1786:	c4 06       	cpc	r12, r20
    1788:	d5 06       	cpc	r13, r21
    178a:	90 f4       	brcc	.+36     	; 0x17b0 <__umoddi3+0x530>
    178c:	a2 0c       	add	r10, r2
    178e:	b3 1c       	adc	r11, r3
    1790:	c4 1c       	adc	r12, r4
    1792:	d5 1c       	adc	r13, r5
    1794:	a2 14       	cp	r10, r2
    1796:	b3 04       	cpc	r11, r3
    1798:	c4 04       	cpc	r12, r4
    179a:	d5 04       	cpc	r13, r5
    179c:	48 f0       	brcs	.+18     	; 0x17b0 <__umoddi3+0x530>
    179e:	a2 16       	cp	r10, r18
    17a0:	b3 06       	cpc	r11, r19
    17a2:	c4 06       	cpc	r12, r20
    17a4:	d5 06       	cpc	r13, r21
    17a6:	20 f4       	brcc	.+8      	; 0x17b0 <__umoddi3+0x530>
    17a8:	a2 0c       	add	r10, r2
    17aa:	b3 1c       	adc	r11, r3
    17ac:	c4 1c       	adc	r12, r4
    17ae:	d5 1c       	adc	r13, r5
    17b0:	6c 96       	adiw	r28, 0x1c	; 28
    17b2:	ec ac       	ldd	r14, Y+60	; 0x3c
    17b4:	fd ac       	ldd	r15, Y+61	; 0x3d
    17b6:	0e ad       	ldd	r16, Y+62	; 0x3e
    17b8:	1f ad       	ldd	r17, Y+63	; 0x3f
    17ba:	6c 97       	sbiw	r28, 0x1c	; 28
    17bc:	68 96       	adiw	r28, 0x18	; 24
    17be:	0f ac       	ldd	r0, Y+63	; 0x3f
    17c0:	68 97       	sbiw	r28, 0x18	; 24
    17c2:	04 c0       	rjmp	.+8      	; 0x17cc <__umoddi3+0x54c>
    17c4:	ee 0c       	add	r14, r14
    17c6:	ff 1c       	adc	r15, r15
    17c8:	00 1f       	adc	r16, r16
    17ca:	11 1f       	adc	r17, r17
    17cc:	0a 94       	dec	r0
    17ce:	d2 f7       	brpl	.-12     	; 0x17c4 <__umoddi3+0x544>
    17d0:	e9 aa       	std	Y+49, r14	; 0x31
    17d2:	fa aa       	std	Y+50, r15	; 0x32
    17d4:	0b ab       	std	Y+51, r16	; 0x33
    17d6:	1c ab       	std	Y+52, r17	; 0x34
    17d8:	a2 1a       	sub	r10, r18
    17da:	b3 0a       	sbc	r11, r19
    17dc:	c4 0a       	sbc	r12, r20
    17de:	d5 0a       	sbc	r13, r21
    17e0:	32 01       	movw	r6, r4
    17e2:	88 24       	eor	r8, r8
    17e4:	99 24       	eor	r9, r9
    17e6:	b2 01       	movw	r22, r4
    17e8:	a1 01       	movw	r20, r2
    17ea:	60 70       	andi	r22, 0x00	; 0
    17ec:	70 70       	andi	r23, 0x00	; 0
    17ee:	29 96       	adiw	r28, 0x09	; 9
    17f0:	4c af       	std	Y+60, r20	; 0x3c
    17f2:	5d af       	std	Y+61, r21	; 0x3d
    17f4:	6e af       	std	Y+62, r22	; 0x3e
    17f6:	7f af       	std	Y+63, r23	; 0x3f
    17f8:	29 97       	sbiw	r28, 0x09	; 9
    17fa:	c6 01       	movw	r24, r12
    17fc:	b5 01       	movw	r22, r10
    17fe:	a4 01       	movw	r20, r8
    1800:	93 01       	movw	r18, r6
    1802:	0e 94 48 3a 	call	0x7490	; 0x7490 <__udivmodsi4>
    1806:	7b 01       	movw	r14, r22
    1808:	8c 01       	movw	r16, r24
    180a:	c6 01       	movw	r24, r12
    180c:	b5 01       	movw	r22, r10
    180e:	a4 01       	movw	r20, r8
    1810:	93 01       	movw	r18, r6
    1812:	0e 94 48 3a 	call	0x7490	; 0x7490 <__udivmodsi4>
    1816:	ca 01       	movw	r24, r20
    1818:	b9 01       	movw	r22, r18
    181a:	29 96       	adiw	r28, 0x09	; 9
    181c:	2c ad       	ldd	r18, Y+60	; 0x3c
    181e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1820:	4e ad       	ldd	r20, Y+62	; 0x3e
    1822:	5f ad       	ldd	r21, Y+63	; 0x3f
    1824:	29 97       	sbiw	r28, 0x09	; 9
    1826:	0e 94 fa 39 	call	0x73f4	; 0x73f4 <__mulsi3>
    182a:	9b 01       	movw	r18, r22
    182c:	ac 01       	movw	r20, r24
    182e:	87 01       	movw	r16, r14
    1830:	ff 24       	eor	r15, r15
    1832:	ee 24       	eor	r14, r14
    1834:	a9 a8       	ldd	r10, Y+49	; 0x31
    1836:	ba a8       	ldd	r11, Y+50	; 0x32
    1838:	cb a8       	ldd	r12, Y+51	; 0x33
    183a:	dc a8       	ldd	r13, Y+52	; 0x34
    183c:	c6 01       	movw	r24, r12
    183e:	aa 27       	eor	r26, r26
    1840:	bb 27       	eor	r27, r27
    1842:	57 01       	movw	r10, r14
    1844:	68 01       	movw	r12, r16
    1846:	a8 2a       	or	r10, r24
    1848:	b9 2a       	or	r11, r25
    184a:	ca 2a       	or	r12, r26
    184c:	db 2a       	or	r13, r27
    184e:	a2 16       	cp	r10, r18
    1850:	b3 06       	cpc	r11, r19
    1852:	c4 06       	cpc	r12, r20
    1854:	d5 06       	cpc	r13, r21
    1856:	90 f4       	brcc	.+36     	; 0x187c <__umoddi3+0x5fc>
    1858:	a2 0c       	add	r10, r2
    185a:	b3 1c       	adc	r11, r3
    185c:	c4 1c       	adc	r12, r4
    185e:	d5 1c       	adc	r13, r5
    1860:	a2 14       	cp	r10, r2
    1862:	b3 04       	cpc	r11, r3
    1864:	c4 04       	cpc	r12, r4
    1866:	d5 04       	cpc	r13, r5
    1868:	48 f0       	brcs	.+18     	; 0x187c <__umoddi3+0x5fc>
    186a:	a2 16       	cp	r10, r18
    186c:	b3 06       	cpc	r11, r19
    186e:	c4 06       	cpc	r12, r20
    1870:	d5 06       	cpc	r13, r21
    1872:	20 f4       	brcc	.+8      	; 0x187c <__umoddi3+0x5fc>
    1874:	a2 0c       	add	r10, r2
    1876:	b3 1c       	adc	r11, r3
    1878:	c4 1c       	adc	r12, r4
    187a:	d5 1c       	adc	r13, r5
    187c:	a2 1a       	sub	r10, r18
    187e:	b3 0a       	sbc	r11, r19
    1880:	c4 0a       	sbc	r12, r20
    1882:	d5 0a       	sbc	r13, r21
    1884:	c6 01       	movw	r24, r12
    1886:	b5 01       	movw	r22, r10
    1888:	a4 01       	movw	r20, r8
    188a:	93 01       	movw	r18, r6
    188c:	0e 94 48 3a 	call	0x7490	; 0x7490 <__udivmodsi4>
    1890:	7b 01       	movw	r14, r22
    1892:	8c 01       	movw	r16, r24
    1894:	c6 01       	movw	r24, r12
    1896:	b5 01       	movw	r22, r10
    1898:	a4 01       	movw	r20, r8
    189a:	93 01       	movw	r18, r6
    189c:	0e 94 48 3a 	call	0x7490	; 0x7490 <__udivmodsi4>
    18a0:	ca 01       	movw	r24, r20
    18a2:	b9 01       	movw	r22, r18
    18a4:	29 96       	adiw	r28, 0x09	; 9
    18a6:	2c ad       	ldd	r18, Y+60	; 0x3c
    18a8:	3d ad       	ldd	r19, Y+61	; 0x3d
    18aa:	4e ad       	ldd	r20, Y+62	; 0x3e
    18ac:	5f ad       	ldd	r21, Y+63	; 0x3f
    18ae:	29 97       	sbiw	r28, 0x09	; 9
    18b0:	0e 94 fa 39 	call	0x73f4	; 0x73f4 <__mulsi3>
    18b4:	9b 01       	movw	r18, r22
    18b6:	ac 01       	movw	r20, r24
    18b8:	87 01       	movw	r16, r14
    18ba:	ff 24       	eor	r15, r15
    18bc:	ee 24       	eor	r14, r14
    18be:	89 a9       	ldd	r24, Y+49	; 0x31
    18c0:	9a a9       	ldd	r25, Y+50	; 0x32
    18c2:	ab a9       	ldd	r26, Y+51	; 0x33
    18c4:	bc a9       	ldd	r27, Y+52	; 0x34
    18c6:	a0 70       	andi	r26, 0x00	; 0
    18c8:	b0 70       	andi	r27, 0x00	; 0
    18ca:	e8 2a       	or	r14, r24
    18cc:	f9 2a       	or	r15, r25
    18ce:	0a 2b       	or	r16, r26
    18d0:	1b 2b       	or	r17, r27
    18d2:	e2 16       	cp	r14, r18
    18d4:	f3 06       	cpc	r15, r19
    18d6:	04 07       	cpc	r16, r20
    18d8:	15 07       	cpc	r17, r21
    18da:	90 f4       	brcc	.+36     	; 0x1900 <__umoddi3+0x680>
    18dc:	e2 0c       	add	r14, r2
    18de:	f3 1c       	adc	r15, r3
    18e0:	04 1d       	adc	r16, r4
    18e2:	15 1d       	adc	r17, r5
    18e4:	e2 14       	cp	r14, r2
    18e6:	f3 04       	cpc	r15, r3
    18e8:	04 05       	cpc	r16, r4
    18ea:	15 05       	cpc	r17, r5
    18ec:	48 f0       	brcs	.+18     	; 0x1900 <__umoddi3+0x680>
    18ee:	e2 16       	cp	r14, r18
    18f0:	f3 06       	cpc	r15, r19
    18f2:	04 07       	cpc	r16, r20
    18f4:	15 07       	cpc	r17, r21
    18f6:	20 f4       	brcc	.+8      	; 0x1900 <__umoddi3+0x680>
    18f8:	e2 0c       	add	r14, r2
    18fa:	f3 1c       	adc	r15, r3
    18fc:	04 1d       	adc	r16, r4
    18fe:	15 1d       	adc	r17, r5
    1900:	e2 1a       	sub	r14, r18
    1902:	f3 0a       	sbc	r15, r19
    1904:	04 0b       	sbc	r16, r20
    1906:	15 0b       	sbc	r17, r21
    1908:	d8 01       	movw	r26, r16
    190a:	c7 01       	movw	r24, r14
    190c:	09 ac       	ldd	r0, Y+57	; 0x39
    190e:	04 c0       	rjmp	.+8      	; 0x1918 <__umoddi3+0x698>
    1910:	b6 95       	lsr	r27
    1912:	a7 95       	ror	r26
    1914:	97 95       	ror	r25
    1916:	87 95       	ror	r24
    1918:	0a 94       	dec	r0
    191a:	d2 f7       	brpl	.-12     	; 0x1910 <__umoddi3+0x690>
    191c:	89 8b       	std	Y+17, r24	; 0x11
    191e:	9a 8b       	std	Y+18, r25	; 0x12
    1920:	ab 8b       	std	Y+19, r26	; 0x13
    1922:	bc 8b       	std	Y+20, r27	; 0x14
    1924:	1d 8a       	std	Y+21, r1	; 0x15
    1926:	1e 8a       	std	Y+22, r1	; 0x16
    1928:	1f 8a       	std	Y+23, r1	; 0x17
    192a:	18 8e       	std	Y+24, r1	; 0x18
    192c:	28 2f       	mov	r18, r24
    192e:	3a 89       	ldd	r19, Y+18	; 0x12
    1930:	4b 89       	ldd	r20, Y+19	; 0x13
    1932:	5c 89       	ldd	r21, Y+20	; 0x14
    1934:	6d 89       	ldd	r22, Y+21	; 0x15
    1936:	0c c3       	rjmp	.+1560   	; 0x1f50 <__umoddi3+0xcd0>
    1938:	6a 14       	cp	r6, r10
    193a:	7b 04       	cpc	r7, r11
    193c:	8c 04       	cpc	r8, r12
    193e:	9d 04       	cpc	r9, r13
    1940:	08 f4       	brcc	.+2      	; 0x1944 <__umoddi3+0x6c4>
    1942:	09 c3       	rjmp	.+1554   	; 0x1f56 <__umoddi3+0xcd6>
    1944:	00 e0       	ldi	r16, 0x00	; 0
    1946:	a0 16       	cp	r10, r16
    1948:	00 e0       	ldi	r16, 0x00	; 0
    194a:	b0 06       	cpc	r11, r16
    194c:	01 e0       	ldi	r16, 0x01	; 1
    194e:	c0 06       	cpc	r12, r16
    1950:	00 e0       	ldi	r16, 0x00	; 0
    1952:	d0 06       	cpc	r13, r16
    1954:	88 f4       	brcc	.+34     	; 0x1978 <__umoddi3+0x6f8>
    1956:	1f ef       	ldi	r17, 0xFF	; 255
    1958:	a1 16       	cp	r10, r17
    195a:	b1 04       	cpc	r11, r1
    195c:	c1 04       	cpc	r12, r1
    195e:	d1 04       	cpc	r13, r1
    1960:	39 f0       	breq	.+14     	; 0x1970 <__umoddi3+0x6f0>
    1962:	30 f0       	brcs	.+12     	; 0x1970 <__umoddi3+0x6f0>
    1964:	28 e0       	ldi	r18, 0x08	; 8
    1966:	e2 2e       	mov	r14, r18
    1968:	f1 2c       	mov	r15, r1
    196a:	01 2d       	mov	r16, r1
    196c:	11 2d       	mov	r17, r1
    196e:	18 c0       	rjmp	.+48     	; 0x19a0 <__umoddi3+0x720>
    1970:	ee 24       	eor	r14, r14
    1972:	ff 24       	eor	r15, r15
    1974:	87 01       	movw	r16, r14
    1976:	14 c0       	rjmp	.+40     	; 0x19a0 <__umoddi3+0x720>
    1978:	40 e0       	ldi	r20, 0x00	; 0
    197a:	a4 16       	cp	r10, r20
    197c:	40 e0       	ldi	r20, 0x00	; 0
    197e:	b4 06       	cpc	r11, r20
    1980:	40 e0       	ldi	r20, 0x00	; 0
    1982:	c4 06       	cpc	r12, r20
    1984:	41 e0       	ldi	r20, 0x01	; 1
    1986:	d4 06       	cpc	r13, r20
    1988:	30 f0       	brcs	.+12     	; 0x1996 <__umoddi3+0x716>
    198a:	98 e1       	ldi	r25, 0x18	; 24
    198c:	e9 2e       	mov	r14, r25
    198e:	f1 2c       	mov	r15, r1
    1990:	01 2d       	mov	r16, r1
    1992:	11 2d       	mov	r17, r1
    1994:	05 c0       	rjmp	.+10     	; 0x19a0 <__umoddi3+0x720>
    1996:	80 e1       	ldi	r24, 0x10	; 16
    1998:	e8 2e       	mov	r14, r24
    199a:	f1 2c       	mov	r15, r1
    199c:	01 2d       	mov	r16, r1
    199e:	11 2d       	mov	r17, r1
    19a0:	d6 01       	movw	r26, r12
    19a2:	c5 01       	movw	r24, r10
    19a4:	0e 2c       	mov	r0, r14
    19a6:	04 c0       	rjmp	.+8      	; 0x19b0 <__umoddi3+0x730>
    19a8:	b6 95       	lsr	r27
    19aa:	a7 95       	ror	r26
    19ac:	97 95       	ror	r25
    19ae:	87 95       	ror	r24
    19b0:	0a 94       	dec	r0
    19b2:	d2 f7       	brpl	.-12     	; 0x19a8 <__umoddi3+0x728>
    19b4:	82 50       	subi	r24, 0x02	; 2
    19b6:	9f 4f       	sbci	r25, 0xFF	; 255
    19b8:	dc 01       	movw	r26, r24
    19ba:	2c 91       	ld	r18, X
    19bc:	80 e2       	ldi	r24, 0x20	; 32
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	a0 e0       	ldi	r26, 0x00	; 0
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	8e 19       	sub	r24, r14
    19c6:	9f 09       	sbc	r25, r15
    19c8:	a0 0b       	sbc	r26, r16
    19ca:	b1 0b       	sbc	r27, r17
    19cc:	82 1b       	sub	r24, r18
    19ce:	91 09       	sbc	r25, r1
    19d0:	a1 09       	sbc	r26, r1
    19d2:	b1 09       	sbc	r27, r1
    19d4:	00 97       	sbiw	r24, 0x00	; 0
    19d6:	a1 05       	cpc	r26, r1
    19d8:	b1 05       	cpc	r27, r1
    19da:	09 f0       	breq	.+2      	; 0x19de <__umoddi3+0x75e>
    19dc:	4f c0       	rjmp	.+158    	; 0x1a7c <__umoddi3+0x7fc>
    19de:	a6 14       	cp	r10, r6
    19e0:	b7 04       	cpc	r11, r7
    19e2:	c8 04       	cpc	r12, r8
    19e4:	d9 04       	cpc	r13, r9
    19e6:	58 f0       	brcs	.+22     	; 0x19fe <__umoddi3+0x77e>
    19e8:	6c 96       	adiw	r28, 0x1c	; 28
    19ea:	ec ac       	ldd	r14, Y+60	; 0x3c
    19ec:	fd ac       	ldd	r15, Y+61	; 0x3d
    19ee:	0e ad       	ldd	r16, Y+62	; 0x3e
    19f0:	1f ad       	ldd	r17, Y+63	; 0x3f
    19f2:	6c 97       	sbiw	r28, 0x1c	; 28
    19f4:	e2 14       	cp	r14, r2
    19f6:	f3 04       	cpc	r15, r3
    19f8:	04 05       	cpc	r16, r4
    19fa:	15 05       	cpc	r17, r5
    19fc:	68 f1       	brcs	.+90     	; 0x1a58 <__umoddi3+0x7d8>
    19fe:	6c 96       	adiw	r28, 0x1c	; 28
    1a00:	ec ac       	ldd	r14, Y+60	; 0x3c
    1a02:	fd ac       	ldd	r15, Y+61	; 0x3d
    1a04:	0e ad       	ldd	r16, Y+62	; 0x3e
    1a06:	1f ad       	ldd	r17, Y+63	; 0x3f
    1a08:	6c 97       	sbiw	r28, 0x1c	; 28
    1a0a:	e2 18       	sub	r14, r2
    1a0c:	f3 08       	sbc	r15, r3
    1a0e:	04 09       	sbc	r16, r4
    1a10:	15 09       	sbc	r17, r5
    1a12:	a4 01       	movw	r20, r8
    1a14:	93 01       	movw	r18, r6
    1a16:	2a 19       	sub	r18, r10
    1a18:	3b 09       	sbc	r19, r11
    1a1a:	4c 09       	sbc	r20, r12
    1a1c:	5d 09       	sbc	r21, r13
    1a1e:	aa 24       	eor	r10, r10
    1a20:	bb 24       	eor	r11, r11
    1a22:	65 01       	movw	r12, r10
    1a24:	6c 96       	adiw	r28, 0x1c	; 28
    1a26:	6c ad       	ldd	r22, Y+60	; 0x3c
    1a28:	7d ad       	ldd	r23, Y+61	; 0x3d
    1a2a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a2c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a2e:	6c 97       	sbiw	r28, 0x1c	; 28
    1a30:	6e 15       	cp	r22, r14
    1a32:	7f 05       	cpc	r23, r15
    1a34:	80 07       	cpc	r24, r16
    1a36:	91 07       	cpc	r25, r17
    1a38:	28 f4       	brcc	.+10     	; 0x1a44 <__umoddi3+0x7c4>
    1a3a:	b1 e0       	ldi	r27, 0x01	; 1
    1a3c:	ab 2e       	mov	r10, r27
    1a3e:	b1 2c       	mov	r11, r1
    1a40:	c1 2c       	mov	r12, r1
    1a42:	d1 2c       	mov	r13, r1
    1a44:	da 01       	movw	r26, r20
    1a46:	c9 01       	movw	r24, r18
    1a48:	8a 19       	sub	r24, r10
    1a4a:	9b 09       	sbc	r25, r11
    1a4c:	ac 09       	sbc	r26, r12
    1a4e:	bd 09       	sbc	r27, r13
    1a50:	8d ab       	std	Y+53, r24	; 0x35
    1a52:	9e ab       	std	Y+54, r25	; 0x36
    1a54:	af ab       	std	Y+55, r26	; 0x37
    1a56:	b8 af       	std	Y+56, r27	; 0x38
    1a58:	e9 8a       	std	Y+17, r14	; 0x11
    1a5a:	fa 8a       	std	Y+18, r15	; 0x12
    1a5c:	0b 8b       	std	Y+19, r16	; 0x13
    1a5e:	1c 8b       	std	Y+20, r17	; 0x14
    1a60:	6d a8       	ldd	r6, Y+53	; 0x35
    1a62:	7e a8       	ldd	r7, Y+54	; 0x36
    1a64:	8f a8       	ldd	r8, Y+55	; 0x37
    1a66:	98 ac       	ldd	r9, Y+56	; 0x38
    1a68:	6d 8a       	std	Y+21, r6	; 0x15
    1a6a:	7e 8a       	std	Y+22, r7	; 0x16
    1a6c:	8f 8a       	std	Y+23, r8	; 0x17
    1a6e:	98 8e       	std	Y+24, r9	; 0x18
    1a70:	2e 2d       	mov	r18, r14
    1a72:	3a 89       	ldd	r19, Y+18	; 0x12
    1a74:	4b 89       	ldd	r20, Y+19	; 0x13
    1a76:	5c 89       	ldd	r21, Y+20	; 0x14
    1a78:	6d a9       	ldd	r22, Y+53	; 0x35
    1a7a:	6a c2       	rjmp	.+1236   	; 0x1f50 <__umoddi3+0xcd0>
    1a7c:	67 96       	adiw	r28, 0x17	; 23
    1a7e:	8f af       	std	Y+63, r24	; 0x3f
    1a80:	67 97       	sbiw	r28, 0x17	; 23
    1a82:	a6 01       	movw	r20, r12
    1a84:	95 01       	movw	r18, r10
    1a86:	08 2e       	mov	r0, r24
    1a88:	04 c0       	rjmp	.+8      	; 0x1a92 <__umoddi3+0x812>
    1a8a:	22 0f       	add	r18, r18
    1a8c:	33 1f       	adc	r19, r19
    1a8e:	44 1f       	adc	r20, r20
    1a90:	55 1f       	adc	r21, r21
    1a92:	0a 94       	dec	r0
    1a94:	d2 f7       	brpl	.-12     	; 0x1a8a <__umoddi3+0x80a>
    1a96:	a0 e2       	ldi	r26, 0x20	; 32
    1a98:	aa 2e       	mov	r10, r26
    1a9a:	a8 1a       	sub	r10, r24
    1a9c:	66 96       	adiw	r28, 0x16	; 22
    1a9e:	af ae       	std	Y+63, r10	; 0x3f
    1aa0:	66 97       	sbiw	r28, 0x16	; 22
    1aa2:	d2 01       	movw	r26, r4
    1aa4:	c1 01       	movw	r24, r2
    1aa6:	04 c0       	rjmp	.+8      	; 0x1ab0 <__umoddi3+0x830>
    1aa8:	b6 95       	lsr	r27
    1aaa:	a7 95       	ror	r26
    1aac:	97 95       	ror	r25
    1aae:	87 95       	ror	r24
    1ab0:	aa 94       	dec	r10
    1ab2:	d2 f7       	brpl	.-12     	; 0x1aa8 <__umoddi3+0x828>
    1ab4:	6c 01       	movw	r12, r24
    1ab6:	7d 01       	movw	r14, r26
    1ab8:	c2 2a       	or	r12, r18
    1aba:	d3 2a       	or	r13, r19
    1abc:	e4 2a       	or	r14, r20
    1abe:	f5 2a       	or	r15, r21
    1ac0:	c9 a6       	std	Y+41, r12	; 0x29
    1ac2:	da a6       	std	Y+42, r13	; 0x2a
    1ac4:	eb a6       	std	Y+43, r14	; 0x2b
    1ac6:	fc a6       	std	Y+44, r15	; 0x2c
    1ac8:	82 01       	movw	r16, r4
    1aca:	71 01       	movw	r14, r2
    1acc:	67 96       	adiw	r28, 0x17	; 23
    1ace:	0f ac       	ldd	r0, Y+63	; 0x3f
    1ad0:	67 97       	sbiw	r28, 0x17	; 23
    1ad2:	04 c0       	rjmp	.+8      	; 0x1adc <__umoddi3+0x85c>
    1ad4:	ee 0c       	add	r14, r14
    1ad6:	ff 1c       	adc	r15, r15
    1ad8:	00 1f       	adc	r16, r16
    1ada:	11 1f       	adc	r17, r17
    1adc:	0a 94       	dec	r0
    1ade:	d2 f7       	brpl	.-12     	; 0x1ad4 <__umoddi3+0x854>
    1ae0:	ed a2       	std	Y+37, r14	; 0x25
    1ae2:	fe a2       	std	Y+38, r15	; 0x26
    1ae4:	0f a3       	std	Y+39, r16	; 0x27
    1ae6:	18 a7       	std	Y+40, r17	; 0x28
    1ae8:	64 01       	movw	r12, r8
    1aea:	53 01       	movw	r10, r6
    1aec:	66 96       	adiw	r28, 0x16	; 22
    1aee:	0f ac       	ldd	r0, Y+63	; 0x3f
    1af0:	66 97       	sbiw	r28, 0x16	; 22
    1af2:	04 c0       	rjmp	.+8      	; 0x1afc <__umoddi3+0x87c>
    1af4:	d6 94       	lsr	r13
    1af6:	c7 94       	ror	r12
    1af8:	b7 94       	ror	r11
    1afa:	a7 94       	ror	r10
    1afc:	0a 94       	dec	r0
    1afe:	d2 f7       	brpl	.-12     	; 0x1af4 <__umoddi3+0x874>
    1b00:	a4 01       	movw	r20, r8
    1b02:	93 01       	movw	r18, r6
    1b04:	67 96       	adiw	r28, 0x17	; 23
    1b06:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b08:	67 97       	sbiw	r28, 0x17	; 23
    1b0a:	04 c0       	rjmp	.+8      	; 0x1b14 <__umoddi3+0x894>
    1b0c:	22 0f       	add	r18, r18
    1b0e:	33 1f       	adc	r19, r19
    1b10:	44 1f       	adc	r20, r20
    1b12:	55 1f       	adc	r21, r21
    1b14:	0a 94       	dec	r0
    1b16:	d2 f7       	brpl	.-12     	; 0x1b0c <__umoddi3+0x88c>
    1b18:	6c 96       	adiw	r28, 0x1c	; 28
    1b1a:	8c ad       	ldd	r24, Y+60	; 0x3c
    1b1c:	9d ad       	ldd	r25, Y+61	; 0x3d
    1b1e:	ae ad       	ldd	r26, Y+62	; 0x3e
    1b20:	bf ad       	ldd	r27, Y+63	; 0x3f
    1b22:	6c 97       	sbiw	r28, 0x1c	; 28
    1b24:	66 96       	adiw	r28, 0x16	; 22
    1b26:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b28:	66 97       	sbiw	r28, 0x16	; 22
    1b2a:	04 c0       	rjmp	.+8      	; 0x1b34 <__umoddi3+0x8b4>
    1b2c:	b6 95       	lsr	r27
    1b2e:	a7 95       	ror	r26
    1b30:	97 95       	ror	r25
    1b32:	87 95       	ror	r24
    1b34:	0a 94       	dec	r0
    1b36:	d2 f7       	brpl	.-12     	; 0x1b2c <__umoddi3+0x8ac>
    1b38:	3c 01       	movw	r6, r24
    1b3a:	4d 01       	movw	r8, r26
    1b3c:	62 2a       	or	r6, r18
    1b3e:	73 2a       	or	r7, r19
    1b40:	84 2a       	or	r8, r20
    1b42:	95 2a       	or	r9, r21
    1b44:	69 a2       	std	Y+33, r6	; 0x21
    1b46:	7a a2       	std	Y+34, r7	; 0x22
    1b48:	8b a2       	std	Y+35, r8	; 0x23
    1b4a:	9c a2       	std	Y+36, r9	; 0x24
    1b4c:	6c 96       	adiw	r28, 0x1c	; 28
    1b4e:	ec ac       	ldd	r14, Y+60	; 0x3c
    1b50:	fd ac       	ldd	r15, Y+61	; 0x3d
    1b52:	0e ad       	ldd	r16, Y+62	; 0x3e
    1b54:	1f ad       	ldd	r17, Y+63	; 0x3f
    1b56:	6c 97       	sbiw	r28, 0x1c	; 28
    1b58:	67 96       	adiw	r28, 0x17	; 23
    1b5a:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b5c:	67 97       	sbiw	r28, 0x17	; 23
    1b5e:	04 c0       	rjmp	.+8      	; 0x1b68 <__umoddi3+0x8e8>
    1b60:	ee 0c       	add	r14, r14
    1b62:	ff 1c       	adc	r15, r15
    1b64:	00 1f       	adc	r16, r16
    1b66:	11 1f       	adc	r17, r17
    1b68:	0a 94       	dec	r0
    1b6a:	d2 f7       	brpl	.-12     	; 0x1b60 <__umoddi3+0x8e0>
    1b6c:	ed 8e       	std	Y+29, r14	; 0x1d
    1b6e:	fe 8e       	std	Y+30, r15	; 0x1e
    1b70:	0f 8f       	std	Y+31, r16	; 0x1f
    1b72:	18 a3       	std	Y+32, r17	; 0x20
    1b74:	49 a5       	ldd	r20, Y+41	; 0x29
    1b76:	5a a5       	ldd	r21, Y+42	; 0x2a
    1b78:	6b a5       	ldd	r22, Y+43	; 0x2b
    1b7a:	7c a5       	ldd	r23, Y+44	; 0x2c
    1b7c:	3b 01       	movw	r6, r22
    1b7e:	88 24       	eor	r8, r8
    1b80:	99 24       	eor	r9, r9
    1b82:	60 70       	andi	r22, 0x00	; 0
    1b84:	70 70       	andi	r23, 0x00	; 0
    1b86:	2d 96       	adiw	r28, 0x0d	; 13
    1b88:	4c af       	std	Y+60, r20	; 0x3c
    1b8a:	5d af       	std	Y+61, r21	; 0x3d
    1b8c:	6e af       	std	Y+62, r22	; 0x3e
    1b8e:	7f af       	std	Y+63, r23	; 0x3f
    1b90:	2d 97       	sbiw	r28, 0x0d	; 13
    1b92:	c6 01       	movw	r24, r12
    1b94:	b5 01       	movw	r22, r10
    1b96:	a4 01       	movw	r20, r8
    1b98:	93 01       	movw	r18, r6
    1b9a:	0e 94 48 3a 	call	0x7490	; 0x7490 <__udivmodsi4>
    1b9e:	7b 01       	movw	r14, r22
    1ba0:	8c 01       	movw	r16, r24
    1ba2:	c6 01       	movw	r24, r12
    1ba4:	b5 01       	movw	r22, r10
    1ba6:	a4 01       	movw	r20, r8
    1ba8:	93 01       	movw	r18, r6
    1baa:	0e 94 48 3a 	call	0x7490	; 0x7490 <__udivmodsi4>
    1bae:	c9 01       	movw	r24, r18
    1bb0:	da 01       	movw	r26, r20
    1bb2:	1c 01       	movw	r2, r24
    1bb4:	2d 01       	movw	r4, r26
    1bb6:	c2 01       	movw	r24, r4
    1bb8:	b1 01       	movw	r22, r2
    1bba:	2d 96       	adiw	r28, 0x0d	; 13
    1bbc:	2c ad       	ldd	r18, Y+60	; 0x3c
    1bbe:	3d ad       	ldd	r19, Y+61	; 0x3d
    1bc0:	4e ad       	ldd	r20, Y+62	; 0x3e
    1bc2:	5f ad       	ldd	r21, Y+63	; 0x3f
    1bc4:	2d 97       	sbiw	r28, 0x0d	; 13
    1bc6:	0e 94 fa 39 	call	0x73f4	; 0x73f4 <__mulsi3>
    1bca:	9b 01       	movw	r18, r22
    1bcc:	ac 01       	movw	r20, r24
    1bce:	87 01       	movw	r16, r14
    1bd0:	ff 24       	eor	r15, r15
    1bd2:	ee 24       	eor	r14, r14
    1bd4:	a9 a0       	ldd	r10, Y+33	; 0x21
    1bd6:	ba a0       	ldd	r11, Y+34	; 0x22
    1bd8:	cb a0       	ldd	r12, Y+35	; 0x23
    1bda:	dc a0       	ldd	r13, Y+36	; 0x24
    1bdc:	c6 01       	movw	r24, r12
    1bde:	aa 27       	eor	r26, r26
    1be0:	bb 27       	eor	r27, r27
    1be2:	57 01       	movw	r10, r14
    1be4:	68 01       	movw	r12, r16
    1be6:	a8 2a       	or	r10, r24
    1be8:	b9 2a       	or	r11, r25
    1bea:	ca 2a       	or	r12, r26
    1bec:	db 2a       	or	r13, r27
    1bee:	a2 16       	cp	r10, r18
    1bf0:	b3 06       	cpc	r11, r19
    1bf2:	c4 06       	cpc	r12, r20
    1bf4:	d5 06       	cpc	r13, r21
    1bf6:	00 f5       	brcc	.+64     	; 0x1c38 <__umoddi3+0x9b8>
    1bf8:	08 94       	sec
    1bfa:	21 08       	sbc	r2, r1
    1bfc:	31 08       	sbc	r3, r1
    1bfe:	41 08       	sbc	r4, r1
    1c00:	51 08       	sbc	r5, r1
    1c02:	e9 a4       	ldd	r14, Y+41	; 0x29
    1c04:	fa a4       	ldd	r15, Y+42	; 0x2a
    1c06:	0b a5       	ldd	r16, Y+43	; 0x2b
    1c08:	1c a5       	ldd	r17, Y+44	; 0x2c
    1c0a:	ae 0c       	add	r10, r14
    1c0c:	bf 1c       	adc	r11, r15
    1c0e:	c0 1e       	adc	r12, r16
    1c10:	d1 1e       	adc	r13, r17
    1c12:	ae 14       	cp	r10, r14
    1c14:	bf 04       	cpc	r11, r15
    1c16:	c0 06       	cpc	r12, r16
    1c18:	d1 06       	cpc	r13, r17
    1c1a:	70 f0       	brcs	.+28     	; 0x1c38 <__umoddi3+0x9b8>
    1c1c:	a2 16       	cp	r10, r18
    1c1e:	b3 06       	cpc	r11, r19
    1c20:	c4 06       	cpc	r12, r20
    1c22:	d5 06       	cpc	r13, r21
    1c24:	48 f4       	brcc	.+18     	; 0x1c38 <__umoddi3+0x9b8>
    1c26:	08 94       	sec
    1c28:	21 08       	sbc	r2, r1
    1c2a:	31 08       	sbc	r3, r1
    1c2c:	41 08       	sbc	r4, r1
    1c2e:	51 08       	sbc	r5, r1
    1c30:	ae 0c       	add	r10, r14
    1c32:	bf 1c       	adc	r11, r15
    1c34:	c0 1e       	adc	r12, r16
    1c36:	d1 1e       	adc	r13, r17
    1c38:	a2 1a       	sub	r10, r18
    1c3a:	b3 0a       	sbc	r11, r19
    1c3c:	c4 0a       	sbc	r12, r20
    1c3e:	d5 0a       	sbc	r13, r21
    1c40:	c6 01       	movw	r24, r12
    1c42:	b5 01       	movw	r22, r10
    1c44:	a4 01       	movw	r20, r8
    1c46:	93 01       	movw	r18, r6
    1c48:	0e 94 48 3a 	call	0x7490	; 0x7490 <__udivmodsi4>
    1c4c:	7b 01       	movw	r14, r22
    1c4e:	8c 01       	movw	r16, r24
    1c50:	c6 01       	movw	r24, r12
    1c52:	b5 01       	movw	r22, r10
    1c54:	a4 01       	movw	r20, r8
    1c56:	93 01       	movw	r18, r6
    1c58:	0e 94 48 3a 	call	0x7490	; 0x7490 <__udivmodsi4>
    1c5c:	c9 01       	movw	r24, r18
    1c5e:	da 01       	movw	r26, r20
    1c60:	3c 01       	movw	r6, r24
    1c62:	4d 01       	movw	r8, r26
    1c64:	c4 01       	movw	r24, r8
    1c66:	b3 01       	movw	r22, r6
    1c68:	2d 96       	adiw	r28, 0x0d	; 13
    1c6a:	2c ad       	ldd	r18, Y+60	; 0x3c
    1c6c:	3d ad       	ldd	r19, Y+61	; 0x3d
    1c6e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1c70:	5f ad       	ldd	r21, Y+63	; 0x3f
    1c72:	2d 97       	sbiw	r28, 0x0d	; 13
    1c74:	0e 94 fa 39 	call	0x73f4	; 0x73f4 <__mulsi3>
    1c78:	9b 01       	movw	r18, r22
    1c7a:	ac 01       	movw	r20, r24
    1c7c:	87 01       	movw	r16, r14
    1c7e:	ff 24       	eor	r15, r15
    1c80:	ee 24       	eor	r14, r14
    1c82:	89 a1       	ldd	r24, Y+33	; 0x21
    1c84:	9a a1       	ldd	r25, Y+34	; 0x22
    1c86:	ab a1       	ldd	r26, Y+35	; 0x23
    1c88:	bc a1       	ldd	r27, Y+36	; 0x24
    1c8a:	a0 70       	andi	r26, 0x00	; 0
    1c8c:	b0 70       	andi	r27, 0x00	; 0
    1c8e:	57 01       	movw	r10, r14
    1c90:	68 01       	movw	r12, r16
    1c92:	a8 2a       	or	r10, r24
    1c94:	b9 2a       	or	r11, r25
    1c96:	ca 2a       	or	r12, r26
    1c98:	db 2a       	or	r13, r27
    1c9a:	a2 16       	cp	r10, r18
    1c9c:	b3 06       	cpc	r11, r19
    1c9e:	c4 06       	cpc	r12, r20
    1ca0:	d5 06       	cpc	r13, r21
    1ca2:	00 f5       	brcc	.+64     	; 0x1ce4 <__umoddi3+0xa64>
    1ca4:	08 94       	sec
    1ca6:	61 08       	sbc	r6, r1
    1ca8:	71 08       	sbc	r7, r1
    1caa:	81 08       	sbc	r8, r1
    1cac:	91 08       	sbc	r9, r1
    1cae:	69 a5       	ldd	r22, Y+41	; 0x29
    1cb0:	7a a5       	ldd	r23, Y+42	; 0x2a
    1cb2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cb4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cb6:	a6 0e       	add	r10, r22
    1cb8:	b7 1e       	adc	r11, r23
    1cba:	c8 1e       	adc	r12, r24
    1cbc:	d9 1e       	adc	r13, r25
    1cbe:	a6 16       	cp	r10, r22
    1cc0:	b7 06       	cpc	r11, r23
    1cc2:	c8 06       	cpc	r12, r24
    1cc4:	d9 06       	cpc	r13, r25
    1cc6:	70 f0       	brcs	.+28     	; 0x1ce4 <__umoddi3+0xa64>
    1cc8:	a2 16       	cp	r10, r18
    1cca:	b3 06       	cpc	r11, r19
    1ccc:	c4 06       	cpc	r12, r20
    1cce:	d5 06       	cpc	r13, r21
    1cd0:	48 f4       	brcc	.+18     	; 0x1ce4 <__umoddi3+0xa64>
    1cd2:	08 94       	sec
    1cd4:	61 08       	sbc	r6, r1
    1cd6:	71 08       	sbc	r7, r1
    1cd8:	81 08       	sbc	r8, r1
    1cda:	91 08       	sbc	r9, r1
    1cdc:	a6 0e       	add	r10, r22
    1cde:	b7 1e       	adc	r11, r23
    1ce0:	c8 1e       	adc	r12, r24
    1ce2:	d9 1e       	adc	r13, r25
    1ce4:	d6 01       	movw	r26, r12
    1ce6:	c5 01       	movw	r24, r10
    1ce8:	82 1b       	sub	r24, r18
    1cea:	93 0b       	sbc	r25, r19
    1cec:	a4 0b       	sbc	r26, r20
    1cee:	b5 0b       	sbc	r27, r21
    1cf0:	89 8f       	std	Y+25, r24	; 0x19
    1cf2:	9a 8f       	std	Y+26, r25	; 0x1a
    1cf4:	ab 8f       	std	Y+27, r26	; 0x1b
    1cf6:	bc 8f       	std	Y+28, r27	; 0x1c
    1cf8:	d1 01       	movw	r26, r2
    1cfa:	99 27       	eor	r25, r25
    1cfc:	88 27       	eor	r24, r24
    1cfe:	84 01       	movw	r16, r8
    1d00:	73 01       	movw	r14, r6
    1d02:	e8 2a       	or	r14, r24
    1d04:	f9 2a       	or	r15, r25
    1d06:	0a 2b       	or	r16, r26
    1d08:	1b 2b       	or	r17, r27
    1d0a:	4f ef       	ldi	r20, 0xFF	; 255
    1d0c:	a4 2e       	mov	r10, r20
    1d0e:	4f ef       	ldi	r20, 0xFF	; 255
    1d10:	b4 2e       	mov	r11, r20
    1d12:	c1 2c       	mov	r12, r1
    1d14:	d1 2c       	mov	r13, r1
    1d16:	ae 20       	and	r10, r14
    1d18:	bf 20       	and	r11, r15
    1d1a:	c0 22       	and	r12, r16
    1d1c:	d1 22       	and	r13, r17
    1d1e:	78 01       	movw	r14, r16
    1d20:	00 27       	eor	r16, r16
    1d22:	11 27       	eor	r17, r17
    1d24:	6d a0       	ldd	r6, Y+37	; 0x25
    1d26:	7e a0       	ldd	r7, Y+38	; 0x26
    1d28:	8f a0       	ldd	r8, Y+39	; 0x27
    1d2a:	98 a4       	ldd	r9, Y+40	; 0x28
    1d2c:	4f ef       	ldi	r20, 0xFF	; 255
    1d2e:	5f ef       	ldi	r21, 0xFF	; 255
    1d30:	60 e0       	ldi	r22, 0x00	; 0
    1d32:	70 e0       	ldi	r23, 0x00	; 0
    1d34:	64 22       	and	r6, r20
    1d36:	75 22       	and	r7, r21
    1d38:	86 22       	and	r8, r22
    1d3a:	97 22       	and	r9, r23
    1d3c:	8d a1       	ldd	r24, Y+37	; 0x25
    1d3e:	9e a1       	ldd	r25, Y+38	; 0x26
    1d40:	af a1       	ldd	r26, Y+39	; 0x27
    1d42:	b8 a5       	ldd	r27, Y+40	; 0x28
    1d44:	bd 01       	movw	r22, r26
    1d46:	88 27       	eor	r24, r24
    1d48:	99 27       	eor	r25, r25
    1d4a:	65 96       	adiw	r28, 0x15	; 21
    1d4c:	6c af       	std	Y+60, r22	; 0x3c
    1d4e:	7d af       	std	Y+61, r23	; 0x3d
    1d50:	8e af       	std	Y+62, r24	; 0x3e
    1d52:	9f af       	std	Y+63, r25	; 0x3f
    1d54:	65 97       	sbiw	r28, 0x15	; 21
    1d56:	c6 01       	movw	r24, r12
    1d58:	b5 01       	movw	r22, r10
    1d5a:	a4 01       	movw	r20, r8
    1d5c:	93 01       	movw	r18, r6
    1d5e:	0e 94 fa 39 	call	0x73f4	; 0x73f4 <__mulsi3>
    1d62:	61 96       	adiw	r28, 0x11	; 17
    1d64:	6c af       	std	Y+60, r22	; 0x3c
    1d66:	7d af       	std	Y+61, r23	; 0x3d
    1d68:	8e af       	std	Y+62, r24	; 0x3e
    1d6a:	9f af       	std	Y+63, r25	; 0x3f
    1d6c:	61 97       	sbiw	r28, 0x11	; 17
    1d6e:	c6 01       	movw	r24, r12
    1d70:	b5 01       	movw	r22, r10
    1d72:	65 96       	adiw	r28, 0x15	; 21
    1d74:	2c ad       	ldd	r18, Y+60	; 0x3c
    1d76:	3d ad       	ldd	r19, Y+61	; 0x3d
    1d78:	4e ad       	ldd	r20, Y+62	; 0x3e
    1d7a:	5f ad       	ldd	r21, Y+63	; 0x3f
    1d7c:	65 97       	sbiw	r28, 0x15	; 21
    1d7e:	0e 94 fa 39 	call	0x73f4	; 0x73f4 <__mulsi3>
    1d82:	1b 01       	movw	r2, r22
    1d84:	2c 01       	movw	r4, r24
    1d86:	c8 01       	movw	r24, r16
    1d88:	b7 01       	movw	r22, r14
    1d8a:	a4 01       	movw	r20, r8
    1d8c:	93 01       	movw	r18, r6
    1d8e:	0e 94 fa 39 	call	0x73f4	; 0x73f4 <__mulsi3>
    1d92:	5b 01       	movw	r10, r22
    1d94:	6c 01       	movw	r12, r24
    1d96:	c8 01       	movw	r24, r16
    1d98:	b7 01       	movw	r22, r14
    1d9a:	65 96       	adiw	r28, 0x15	; 21
    1d9c:	2c ad       	ldd	r18, Y+60	; 0x3c
    1d9e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1da0:	4e ad       	ldd	r20, Y+62	; 0x3e
    1da2:	5f ad       	ldd	r21, Y+63	; 0x3f
    1da4:	65 97       	sbiw	r28, 0x15	; 21
    1da6:	0e 94 fa 39 	call	0x73f4	; 0x73f4 <__mulsi3>
    1daa:	7b 01       	movw	r14, r22
    1dac:	8c 01       	movw	r16, r24
    1dae:	a6 01       	movw	r20, r12
    1db0:	95 01       	movw	r18, r10
    1db2:	22 0d       	add	r18, r2
    1db4:	33 1d       	adc	r19, r3
    1db6:	44 1d       	adc	r20, r4
    1db8:	55 1d       	adc	r21, r5
    1dba:	61 96       	adiw	r28, 0x11	; 17
    1dbc:	6c ac       	ldd	r6, Y+60	; 0x3c
    1dbe:	7d ac       	ldd	r7, Y+61	; 0x3d
    1dc0:	8e ac       	ldd	r8, Y+62	; 0x3e
    1dc2:	9f ac       	ldd	r9, Y+63	; 0x3f
    1dc4:	61 97       	sbiw	r28, 0x11	; 17
    1dc6:	c4 01       	movw	r24, r8
    1dc8:	aa 27       	eor	r26, r26
    1dca:	bb 27       	eor	r27, r27
    1dcc:	28 0f       	add	r18, r24
    1dce:	39 1f       	adc	r19, r25
    1dd0:	4a 1f       	adc	r20, r26
    1dd2:	5b 1f       	adc	r21, r27
    1dd4:	2a 15       	cp	r18, r10
    1dd6:	3b 05       	cpc	r19, r11
    1dd8:	4c 05       	cpc	r20, r12
    1dda:	5d 05       	cpc	r21, r13
    1ddc:	48 f4       	brcc	.+18     	; 0x1df0 <__umoddi3+0xb70>
    1dde:	81 2c       	mov	r8, r1
    1de0:	91 2c       	mov	r9, r1
    1de2:	e1 e0       	ldi	r30, 0x01	; 1
    1de4:	ae 2e       	mov	r10, r30
    1de6:	b1 2c       	mov	r11, r1
    1de8:	e8 0c       	add	r14, r8
    1dea:	f9 1c       	adc	r15, r9
    1dec:	0a 1d       	adc	r16, r10
    1dee:	1b 1d       	adc	r17, r11
    1df0:	ca 01       	movw	r24, r20
    1df2:	aa 27       	eor	r26, r26
    1df4:	bb 27       	eor	r27, r27
    1df6:	57 01       	movw	r10, r14
    1df8:	68 01       	movw	r12, r16
    1dfa:	a8 0e       	add	r10, r24
    1dfc:	b9 1e       	adc	r11, r25
    1dfe:	ca 1e       	adc	r12, r26
    1e00:	db 1e       	adc	r13, r27
    1e02:	a9 01       	movw	r20, r18
    1e04:	33 27       	eor	r19, r19
    1e06:	22 27       	eor	r18, r18
    1e08:	61 96       	adiw	r28, 0x11	; 17
    1e0a:	8c ad       	ldd	r24, Y+60	; 0x3c
    1e0c:	9d ad       	ldd	r25, Y+61	; 0x3d
    1e0e:	ae ad       	ldd	r26, Y+62	; 0x3e
    1e10:	bf ad       	ldd	r27, Y+63	; 0x3f
    1e12:	61 97       	sbiw	r28, 0x11	; 17
    1e14:	a0 70       	andi	r26, 0x00	; 0
    1e16:	b0 70       	andi	r27, 0x00	; 0
    1e18:	28 0f       	add	r18, r24
    1e1a:	39 1f       	adc	r19, r25
    1e1c:	4a 1f       	adc	r20, r26
    1e1e:	5b 1f       	adc	r21, r27
    1e20:	e9 8c       	ldd	r14, Y+25	; 0x19
    1e22:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1e24:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1e26:	1c 8d       	ldd	r17, Y+28	; 0x1c
    1e28:	ea 14       	cp	r14, r10
    1e2a:	fb 04       	cpc	r15, r11
    1e2c:	0c 05       	cpc	r16, r12
    1e2e:	1d 05       	cpc	r17, r13
    1e30:	70 f0       	brcs	.+28     	; 0x1e4e <__umoddi3+0xbce>
    1e32:	ae 14       	cp	r10, r14
    1e34:	bf 04       	cpc	r11, r15
    1e36:	c0 06       	cpc	r12, r16
    1e38:	d1 06       	cpc	r13, r17
    1e3a:	69 f5       	brne	.+90     	; 0x1e96 <__umoddi3+0xc16>
    1e3c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1e3e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1e40:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e42:	98 a1       	ldd	r25, Y+32	; 0x20
    1e44:	62 17       	cp	r22, r18
    1e46:	73 07       	cpc	r23, r19
    1e48:	84 07       	cpc	r24, r20
    1e4a:	95 07       	cpc	r25, r21
    1e4c:	20 f5       	brcc	.+72     	; 0x1e96 <__umoddi3+0xc16>
    1e4e:	da 01       	movw	r26, r20
    1e50:	c9 01       	movw	r24, r18
    1e52:	6d a0       	ldd	r6, Y+37	; 0x25
    1e54:	7e a0       	ldd	r7, Y+38	; 0x26
    1e56:	8f a0       	ldd	r8, Y+39	; 0x27
    1e58:	98 a4       	ldd	r9, Y+40	; 0x28
    1e5a:	86 19       	sub	r24, r6
    1e5c:	97 09       	sbc	r25, r7
    1e5e:	a8 09       	sbc	r26, r8
    1e60:	b9 09       	sbc	r27, r9
    1e62:	e9 a4       	ldd	r14, Y+41	; 0x29
    1e64:	fa a4       	ldd	r15, Y+42	; 0x2a
    1e66:	0b a5       	ldd	r16, Y+43	; 0x2b
    1e68:	1c a5       	ldd	r17, Y+44	; 0x2c
    1e6a:	ae 18       	sub	r10, r14
    1e6c:	bf 08       	sbc	r11, r15
    1e6e:	c0 0a       	sbc	r12, r16
    1e70:	d1 0a       	sbc	r13, r17
    1e72:	ee 24       	eor	r14, r14
    1e74:	ff 24       	eor	r15, r15
    1e76:	87 01       	movw	r16, r14
    1e78:	28 17       	cp	r18, r24
    1e7a:	39 07       	cpc	r19, r25
    1e7c:	4a 07       	cpc	r20, r26
    1e7e:	5b 07       	cpc	r21, r27
    1e80:	28 f4       	brcc	.+10     	; 0x1e8c <__umoddi3+0xc0c>
    1e82:	21 e0       	ldi	r18, 0x01	; 1
    1e84:	e2 2e       	mov	r14, r18
    1e86:	f1 2c       	mov	r15, r1
    1e88:	01 2d       	mov	r16, r1
    1e8a:	11 2d       	mov	r17, r1
    1e8c:	ae 18       	sub	r10, r14
    1e8e:	bf 08       	sbc	r11, r15
    1e90:	c0 0a       	sbc	r12, r16
    1e92:	d1 0a       	sbc	r13, r17
    1e94:	02 c0       	rjmp	.+4      	; 0x1e9a <__umoddi3+0xc1a>
    1e96:	da 01       	movw	r26, r20
    1e98:	c9 01       	movw	r24, r18
    1e9a:	6d 8c       	ldd	r6, Y+29	; 0x1d
    1e9c:	7e 8c       	ldd	r7, Y+30	; 0x1e
    1e9e:	8f 8c       	ldd	r8, Y+31	; 0x1f
    1ea0:	98 a0       	ldd	r9, Y+32	; 0x20
    1ea2:	68 1a       	sub	r6, r24
    1ea4:	79 0a       	sbc	r7, r25
    1ea6:	8a 0a       	sbc	r8, r26
    1ea8:	9b 0a       	sbc	r9, r27
    1eaa:	49 8d       	ldd	r20, Y+25	; 0x19
    1eac:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1eae:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1eb0:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1eb2:	4a 19       	sub	r20, r10
    1eb4:	5b 09       	sbc	r21, r11
    1eb6:	6c 09       	sbc	r22, r12
    1eb8:	7d 09       	sbc	r23, r13
    1eba:	5a 01       	movw	r10, r20
    1ebc:	6b 01       	movw	r12, r22
    1ebe:	22 24       	eor	r2, r2
    1ec0:	33 24       	eor	r3, r3
    1ec2:	21 01       	movw	r4, r2
    1ec4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1ec6:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1ec8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1eca:	98 a1       	ldd	r25, Y+32	; 0x20
    1ecc:	66 15       	cp	r22, r6
    1ece:	77 05       	cpc	r23, r7
    1ed0:	88 05       	cpc	r24, r8
    1ed2:	99 05       	cpc	r25, r9
    1ed4:	28 f4       	brcc	.+10     	; 0x1ee0 <__umoddi3+0xc60>
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	28 2e       	mov	r2, r24
    1eda:	31 2c       	mov	r3, r1
    1edc:	41 2c       	mov	r4, r1
    1ede:	51 2c       	mov	r5, r1
    1ee0:	86 01       	movw	r16, r12
    1ee2:	75 01       	movw	r14, r10
    1ee4:	e2 18       	sub	r14, r2
    1ee6:	f3 08       	sbc	r15, r3
    1ee8:	04 09       	sbc	r16, r4
    1eea:	15 09       	sbc	r17, r5
    1eec:	a8 01       	movw	r20, r16
    1eee:	97 01       	movw	r18, r14
    1ef0:	66 96       	adiw	r28, 0x16	; 22
    1ef2:	0f ac       	ldd	r0, Y+63	; 0x3f
    1ef4:	66 97       	sbiw	r28, 0x16	; 22
    1ef6:	04 c0       	rjmp	.+8      	; 0x1f00 <__umoddi3+0xc80>
    1ef8:	22 0f       	add	r18, r18
    1efa:	33 1f       	adc	r19, r19
    1efc:	44 1f       	adc	r20, r20
    1efe:	55 1f       	adc	r21, r21
    1f00:	0a 94       	dec	r0
    1f02:	d2 f7       	brpl	.-12     	; 0x1ef8 <__umoddi3+0xc78>
    1f04:	d4 01       	movw	r26, r8
    1f06:	c3 01       	movw	r24, r6
    1f08:	67 96       	adiw	r28, 0x17	; 23
    1f0a:	0f ac       	ldd	r0, Y+63	; 0x3f
    1f0c:	67 97       	sbiw	r28, 0x17	; 23
    1f0e:	04 c0       	rjmp	.+8      	; 0x1f18 <__umoddi3+0xc98>
    1f10:	b6 95       	lsr	r27
    1f12:	a7 95       	ror	r26
    1f14:	97 95       	ror	r25
    1f16:	87 95       	ror	r24
    1f18:	0a 94       	dec	r0
    1f1a:	d2 f7       	brpl	.-12     	; 0x1f10 <__umoddi3+0xc90>
    1f1c:	28 2b       	or	r18, r24
    1f1e:	39 2b       	or	r19, r25
    1f20:	4a 2b       	or	r20, r26
    1f22:	5b 2b       	or	r21, r27
    1f24:	29 8b       	std	Y+17, r18	; 0x11
    1f26:	3a 8b       	std	Y+18, r19	; 0x12
    1f28:	4b 8b       	std	Y+19, r20	; 0x13
    1f2a:	5c 8b       	std	Y+20, r21	; 0x14
    1f2c:	67 96       	adiw	r28, 0x17	; 23
    1f2e:	0f ac       	ldd	r0, Y+63	; 0x3f
    1f30:	67 97       	sbiw	r28, 0x17	; 23
    1f32:	04 c0       	rjmp	.+8      	; 0x1f3c <__umoddi3+0xcbc>
    1f34:	16 95       	lsr	r17
    1f36:	07 95       	ror	r16
    1f38:	f7 94       	ror	r15
    1f3a:	e7 94       	ror	r14
    1f3c:	0a 94       	dec	r0
    1f3e:	d2 f7       	brpl	.-12     	; 0x1f34 <__umoddi3+0xcb4>
    1f40:	ed 8a       	std	Y+21, r14	; 0x15
    1f42:	fe 8a       	std	Y+22, r15	; 0x16
    1f44:	0f 8b       	std	Y+23, r16	; 0x17
    1f46:	18 8f       	std	Y+24, r17	; 0x18
    1f48:	3a 89       	ldd	r19, Y+18	; 0x12
    1f4a:	4b 89       	ldd	r20, Y+19	; 0x13
    1f4c:	5c 89       	ldd	r21, Y+20	; 0x14
    1f4e:	6e 2d       	mov	r22, r14
    1f50:	7e 89       	ldd	r23, Y+22	; 0x16
    1f52:	8f 89       	ldd	r24, Y+23	; 0x17
    1f54:	98 8d       	ldd	r25, Y+24	; 0x18
    1f56:	c5 5a       	subi	r28, 0xA5	; 165
    1f58:	df 4f       	sbci	r29, 0xFF	; 255
    1f5a:	e2 e1       	ldi	r30, 0x12	; 18
    1f5c:	0c 94 86 3a 	jmp	0x750c	; 0x750c <__epilogue_restores__>

00001f60 <_fpadd_parts>:
    1f60:	a0 e0       	ldi	r26, 0x00	; 0
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	e6 eb       	ldi	r30, 0xB6	; 182
    1f66:	ff e0       	ldi	r31, 0x0F	; 15
    1f68:	0c 94 6a 3a 	jmp	0x74d4	; 0x74d4 <__prologue_saves__>
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	2b 01       	movw	r4, r22
    1f70:	fa 01       	movw	r30, r20
    1f72:	9c 91       	ld	r25, X
    1f74:	92 30       	cpi	r25, 0x02	; 2
    1f76:	08 f4       	brcc	.+2      	; 0x1f7a <_fpadd_parts+0x1a>
    1f78:	39 c1       	rjmp	.+626    	; 0x21ec <_fpadd_parts+0x28c>
    1f7a:	eb 01       	movw	r28, r22
    1f7c:	88 81       	ld	r24, Y
    1f7e:	82 30       	cpi	r24, 0x02	; 2
    1f80:	08 f4       	brcc	.+2      	; 0x1f84 <_fpadd_parts+0x24>
    1f82:	33 c1       	rjmp	.+614    	; 0x21ea <_fpadd_parts+0x28a>
    1f84:	94 30       	cpi	r25, 0x04	; 4
    1f86:	69 f4       	brne	.+26     	; 0x1fa2 <_fpadd_parts+0x42>
    1f88:	84 30       	cpi	r24, 0x04	; 4
    1f8a:	09 f0       	breq	.+2      	; 0x1f8e <_fpadd_parts+0x2e>
    1f8c:	2f c1       	rjmp	.+606    	; 0x21ec <_fpadd_parts+0x28c>
    1f8e:	11 96       	adiw	r26, 0x01	; 1
    1f90:	9c 91       	ld	r25, X
    1f92:	11 97       	sbiw	r26, 0x01	; 1
    1f94:	89 81       	ldd	r24, Y+1	; 0x01
    1f96:	98 17       	cp	r25, r24
    1f98:	09 f4       	brne	.+2      	; 0x1f9c <_fpadd_parts+0x3c>
    1f9a:	28 c1       	rjmp	.+592    	; 0x21ec <_fpadd_parts+0x28c>
    1f9c:	a6 ef       	ldi	r26, 0xF6	; 246
    1f9e:	b0 e0       	ldi	r27, 0x00	; 0
    1fa0:	25 c1       	rjmp	.+586    	; 0x21ec <_fpadd_parts+0x28c>
    1fa2:	84 30       	cpi	r24, 0x04	; 4
    1fa4:	09 f4       	brne	.+2      	; 0x1fa8 <_fpadd_parts+0x48>
    1fa6:	21 c1       	rjmp	.+578    	; 0x21ea <_fpadd_parts+0x28a>
    1fa8:	82 30       	cpi	r24, 0x02	; 2
    1faa:	a9 f4       	brne	.+42     	; 0x1fd6 <_fpadd_parts+0x76>
    1fac:	92 30       	cpi	r25, 0x02	; 2
    1fae:	09 f0       	breq	.+2      	; 0x1fb2 <_fpadd_parts+0x52>
    1fb0:	1d c1       	rjmp	.+570    	; 0x21ec <_fpadd_parts+0x28c>
    1fb2:	9a 01       	movw	r18, r20
    1fb4:	ad 01       	movw	r20, r26
    1fb6:	88 e0       	ldi	r24, 0x08	; 8
    1fb8:	ea 01       	movw	r28, r20
    1fba:	09 90       	ld	r0, Y+
    1fbc:	ae 01       	movw	r20, r28
    1fbe:	e9 01       	movw	r28, r18
    1fc0:	09 92       	st	Y+, r0
    1fc2:	9e 01       	movw	r18, r28
    1fc4:	81 50       	subi	r24, 0x01	; 1
    1fc6:	c1 f7       	brne	.-16     	; 0x1fb8 <_fpadd_parts+0x58>
    1fc8:	e2 01       	movw	r28, r4
    1fca:	89 81       	ldd	r24, Y+1	; 0x01
    1fcc:	11 96       	adiw	r26, 0x01	; 1
    1fce:	9c 91       	ld	r25, X
    1fd0:	89 23       	and	r24, r25
    1fd2:	81 83       	std	Z+1, r24	; 0x01
    1fd4:	08 c1       	rjmp	.+528    	; 0x21e6 <_fpadd_parts+0x286>
    1fd6:	92 30       	cpi	r25, 0x02	; 2
    1fd8:	09 f4       	brne	.+2      	; 0x1fdc <_fpadd_parts+0x7c>
    1fda:	07 c1       	rjmp	.+526    	; 0x21ea <_fpadd_parts+0x28a>
    1fdc:	12 96       	adiw	r26, 0x02	; 2
    1fde:	2d 90       	ld	r2, X+
    1fe0:	3c 90       	ld	r3, X
    1fe2:	13 97       	sbiw	r26, 0x03	; 3
    1fe4:	eb 01       	movw	r28, r22
    1fe6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe8:	9b 81       	ldd	r25, Y+3	; 0x03
    1fea:	14 96       	adiw	r26, 0x04	; 4
    1fec:	ad 90       	ld	r10, X+
    1fee:	bd 90       	ld	r11, X+
    1ff0:	cd 90       	ld	r12, X+
    1ff2:	dc 90       	ld	r13, X
    1ff4:	17 97       	sbiw	r26, 0x07	; 7
    1ff6:	ec 80       	ldd	r14, Y+4	; 0x04
    1ff8:	fd 80       	ldd	r15, Y+5	; 0x05
    1ffa:	0e 81       	ldd	r16, Y+6	; 0x06
    1ffc:	1f 81       	ldd	r17, Y+7	; 0x07
    1ffe:	91 01       	movw	r18, r2
    2000:	28 1b       	sub	r18, r24
    2002:	39 0b       	sbc	r19, r25
    2004:	b9 01       	movw	r22, r18
    2006:	37 ff       	sbrs	r19, 7
    2008:	04 c0       	rjmp	.+8      	; 0x2012 <_fpadd_parts+0xb2>
    200a:	66 27       	eor	r22, r22
    200c:	77 27       	eor	r23, r23
    200e:	62 1b       	sub	r22, r18
    2010:	73 0b       	sbc	r23, r19
    2012:	60 32       	cpi	r22, 0x20	; 32
    2014:	71 05       	cpc	r23, r1
    2016:	0c f0       	brlt	.+2      	; 0x201a <_fpadd_parts+0xba>
    2018:	61 c0       	rjmp	.+194    	; 0x20dc <_fpadd_parts+0x17c>
    201a:	12 16       	cp	r1, r18
    201c:	13 06       	cpc	r1, r19
    201e:	6c f5       	brge	.+90     	; 0x207a <_fpadd_parts+0x11a>
    2020:	37 01       	movw	r6, r14
    2022:	48 01       	movw	r8, r16
    2024:	06 2e       	mov	r0, r22
    2026:	04 c0       	rjmp	.+8      	; 0x2030 <_fpadd_parts+0xd0>
    2028:	96 94       	lsr	r9
    202a:	87 94       	ror	r8
    202c:	77 94       	ror	r7
    202e:	67 94       	ror	r6
    2030:	0a 94       	dec	r0
    2032:	d2 f7       	brpl	.-12     	; 0x2028 <_fpadd_parts+0xc8>
    2034:	21 e0       	ldi	r18, 0x01	; 1
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e0       	ldi	r20, 0x00	; 0
    203a:	50 e0       	ldi	r21, 0x00	; 0
    203c:	04 c0       	rjmp	.+8      	; 0x2046 <_fpadd_parts+0xe6>
    203e:	22 0f       	add	r18, r18
    2040:	33 1f       	adc	r19, r19
    2042:	44 1f       	adc	r20, r20
    2044:	55 1f       	adc	r21, r21
    2046:	6a 95       	dec	r22
    2048:	d2 f7       	brpl	.-12     	; 0x203e <_fpadd_parts+0xde>
    204a:	21 50       	subi	r18, 0x01	; 1
    204c:	30 40       	sbci	r19, 0x00	; 0
    204e:	40 40       	sbci	r20, 0x00	; 0
    2050:	50 40       	sbci	r21, 0x00	; 0
    2052:	2e 21       	and	r18, r14
    2054:	3f 21       	and	r19, r15
    2056:	40 23       	and	r20, r16
    2058:	51 23       	and	r21, r17
    205a:	21 15       	cp	r18, r1
    205c:	31 05       	cpc	r19, r1
    205e:	41 05       	cpc	r20, r1
    2060:	51 05       	cpc	r21, r1
    2062:	21 f0       	breq	.+8      	; 0x206c <_fpadd_parts+0x10c>
    2064:	21 e0       	ldi	r18, 0x01	; 1
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	40 e0       	ldi	r20, 0x00	; 0
    206a:	50 e0       	ldi	r21, 0x00	; 0
    206c:	79 01       	movw	r14, r18
    206e:	8a 01       	movw	r16, r20
    2070:	e6 28       	or	r14, r6
    2072:	f7 28       	or	r15, r7
    2074:	08 29       	or	r16, r8
    2076:	19 29       	or	r17, r9
    2078:	3c c0       	rjmp	.+120    	; 0x20f2 <_fpadd_parts+0x192>
    207a:	23 2b       	or	r18, r19
    207c:	d1 f1       	breq	.+116    	; 0x20f2 <_fpadd_parts+0x192>
    207e:	26 0e       	add	r2, r22
    2080:	37 1e       	adc	r3, r23
    2082:	35 01       	movw	r6, r10
    2084:	46 01       	movw	r8, r12
    2086:	06 2e       	mov	r0, r22
    2088:	04 c0       	rjmp	.+8      	; 0x2092 <_fpadd_parts+0x132>
    208a:	96 94       	lsr	r9
    208c:	87 94       	ror	r8
    208e:	77 94       	ror	r7
    2090:	67 94       	ror	r6
    2092:	0a 94       	dec	r0
    2094:	d2 f7       	brpl	.-12     	; 0x208a <_fpadd_parts+0x12a>
    2096:	21 e0       	ldi	r18, 0x01	; 1
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	40 e0       	ldi	r20, 0x00	; 0
    209c:	50 e0       	ldi	r21, 0x00	; 0
    209e:	04 c0       	rjmp	.+8      	; 0x20a8 <_fpadd_parts+0x148>
    20a0:	22 0f       	add	r18, r18
    20a2:	33 1f       	adc	r19, r19
    20a4:	44 1f       	adc	r20, r20
    20a6:	55 1f       	adc	r21, r21
    20a8:	6a 95       	dec	r22
    20aa:	d2 f7       	brpl	.-12     	; 0x20a0 <_fpadd_parts+0x140>
    20ac:	21 50       	subi	r18, 0x01	; 1
    20ae:	30 40       	sbci	r19, 0x00	; 0
    20b0:	40 40       	sbci	r20, 0x00	; 0
    20b2:	50 40       	sbci	r21, 0x00	; 0
    20b4:	2a 21       	and	r18, r10
    20b6:	3b 21       	and	r19, r11
    20b8:	4c 21       	and	r20, r12
    20ba:	5d 21       	and	r21, r13
    20bc:	21 15       	cp	r18, r1
    20be:	31 05       	cpc	r19, r1
    20c0:	41 05       	cpc	r20, r1
    20c2:	51 05       	cpc	r21, r1
    20c4:	21 f0       	breq	.+8      	; 0x20ce <_fpadd_parts+0x16e>
    20c6:	21 e0       	ldi	r18, 0x01	; 1
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	40 e0       	ldi	r20, 0x00	; 0
    20cc:	50 e0       	ldi	r21, 0x00	; 0
    20ce:	59 01       	movw	r10, r18
    20d0:	6a 01       	movw	r12, r20
    20d2:	a6 28       	or	r10, r6
    20d4:	b7 28       	or	r11, r7
    20d6:	c8 28       	or	r12, r8
    20d8:	d9 28       	or	r13, r9
    20da:	0b c0       	rjmp	.+22     	; 0x20f2 <_fpadd_parts+0x192>
    20dc:	82 15       	cp	r24, r2
    20de:	93 05       	cpc	r25, r3
    20e0:	2c f0       	brlt	.+10     	; 0x20ec <_fpadd_parts+0x18c>
    20e2:	1c 01       	movw	r2, r24
    20e4:	aa 24       	eor	r10, r10
    20e6:	bb 24       	eor	r11, r11
    20e8:	65 01       	movw	r12, r10
    20ea:	03 c0       	rjmp	.+6      	; 0x20f2 <_fpadd_parts+0x192>
    20ec:	ee 24       	eor	r14, r14
    20ee:	ff 24       	eor	r15, r15
    20f0:	87 01       	movw	r16, r14
    20f2:	11 96       	adiw	r26, 0x01	; 1
    20f4:	9c 91       	ld	r25, X
    20f6:	d2 01       	movw	r26, r4
    20f8:	11 96       	adiw	r26, 0x01	; 1
    20fa:	8c 91       	ld	r24, X
    20fc:	98 17       	cp	r25, r24
    20fe:	09 f4       	brne	.+2      	; 0x2102 <_fpadd_parts+0x1a2>
    2100:	45 c0       	rjmp	.+138    	; 0x218c <_fpadd_parts+0x22c>
    2102:	99 23       	and	r25, r25
    2104:	39 f0       	breq	.+14     	; 0x2114 <_fpadd_parts+0x1b4>
    2106:	a8 01       	movw	r20, r16
    2108:	97 01       	movw	r18, r14
    210a:	2a 19       	sub	r18, r10
    210c:	3b 09       	sbc	r19, r11
    210e:	4c 09       	sbc	r20, r12
    2110:	5d 09       	sbc	r21, r13
    2112:	06 c0       	rjmp	.+12     	; 0x2120 <_fpadd_parts+0x1c0>
    2114:	a6 01       	movw	r20, r12
    2116:	95 01       	movw	r18, r10
    2118:	2e 19       	sub	r18, r14
    211a:	3f 09       	sbc	r19, r15
    211c:	40 0b       	sbc	r20, r16
    211e:	51 0b       	sbc	r21, r17
    2120:	57 fd       	sbrc	r21, 7
    2122:	08 c0       	rjmp	.+16     	; 0x2134 <_fpadd_parts+0x1d4>
    2124:	11 82       	std	Z+1, r1	; 0x01
    2126:	33 82       	std	Z+3, r3	; 0x03
    2128:	22 82       	std	Z+2, r2	; 0x02
    212a:	24 83       	std	Z+4, r18	; 0x04
    212c:	35 83       	std	Z+5, r19	; 0x05
    212e:	46 83       	std	Z+6, r20	; 0x06
    2130:	57 83       	std	Z+7, r21	; 0x07
    2132:	1d c0       	rjmp	.+58     	; 0x216e <_fpadd_parts+0x20e>
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	81 83       	std	Z+1, r24	; 0x01
    2138:	33 82       	std	Z+3, r3	; 0x03
    213a:	22 82       	std	Z+2, r2	; 0x02
    213c:	88 27       	eor	r24, r24
    213e:	99 27       	eor	r25, r25
    2140:	dc 01       	movw	r26, r24
    2142:	82 1b       	sub	r24, r18
    2144:	93 0b       	sbc	r25, r19
    2146:	a4 0b       	sbc	r26, r20
    2148:	b5 0b       	sbc	r27, r21
    214a:	84 83       	std	Z+4, r24	; 0x04
    214c:	95 83       	std	Z+5, r25	; 0x05
    214e:	a6 83       	std	Z+6, r26	; 0x06
    2150:	b7 83       	std	Z+7, r27	; 0x07
    2152:	0d c0       	rjmp	.+26     	; 0x216e <_fpadd_parts+0x20e>
    2154:	22 0f       	add	r18, r18
    2156:	33 1f       	adc	r19, r19
    2158:	44 1f       	adc	r20, r20
    215a:	55 1f       	adc	r21, r21
    215c:	24 83       	std	Z+4, r18	; 0x04
    215e:	35 83       	std	Z+5, r19	; 0x05
    2160:	46 83       	std	Z+6, r20	; 0x06
    2162:	57 83       	std	Z+7, r21	; 0x07
    2164:	82 81       	ldd	r24, Z+2	; 0x02
    2166:	93 81       	ldd	r25, Z+3	; 0x03
    2168:	01 97       	sbiw	r24, 0x01	; 1
    216a:	93 83       	std	Z+3, r25	; 0x03
    216c:	82 83       	std	Z+2, r24	; 0x02
    216e:	24 81       	ldd	r18, Z+4	; 0x04
    2170:	35 81       	ldd	r19, Z+5	; 0x05
    2172:	46 81       	ldd	r20, Z+6	; 0x06
    2174:	57 81       	ldd	r21, Z+7	; 0x07
    2176:	da 01       	movw	r26, r20
    2178:	c9 01       	movw	r24, r18
    217a:	01 97       	sbiw	r24, 0x01	; 1
    217c:	a1 09       	sbc	r26, r1
    217e:	b1 09       	sbc	r27, r1
    2180:	8f 5f       	subi	r24, 0xFF	; 255
    2182:	9f 4f       	sbci	r25, 0xFF	; 255
    2184:	af 4f       	sbci	r26, 0xFF	; 255
    2186:	bf 43       	sbci	r27, 0x3F	; 63
    2188:	28 f3       	brcs	.-54     	; 0x2154 <_fpadd_parts+0x1f4>
    218a:	0b c0       	rjmp	.+22     	; 0x21a2 <_fpadd_parts+0x242>
    218c:	91 83       	std	Z+1, r25	; 0x01
    218e:	33 82       	std	Z+3, r3	; 0x03
    2190:	22 82       	std	Z+2, r2	; 0x02
    2192:	ea 0c       	add	r14, r10
    2194:	fb 1c       	adc	r15, r11
    2196:	0c 1d       	adc	r16, r12
    2198:	1d 1d       	adc	r17, r13
    219a:	e4 82       	std	Z+4, r14	; 0x04
    219c:	f5 82       	std	Z+5, r15	; 0x05
    219e:	06 83       	std	Z+6, r16	; 0x06
    21a0:	17 83       	std	Z+7, r17	; 0x07
    21a2:	83 e0       	ldi	r24, 0x03	; 3
    21a4:	80 83       	st	Z, r24
    21a6:	24 81       	ldd	r18, Z+4	; 0x04
    21a8:	35 81       	ldd	r19, Z+5	; 0x05
    21aa:	46 81       	ldd	r20, Z+6	; 0x06
    21ac:	57 81       	ldd	r21, Z+7	; 0x07
    21ae:	57 ff       	sbrs	r21, 7
    21b0:	1a c0       	rjmp	.+52     	; 0x21e6 <_fpadd_parts+0x286>
    21b2:	c9 01       	movw	r24, r18
    21b4:	aa 27       	eor	r26, r26
    21b6:	97 fd       	sbrc	r25, 7
    21b8:	a0 95       	com	r26
    21ba:	ba 2f       	mov	r27, r26
    21bc:	81 70       	andi	r24, 0x01	; 1
    21be:	90 70       	andi	r25, 0x00	; 0
    21c0:	a0 70       	andi	r26, 0x00	; 0
    21c2:	b0 70       	andi	r27, 0x00	; 0
    21c4:	56 95       	lsr	r21
    21c6:	47 95       	ror	r20
    21c8:	37 95       	ror	r19
    21ca:	27 95       	ror	r18
    21cc:	82 2b       	or	r24, r18
    21ce:	93 2b       	or	r25, r19
    21d0:	a4 2b       	or	r26, r20
    21d2:	b5 2b       	or	r27, r21
    21d4:	84 83       	std	Z+4, r24	; 0x04
    21d6:	95 83       	std	Z+5, r25	; 0x05
    21d8:	a6 83       	std	Z+6, r26	; 0x06
    21da:	b7 83       	std	Z+7, r27	; 0x07
    21dc:	82 81       	ldd	r24, Z+2	; 0x02
    21de:	93 81       	ldd	r25, Z+3	; 0x03
    21e0:	01 96       	adiw	r24, 0x01	; 1
    21e2:	93 83       	std	Z+3, r25	; 0x03
    21e4:	82 83       	std	Z+2, r24	; 0x02
    21e6:	df 01       	movw	r26, r30
    21e8:	01 c0       	rjmp	.+2      	; 0x21ec <_fpadd_parts+0x28c>
    21ea:	d2 01       	movw	r26, r4
    21ec:	cd 01       	movw	r24, r26
    21ee:	cd b7       	in	r28, 0x3d	; 61
    21f0:	de b7       	in	r29, 0x3e	; 62
    21f2:	e2 e1       	ldi	r30, 0x12	; 18
    21f4:	0c 94 86 3a 	jmp	0x750c	; 0x750c <__epilogue_restores__>

000021f8 <__subsf3>:
    21f8:	a0 e2       	ldi	r26, 0x20	; 32
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	e2 e0       	ldi	r30, 0x02	; 2
    21fe:	f1 e1       	ldi	r31, 0x11	; 17
    2200:	0c 94 76 3a 	jmp	0x74ec	; 0x74ec <__prologue_saves__+0x18>
    2204:	69 83       	std	Y+1, r22	; 0x01
    2206:	7a 83       	std	Y+2, r23	; 0x02
    2208:	8b 83       	std	Y+3, r24	; 0x03
    220a:	9c 83       	std	Y+4, r25	; 0x04
    220c:	2d 83       	std	Y+5, r18	; 0x05
    220e:	3e 83       	std	Y+6, r19	; 0x06
    2210:	4f 83       	std	Y+7, r20	; 0x07
    2212:	58 87       	std	Y+8, r21	; 0x08
    2214:	e9 e0       	ldi	r30, 0x09	; 9
    2216:	ee 2e       	mov	r14, r30
    2218:	f1 2c       	mov	r15, r1
    221a:	ec 0e       	add	r14, r28
    221c:	fd 1e       	adc	r15, r29
    221e:	ce 01       	movw	r24, r28
    2220:	01 96       	adiw	r24, 0x01	; 1
    2222:	b7 01       	movw	r22, r14
    2224:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <__unpack_f>
    2228:	8e 01       	movw	r16, r28
    222a:	0f 5e       	subi	r16, 0xEF	; 239
    222c:	1f 4f       	sbci	r17, 0xFF	; 255
    222e:	ce 01       	movw	r24, r28
    2230:	05 96       	adiw	r24, 0x05	; 5
    2232:	b8 01       	movw	r22, r16
    2234:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <__unpack_f>
    2238:	8a 89       	ldd	r24, Y+18	; 0x12
    223a:	91 e0       	ldi	r25, 0x01	; 1
    223c:	89 27       	eor	r24, r25
    223e:	8a 8b       	std	Y+18, r24	; 0x12
    2240:	c7 01       	movw	r24, r14
    2242:	b8 01       	movw	r22, r16
    2244:	ae 01       	movw	r20, r28
    2246:	47 5e       	subi	r20, 0xE7	; 231
    2248:	5f 4f       	sbci	r21, 0xFF	; 255
    224a:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <_fpadd_parts>
    224e:	0e 94 89 15 	call	0x2b12	; 0x2b12 <__pack_f>
    2252:	a0 96       	adiw	r28, 0x20	; 32
    2254:	e6 e0       	ldi	r30, 0x06	; 6
    2256:	0c 94 92 3a 	jmp	0x7524	; 0x7524 <__epilogue_restores__+0x18>

0000225a <__addsf3>:
    225a:	a0 e2       	ldi	r26, 0x20	; 32
    225c:	b0 e0       	ldi	r27, 0x00	; 0
    225e:	e3 e3       	ldi	r30, 0x33	; 51
    2260:	f1 e1       	ldi	r31, 0x11	; 17
    2262:	0c 94 76 3a 	jmp	0x74ec	; 0x74ec <__prologue_saves__+0x18>
    2266:	69 83       	std	Y+1, r22	; 0x01
    2268:	7a 83       	std	Y+2, r23	; 0x02
    226a:	8b 83       	std	Y+3, r24	; 0x03
    226c:	9c 83       	std	Y+4, r25	; 0x04
    226e:	2d 83       	std	Y+5, r18	; 0x05
    2270:	3e 83       	std	Y+6, r19	; 0x06
    2272:	4f 83       	std	Y+7, r20	; 0x07
    2274:	58 87       	std	Y+8, r21	; 0x08
    2276:	f9 e0       	ldi	r31, 0x09	; 9
    2278:	ef 2e       	mov	r14, r31
    227a:	f1 2c       	mov	r15, r1
    227c:	ec 0e       	add	r14, r28
    227e:	fd 1e       	adc	r15, r29
    2280:	ce 01       	movw	r24, r28
    2282:	01 96       	adiw	r24, 0x01	; 1
    2284:	b7 01       	movw	r22, r14
    2286:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <__unpack_f>
    228a:	8e 01       	movw	r16, r28
    228c:	0f 5e       	subi	r16, 0xEF	; 239
    228e:	1f 4f       	sbci	r17, 0xFF	; 255
    2290:	ce 01       	movw	r24, r28
    2292:	05 96       	adiw	r24, 0x05	; 5
    2294:	b8 01       	movw	r22, r16
    2296:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <__unpack_f>
    229a:	c7 01       	movw	r24, r14
    229c:	b8 01       	movw	r22, r16
    229e:	ae 01       	movw	r20, r28
    22a0:	47 5e       	subi	r20, 0xE7	; 231
    22a2:	5f 4f       	sbci	r21, 0xFF	; 255
    22a4:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <_fpadd_parts>
    22a8:	0e 94 89 15 	call	0x2b12	; 0x2b12 <__pack_f>
    22ac:	a0 96       	adiw	r28, 0x20	; 32
    22ae:	e6 e0       	ldi	r30, 0x06	; 6
    22b0:	0c 94 92 3a 	jmp	0x7524	; 0x7524 <__epilogue_restores__+0x18>

000022b4 <__mulsf3>:
    22b4:	a0 e2       	ldi	r26, 0x20	; 32
    22b6:	b0 e0       	ldi	r27, 0x00	; 0
    22b8:	e0 e6       	ldi	r30, 0x60	; 96
    22ba:	f1 e1       	ldi	r31, 0x11	; 17
    22bc:	0c 94 6a 3a 	jmp	0x74d4	; 0x74d4 <__prologue_saves__>
    22c0:	69 83       	std	Y+1, r22	; 0x01
    22c2:	7a 83       	std	Y+2, r23	; 0x02
    22c4:	8b 83       	std	Y+3, r24	; 0x03
    22c6:	9c 83       	std	Y+4, r25	; 0x04
    22c8:	2d 83       	std	Y+5, r18	; 0x05
    22ca:	3e 83       	std	Y+6, r19	; 0x06
    22cc:	4f 83       	std	Y+7, r20	; 0x07
    22ce:	58 87       	std	Y+8, r21	; 0x08
    22d0:	ce 01       	movw	r24, r28
    22d2:	01 96       	adiw	r24, 0x01	; 1
    22d4:	be 01       	movw	r22, r28
    22d6:	67 5f       	subi	r22, 0xF7	; 247
    22d8:	7f 4f       	sbci	r23, 0xFF	; 255
    22da:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <__unpack_f>
    22de:	ce 01       	movw	r24, r28
    22e0:	05 96       	adiw	r24, 0x05	; 5
    22e2:	be 01       	movw	r22, r28
    22e4:	6f 5e       	subi	r22, 0xEF	; 239
    22e6:	7f 4f       	sbci	r23, 0xFF	; 255
    22e8:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <__unpack_f>
    22ec:	99 85       	ldd	r25, Y+9	; 0x09
    22ee:	92 30       	cpi	r25, 0x02	; 2
    22f0:	88 f0       	brcs	.+34     	; 0x2314 <__mulsf3+0x60>
    22f2:	89 89       	ldd	r24, Y+17	; 0x11
    22f4:	82 30       	cpi	r24, 0x02	; 2
    22f6:	c8 f0       	brcs	.+50     	; 0x232a <__mulsf3+0x76>
    22f8:	94 30       	cpi	r25, 0x04	; 4
    22fa:	19 f4       	brne	.+6      	; 0x2302 <__mulsf3+0x4e>
    22fc:	82 30       	cpi	r24, 0x02	; 2
    22fe:	51 f4       	brne	.+20     	; 0x2314 <__mulsf3+0x60>
    2300:	04 c0       	rjmp	.+8      	; 0x230a <__mulsf3+0x56>
    2302:	84 30       	cpi	r24, 0x04	; 4
    2304:	29 f4       	brne	.+10     	; 0x2310 <__mulsf3+0x5c>
    2306:	92 30       	cpi	r25, 0x02	; 2
    2308:	81 f4       	brne	.+32     	; 0x232a <__mulsf3+0x76>
    230a:	86 ef       	ldi	r24, 0xF6	; 246
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	c6 c0       	rjmp	.+396    	; 0x249c <__mulsf3+0x1e8>
    2310:	92 30       	cpi	r25, 0x02	; 2
    2312:	49 f4       	brne	.+18     	; 0x2326 <__mulsf3+0x72>
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	9a 85       	ldd	r25, Y+10	; 0x0a
    2318:	8a 89       	ldd	r24, Y+18	; 0x12
    231a:	98 13       	cpse	r25, r24
    231c:	21 e0       	ldi	r18, 0x01	; 1
    231e:	2a 87       	std	Y+10, r18	; 0x0a
    2320:	ce 01       	movw	r24, r28
    2322:	09 96       	adiw	r24, 0x09	; 9
    2324:	bb c0       	rjmp	.+374    	; 0x249c <__mulsf3+0x1e8>
    2326:	82 30       	cpi	r24, 0x02	; 2
    2328:	49 f4       	brne	.+18     	; 0x233c <__mulsf3+0x88>
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	9a 85       	ldd	r25, Y+10	; 0x0a
    232e:	8a 89       	ldd	r24, Y+18	; 0x12
    2330:	98 13       	cpse	r25, r24
    2332:	21 e0       	ldi	r18, 0x01	; 1
    2334:	2a 8b       	std	Y+18, r18	; 0x12
    2336:	ce 01       	movw	r24, r28
    2338:	41 96       	adiw	r24, 0x11	; 17
    233a:	b0 c0       	rjmp	.+352    	; 0x249c <__mulsf3+0x1e8>
    233c:	2d 84       	ldd	r2, Y+13	; 0x0d
    233e:	3e 84       	ldd	r3, Y+14	; 0x0e
    2340:	4f 84       	ldd	r4, Y+15	; 0x0f
    2342:	58 88       	ldd	r5, Y+16	; 0x10
    2344:	6d 88       	ldd	r6, Y+21	; 0x15
    2346:	7e 88       	ldd	r7, Y+22	; 0x16
    2348:	8f 88       	ldd	r8, Y+23	; 0x17
    234a:	98 8c       	ldd	r9, Y+24	; 0x18
    234c:	ee 24       	eor	r14, r14
    234e:	ff 24       	eor	r15, r15
    2350:	87 01       	movw	r16, r14
    2352:	aa 24       	eor	r10, r10
    2354:	bb 24       	eor	r11, r11
    2356:	65 01       	movw	r12, r10
    2358:	40 e0       	ldi	r20, 0x00	; 0
    235a:	50 e0       	ldi	r21, 0x00	; 0
    235c:	60 e0       	ldi	r22, 0x00	; 0
    235e:	70 e0       	ldi	r23, 0x00	; 0
    2360:	e0 e0       	ldi	r30, 0x00	; 0
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	c1 01       	movw	r24, r2
    2366:	81 70       	andi	r24, 0x01	; 1
    2368:	90 70       	andi	r25, 0x00	; 0
    236a:	89 2b       	or	r24, r25
    236c:	e9 f0       	breq	.+58     	; 0x23a8 <__mulsf3+0xf4>
    236e:	e6 0c       	add	r14, r6
    2370:	f7 1c       	adc	r15, r7
    2372:	08 1d       	adc	r16, r8
    2374:	19 1d       	adc	r17, r9
    2376:	9a 01       	movw	r18, r20
    2378:	ab 01       	movw	r20, r22
    237a:	2a 0d       	add	r18, r10
    237c:	3b 1d       	adc	r19, r11
    237e:	4c 1d       	adc	r20, r12
    2380:	5d 1d       	adc	r21, r13
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	a0 e0       	ldi	r26, 0x00	; 0
    2388:	b0 e0       	ldi	r27, 0x00	; 0
    238a:	e6 14       	cp	r14, r6
    238c:	f7 04       	cpc	r15, r7
    238e:	08 05       	cpc	r16, r8
    2390:	19 05       	cpc	r17, r9
    2392:	20 f4       	brcc	.+8      	; 0x239c <__mulsf3+0xe8>
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	a0 e0       	ldi	r26, 0x00	; 0
    239a:	b0 e0       	ldi	r27, 0x00	; 0
    239c:	ba 01       	movw	r22, r20
    239e:	a9 01       	movw	r20, r18
    23a0:	48 0f       	add	r20, r24
    23a2:	59 1f       	adc	r21, r25
    23a4:	6a 1f       	adc	r22, r26
    23a6:	7b 1f       	adc	r23, r27
    23a8:	aa 0c       	add	r10, r10
    23aa:	bb 1c       	adc	r11, r11
    23ac:	cc 1c       	adc	r12, r12
    23ae:	dd 1c       	adc	r13, r13
    23b0:	97 fe       	sbrs	r9, 7
    23b2:	08 c0       	rjmp	.+16     	; 0x23c4 <__mulsf3+0x110>
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	a0 e0       	ldi	r26, 0x00	; 0
    23ba:	b0 e0       	ldi	r27, 0x00	; 0
    23bc:	a8 2a       	or	r10, r24
    23be:	b9 2a       	or	r11, r25
    23c0:	ca 2a       	or	r12, r26
    23c2:	db 2a       	or	r13, r27
    23c4:	31 96       	adiw	r30, 0x01	; 1
    23c6:	e0 32       	cpi	r30, 0x20	; 32
    23c8:	f1 05       	cpc	r31, r1
    23ca:	49 f0       	breq	.+18     	; 0x23de <__mulsf3+0x12a>
    23cc:	66 0c       	add	r6, r6
    23ce:	77 1c       	adc	r7, r7
    23d0:	88 1c       	adc	r8, r8
    23d2:	99 1c       	adc	r9, r9
    23d4:	56 94       	lsr	r5
    23d6:	47 94       	ror	r4
    23d8:	37 94       	ror	r3
    23da:	27 94       	ror	r2
    23dc:	c3 cf       	rjmp	.-122    	; 0x2364 <__mulsf3+0xb0>
    23de:	fa 85       	ldd	r31, Y+10	; 0x0a
    23e0:	ea 89       	ldd	r30, Y+18	; 0x12
    23e2:	2b 89       	ldd	r18, Y+19	; 0x13
    23e4:	3c 89       	ldd	r19, Y+20	; 0x14
    23e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    23e8:	9c 85       	ldd	r25, Y+12	; 0x0c
    23ea:	28 0f       	add	r18, r24
    23ec:	39 1f       	adc	r19, r25
    23ee:	2e 5f       	subi	r18, 0xFE	; 254
    23f0:	3f 4f       	sbci	r19, 0xFF	; 255
    23f2:	17 c0       	rjmp	.+46     	; 0x2422 <__mulsf3+0x16e>
    23f4:	ca 01       	movw	r24, r20
    23f6:	81 70       	andi	r24, 0x01	; 1
    23f8:	90 70       	andi	r25, 0x00	; 0
    23fa:	89 2b       	or	r24, r25
    23fc:	61 f0       	breq	.+24     	; 0x2416 <__mulsf3+0x162>
    23fe:	16 95       	lsr	r17
    2400:	07 95       	ror	r16
    2402:	f7 94       	ror	r15
    2404:	e7 94       	ror	r14
    2406:	80 e0       	ldi	r24, 0x00	; 0
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	a0 e0       	ldi	r26, 0x00	; 0
    240c:	b0 e8       	ldi	r27, 0x80	; 128
    240e:	e8 2a       	or	r14, r24
    2410:	f9 2a       	or	r15, r25
    2412:	0a 2b       	or	r16, r26
    2414:	1b 2b       	or	r17, r27
    2416:	76 95       	lsr	r23
    2418:	67 95       	ror	r22
    241a:	57 95       	ror	r21
    241c:	47 95       	ror	r20
    241e:	2f 5f       	subi	r18, 0xFF	; 255
    2420:	3f 4f       	sbci	r19, 0xFF	; 255
    2422:	77 fd       	sbrc	r23, 7
    2424:	e7 cf       	rjmp	.-50     	; 0x23f4 <__mulsf3+0x140>
    2426:	0c c0       	rjmp	.+24     	; 0x2440 <__mulsf3+0x18c>
    2428:	44 0f       	add	r20, r20
    242a:	55 1f       	adc	r21, r21
    242c:	66 1f       	adc	r22, r22
    242e:	77 1f       	adc	r23, r23
    2430:	17 fd       	sbrc	r17, 7
    2432:	41 60       	ori	r20, 0x01	; 1
    2434:	ee 0c       	add	r14, r14
    2436:	ff 1c       	adc	r15, r15
    2438:	00 1f       	adc	r16, r16
    243a:	11 1f       	adc	r17, r17
    243c:	21 50       	subi	r18, 0x01	; 1
    243e:	30 40       	sbci	r19, 0x00	; 0
    2440:	40 30       	cpi	r20, 0x00	; 0
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	59 07       	cpc	r21, r25
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	69 07       	cpc	r22, r25
    244a:	90 e4       	ldi	r25, 0x40	; 64
    244c:	79 07       	cpc	r23, r25
    244e:	60 f3       	brcs	.-40     	; 0x2428 <__mulsf3+0x174>
    2450:	2b 8f       	std	Y+27, r18	; 0x1b
    2452:	3c 8f       	std	Y+28, r19	; 0x1c
    2454:	db 01       	movw	r26, r22
    2456:	ca 01       	movw	r24, r20
    2458:	8f 77       	andi	r24, 0x7F	; 127
    245a:	90 70       	andi	r25, 0x00	; 0
    245c:	a0 70       	andi	r26, 0x00	; 0
    245e:	b0 70       	andi	r27, 0x00	; 0
    2460:	80 34       	cpi	r24, 0x40	; 64
    2462:	91 05       	cpc	r25, r1
    2464:	a1 05       	cpc	r26, r1
    2466:	b1 05       	cpc	r27, r1
    2468:	61 f4       	brne	.+24     	; 0x2482 <__mulsf3+0x1ce>
    246a:	47 fd       	sbrc	r20, 7
    246c:	0a c0       	rjmp	.+20     	; 0x2482 <__mulsf3+0x1ce>
    246e:	e1 14       	cp	r14, r1
    2470:	f1 04       	cpc	r15, r1
    2472:	01 05       	cpc	r16, r1
    2474:	11 05       	cpc	r17, r1
    2476:	29 f0       	breq	.+10     	; 0x2482 <__mulsf3+0x1ce>
    2478:	40 5c       	subi	r20, 0xC0	; 192
    247a:	5f 4f       	sbci	r21, 0xFF	; 255
    247c:	6f 4f       	sbci	r22, 0xFF	; 255
    247e:	7f 4f       	sbci	r23, 0xFF	; 255
    2480:	40 78       	andi	r20, 0x80	; 128
    2482:	1a 8e       	std	Y+26, r1	; 0x1a
    2484:	fe 17       	cp	r31, r30
    2486:	11 f0       	breq	.+4      	; 0x248c <__mulsf3+0x1d8>
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	8a 8f       	std	Y+26, r24	; 0x1a
    248c:	4d 8f       	std	Y+29, r20	; 0x1d
    248e:	5e 8f       	std	Y+30, r21	; 0x1e
    2490:	6f 8f       	std	Y+31, r22	; 0x1f
    2492:	78 a3       	std	Y+32, r23	; 0x20
    2494:	83 e0       	ldi	r24, 0x03	; 3
    2496:	89 8f       	std	Y+25, r24	; 0x19
    2498:	ce 01       	movw	r24, r28
    249a:	49 96       	adiw	r24, 0x19	; 25
    249c:	0e 94 89 15 	call	0x2b12	; 0x2b12 <__pack_f>
    24a0:	a0 96       	adiw	r28, 0x20	; 32
    24a2:	e2 e1       	ldi	r30, 0x12	; 18
    24a4:	0c 94 86 3a 	jmp	0x750c	; 0x750c <__epilogue_restores__>

000024a8 <__divsf3>:
    24a8:	a8 e1       	ldi	r26, 0x18	; 24
    24aa:	b0 e0       	ldi	r27, 0x00	; 0
    24ac:	ea e5       	ldi	r30, 0x5A	; 90
    24ae:	f2 e1       	ldi	r31, 0x12	; 18
    24b0:	0c 94 72 3a 	jmp	0x74e4	; 0x74e4 <__prologue_saves__+0x10>
    24b4:	69 83       	std	Y+1, r22	; 0x01
    24b6:	7a 83       	std	Y+2, r23	; 0x02
    24b8:	8b 83       	std	Y+3, r24	; 0x03
    24ba:	9c 83       	std	Y+4, r25	; 0x04
    24bc:	2d 83       	std	Y+5, r18	; 0x05
    24be:	3e 83       	std	Y+6, r19	; 0x06
    24c0:	4f 83       	std	Y+7, r20	; 0x07
    24c2:	58 87       	std	Y+8, r21	; 0x08
    24c4:	b9 e0       	ldi	r27, 0x09	; 9
    24c6:	eb 2e       	mov	r14, r27
    24c8:	f1 2c       	mov	r15, r1
    24ca:	ec 0e       	add	r14, r28
    24cc:	fd 1e       	adc	r15, r29
    24ce:	ce 01       	movw	r24, r28
    24d0:	01 96       	adiw	r24, 0x01	; 1
    24d2:	b7 01       	movw	r22, r14
    24d4:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <__unpack_f>
    24d8:	8e 01       	movw	r16, r28
    24da:	0f 5e       	subi	r16, 0xEF	; 239
    24dc:	1f 4f       	sbci	r17, 0xFF	; 255
    24de:	ce 01       	movw	r24, r28
    24e0:	05 96       	adiw	r24, 0x05	; 5
    24e2:	b8 01       	movw	r22, r16
    24e4:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <__unpack_f>
    24e8:	29 85       	ldd	r18, Y+9	; 0x09
    24ea:	22 30       	cpi	r18, 0x02	; 2
    24ec:	08 f4       	brcc	.+2      	; 0x24f0 <__divsf3+0x48>
    24ee:	7e c0       	rjmp	.+252    	; 0x25ec <__divsf3+0x144>
    24f0:	39 89       	ldd	r19, Y+17	; 0x11
    24f2:	32 30       	cpi	r19, 0x02	; 2
    24f4:	10 f4       	brcc	.+4      	; 0x24fa <__divsf3+0x52>
    24f6:	b8 01       	movw	r22, r16
    24f8:	7c c0       	rjmp	.+248    	; 0x25f2 <__divsf3+0x14a>
    24fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    24fc:	9a 89       	ldd	r25, Y+18	; 0x12
    24fe:	89 27       	eor	r24, r25
    2500:	8a 87       	std	Y+10, r24	; 0x0a
    2502:	24 30       	cpi	r18, 0x04	; 4
    2504:	11 f0       	breq	.+4      	; 0x250a <__divsf3+0x62>
    2506:	22 30       	cpi	r18, 0x02	; 2
    2508:	31 f4       	brne	.+12     	; 0x2516 <__divsf3+0x6e>
    250a:	23 17       	cp	r18, r19
    250c:	09 f0       	breq	.+2      	; 0x2510 <__divsf3+0x68>
    250e:	6e c0       	rjmp	.+220    	; 0x25ec <__divsf3+0x144>
    2510:	66 ef       	ldi	r22, 0xF6	; 246
    2512:	70 e0       	ldi	r23, 0x00	; 0
    2514:	6e c0       	rjmp	.+220    	; 0x25f2 <__divsf3+0x14a>
    2516:	34 30       	cpi	r19, 0x04	; 4
    2518:	39 f4       	brne	.+14     	; 0x2528 <__divsf3+0x80>
    251a:	1d 86       	std	Y+13, r1	; 0x0d
    251c:	1e 86       	std	Y+14, r1	; 0x0e
    251e:	1f 86       	std	Y+15, r1	; 0x0f
    2520:	18 8a       	std	Y+16, r1	; 0x10
    2522:	1c 86       	std	Y+12, r1	; 0x0c
    2524:	1b 86       	std	Y+11, r1	; 0x0b
    2526:	04 c0       	rjmp	.+8      	; 0x2530 <__divsf3+0x88>
    2528:	32 30       	cpi	r19, 0x02	; 2
    252a:	21 f4       	brne	.+8      	; 0x2534 <__divsf3+0x8c>
    252c:	84 e0       	ldi	r24, 0x04	; 4
    252e:	89 87       	std	Y+9, r24	; 0x09
    2530:	b7 01       	movw	r22, r14
    2532:	5f c0       	rjmp	.+190    	; 0x25f2 <__divsf3+0x14a>
    2534:	2b 85       	ldd	r18, Y+11	; 0x0b
    2536:	3c 85       	ldd	r19, Y+12	; 0x0c
    2538:	8b 89       	ldd	r24, Y+19	; 0x13
    253a:	9c 89       	ldd	r25, Y+20	; 0x14
    253c:	28 1b       	sub	r18, r24
    253e:	39 0b       	sbc	r19, r25
    2540:	3c 87       	std	Y+12, r19	; 0x0c
    2542:	2b 87       	std	Y+11, r18	; 0x0b
    2544:	ed 84       	ldd	r14, Y+13	; 0x0d
    2546:	fe 84       	ldd	r15, Y+14	; 0x0e
    2548:	0f 85       	ldd	r16, Y+15	; 0x0f
    254a:	18 89       	ldd	r17, Y+16	; 0x10
    254c:	ad 88       	ldd	r10, Y+21	; 0x15
    254e:	be 88       	ldd	r11, Y+22	; 0x16
    2550:	cf 88       	ldd	r12, Y+23	; 0x17
    2552:	d8 8c       	ldd	r13, Y+24	; 0x18
    2554:	ea 14       	cp	r14, r10
    2556:	fb 04       	cpc	r15, r11
    2558:	0c 05       	cpc	r16, r12
    255a:	1d 05       	cpc	r17, r13
    255c:	40 f4       	brcc	.+16     	; 0x256e <__divsf3+0xc6>
    255e:	ee 0c       	add	r14, r14
    2560:	ff 1c       	adc	r15, r15
    2562:	00 1f       	adc	r16, r16
    2564:	11 1f       	adc	r17, r17
    2566:	21 50       	subi	r18, 0x01	; 1
    2568:	30 40       	sbci	r19, 0x00	; 0
    256a:	3c 87       	std	Y+12, r19	; 0x0c
    256c:	2b 87       	std	Y+11, r18	; 0x0b
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	40 e0       	ldi	r20, 0x00	; 0
    2574:	50 e0       	ldi	r21, 0x00	; 0
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	a0 e0       	ldi	r26, 0x00	; 0
    257c:	b0 e4       	ldi	r27, 0x40	; 64
    257e:	60 e0       	ldi	r22, 0x00	; 0
    2580:	70 e0       	ldi	r23, 0x00	; 0
    2582:	ea 14       	cp	r14, r10
    2584:	fb 04       	cpc	r15, r11
    2586:	0c 05       	cpc	r16, r12
    2588:	1d 05       	cpc	r17, r13
    258a:	40 f0       	brcs	.+16     	; 0x259c <__divsf3+0xf4>
    258c:	28 2b       	or	r18, r24
    258e:	39 2b       	or	r19, r25
    2590:	4a 2b       	or	r20, r26
    2592:	5b 2b       	or	r21, r27
    2594:	ea 18       	sub	r14, r10
    2596:	fb 08       	sbc	r15, r11
    2598:	0c 09       	sbc	r16, r12
    259a:	1d 09       	sbc	r17, r13
    259c:	b6 95       	lsr	r27
    259e:	a7 95       	ror	r26
    25a0:	97 95       	ror	r25
    25a2:	87 95       	ror	r24
    25a4:	ee 0c       	add	r14, r14
    25a6:	ff 1c       	adc	r15, r15
    25a8:	00 1f       	adc	r16, r16
    25aa:	11 1f       	adc	r17, r17
    25ac:	6f 5f       	subi	r22, 0xFF	; 255
    25ae:	7f 4f       	sbci	r23, 0xFF	; 255
    25b0:	6f 31       	cpi	r22, 0x1F	; 31
    25b2:	71 05       	cpc	r23, r1
    25b4:	31 f7       	brne	.-52     	; 0x2582 <__divsf3+0xda>
    25b6:	da 01       	movw	r26, r20
    25b8:	c9 01       	movw	r24, r18
    25ba:	8f 77       	andi	r24, 0x7F	; 127
    25bc:	90 70       	andi	r25, 0x00	; 0
    25be:	a0 70       	andi	r26, 0x00	; 0
    25c0:	b0 70       	andi	r27, 0x00	; 0
    25c2:	80 34       	cpi	r24, 0x40	; 64
    25c4:	91 05       	cpc	r25, r1
    25c6:	a1 05       	cpc	r26, r1
    25c8:	b1 05       	cpc	r27, r1
    25ca:	61 f4       	brne	.+24     	; 0x25e4 <__divsf3+0x13c>
    25cc:	27 fd       	sbrc	r18, 7
    25ce:	0a c0       	rjmp	.+20     	; 0x25e4 <__divsf3+0x13c>
    25d0:	e1 14       	cp	r14, r1
    25d2:	f1 04       	cpc	r15, r1
    25d4:	01 05       	cpc	r16, r1
    25d6:	11 05       	cpc	r17, r1
    25d8:	29 f0       	breq	.+10     	; 0x25e4 <__divsf3+0x13c>
    25da:	20 5c       	subi	r18, 0xC0	; 192
    25dc:	3f 4f       	sbci	r19, 0xFF	; 255
    25de:	4f 4f       	sbci	r20, 0xFF	; 255
    25e0:	5f 4f       	sbci	r21, 0xFF	; 255
    25e2:	20 78       	andi	r18, 0x80	; 128
    25e4:	2d 87       	std	Y+13, r18	; 0x0d
    25e6:	3e 87       	std	Y+14, r19	; 0x0e
    25e8:	4f 87       	std	Y+15, r20	; 0x0f
    25ea:	58 8b       	std	Y+16, r21	; 0x10
    25ec:	be 01       	movw	r22, r28
    25ee:	67 5f       	subi	r22, 0xF7	; 247
    25f0:	7f 4f       	sbci	r23, 0xFF	; 255
    25f2:	cb 01       	movw	r24, r22
    25f4:	0e 94 89 15 	call	0x2b12	; 0x2b12 <__pack_f>
    25f8:	68 96       	adiw	r28, 0x18	; 24
    25fa:	ea e0       	ldi	r30, 0x0A	; 10
    25fc:	0c 94 8e 3a 	jmp	0x751c	; 0x751c <__epilogue_restores__+0x10>

00002600 <__gtsf2>:
    2600:	a8 e1       	ldi	r26, 0x18	; 24
    2602:	b0 e0       	ldi	r27, 0x00	; 0
    2604:	e6 e0       	ldi	r30, 0x06	; 6
    2606:	f3 e1       	ldi	r31, 0x13	; 19
    2608:	0c 94 76 3a 	jmp	0x74ec	; 0x74ec <__prologue_saves__+0x18>
    260c:	69 83       	std	Y+1, r22	; 0x01
    260e:	7a 83       	std	Y+2, r23	; 0x02
    2610:	8b 83       	std	Y+3, r24	; 0x03
    2612:	9c 83       	std	Y+4, r25	; 0x04
    2614:	2d 83       	std	Y+5, r18	; 0x05
    2616:	3e 83       	std	Y+6, r19	; 0x06
    2618:	4f 83       	std	Y+7, r20	; 0x07
    261a:	58 87       	std	Y+8, r21	; 0x08
    261c:	89 e0       	ldi	r24, 0x09	; 9
    261e:	e8 2e       	mov	r14, r24
    2620:	f1 2c       	mov	r15, r1
    2622:	ec 0e       	add	r14, r28
    2624:	fd 1e       	adc	r15, r29
    2626:	ce 01       	movw	r24, r28
    2628:	01 96       	adiw	r24, 0x01	; 1
    262a:	b7 01       	movw	r22, r14
    262c:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <__unpack_f>
    2630:	8e 01       	movw	r16, r28
    2632:	0f 5e       	subi	r16, 0xEF	; 239
    2634:	1f 4f       	sbci	r17, 0xFF	; 255
    2636:	ce 01       	movw	r24, r28
    2638:	05 96       	adiw	r24, 0x05	; 5
    263a:	b8 01       	movw	r22, r16
    263c:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <__unpack_f>
    2640:	89 85       	ldd	r24, Y+9	; 0x09
    2642:	82 30       	cpi	r24, 0x02	; 2
    2644:	40 f0       	brcs	.+16     	; 0x2656 <__gtsf2+0x56>
    2646:	89 89       	ldd	r24, Y+17	; 0x11
    2648:	82 30       	cpi	r24, 0x02	; 2
    264a:	28 f0       	brcs	.+10     	; 0x2656 <__gtsf2+0x56>
    264c:	c7 01       	movw	r24, r14
    264e:	b8 01       	movw	r22, r16
    2650:	0e 94 d6 16 	call	0x2dac	; 0x2dac <__fpcmp_parts_f>
    2654:	01 c0       	rjmp	.+2      	; 0x2658 <__gtsf2+0x58>
    2656:	8f ef       	ldi	r24, 0xFF	; 255
    2658:	68 96       	adiw	r28, 0x18	; 24
    265a:	e6 e0       	ldi	r30, 0x06	; 6
    265c:	0c 94 92 3a 	jmp	0x7524	; 0x7524 <__epilogue_restores__+0x18>

00002660 <__gesf2>:
    2660:	a8 e1       	ldi	r26, 0x18	; 24
    2662:	b0 e0       	ldi	r27, 0x00	; 0
    2664:	e6 e3       	ldi	r30, 0x36	; 54
    2666:	f3 e1       	ldi	r31, 0x13	; 19
    2668:	0c 94 76 3a 	jmp	0x74ec	; 0x74ec <__prologue_saves__+0x18>
    266c:	69 83       	std	Y+1, r22	; 0x01
    266e:	7a 83       	std	Y+2, r23	; 0x02
    2670:	8b 83       	std	Y+3, r24	; 0x03
    2672:	9c 83       	std	Y+4, r25	; 0x04
    2674:	2d 83       	std	Y+5, r18	; 0x05
    2676:	3e 83       	std	Y+6, r19	; 0x06
    2678:	4f 83       	std	Y+7, r20	; 0x07
    267a:	58 87       	std	Y+8, r21	; 0x08
    267c:	89 e0       	ldi	r24, 0x09	; 9
    267e:	e8 2e       	mov	r14, r24
    2680:	f1 2c       	mov	r15, r1
    2682:	ec 0e       	add	r14, r28
    2684:	fd 1e       	adc	r15, r29
    2686:	ce 01       	movw	r24, r28
    2688:	01 96       	adiw	r24, 0x01	; 1
    268a:	b7 01       	movw	r22, r14
    268c:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <__unpack_f>
    2690:	8e 01       	movw	r16, r28
    2692:	0f 5e       	subi	r16, 0xEF	; 239
    2694:	1f 4f       	sbci	r17, 0xFF	; 255
    2696:	ce 01       	movw	r24, r28
    2698:	05 96       	adiw	r24, 0x05	; 5
    269a:	b8 01       	movw	r22, r16
    269c:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <__unpack_f>
    26a0:	89 85       	ldd	r24, Y+9	; 0x09
    26a2:	82 30       	cpi	r24, 0x02	; 2
    26a4:	40 f0       	brcs	.+16     	; 0x26b6 <__gesf2+0x56>
    26a6:	89 89       	ldd	r24, Y+17	; 0x11
    26a8:	82 30       	cpi	r24, 0x02	; 2
    26aa:	28 f0       	brcs	.+10     	; 0x26b6 <__gesf2+0x56>
    26ac:	c7 01       	movw	r24, r14
    26ae:	b8 01       	movw	r22, r16
    26b0:	0e 94 d6 16 	call	0x2dac	; 0x2dac <__fpcmp_parts_f>
    26b4:	01 c0       	rjmp	.+2      	; 0x26b8 <__gesf2+0x58>
    26b6:	8f ef       	ldi	r24, 0xFF	; 255
    26b8:	68 96       	adiw	r28, 0x18	; 24
    26ba:	e6 e0       	ldi	r30, 0x06	; 6
    26bc:	0c 94 92 3a 	jmp	0x7524	; 0x7524 <__epilogue_restores__+0x18>

000026c0 <__ltsf2>:
    26c0:	a8 e1       	ldi	r26, 0x18	; 24
    26c2:	b0 e0       	ldi	r27, 0x00	; 0
    26c4:	e6 e6       	ldi	r30, 0x66	; 102
    26c6:	f3 e1       	ldi	r31, 0x13	; 19
    26c8:	0c 94 76 3a 	jmp	0x74ec	; 0x74ec <__prologue_saves__+0x18>
    26cc:	69 83       	std	Y+1, r22	; 0x01
    26ce:	7a 83       	std	Y+2, r23	; 0x02
    26d0:	8b 83       	std	Y+3, r24	; 0x03
    26d2:	9c 83       	std	Y+4, r25	; 0x04
    26d4:	2d 83       	std	Y+5, r18	; 0x05
    26d6:	3e 83       	std	Y+6, r19	; 0x06
    26d8:	4f 83       	std	Y+7, r20	; 0x07
    26da:	58 87       	std	Y+8, r21	; 0x08
    26dc:	89 e0       	ldi	r24, 0x09	; 9
    26de:	e8 2e       	mov	r14, r24
    26e0:	f1 2c       	mov	r15, r1
    26e2:	ec 0e       	add	r14, r28
    26e4:	fd 1e       	adc	r15, r29
    26e6:	ce 01       	movw	r24, r28
    26e8:	01 96       	adiw	r24, 0x01	; 1
    26ea:	b7 01       	movw	r22, r14
    26ec:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <__unpack_f>
    26f0:	8e 01       	movw	r16, r28
    26f2:	0f 5e       	subi	r16, 0xEF	; 239
    26f4:	1f 4f       	sbci	r17, 0xFF	; 255
    26f6:	ce 01       	movw	r24, r28
    26f8:	05 96       	adiw	r24, 0x05	; 5
    26fa:	b8 01       	movw	r22, r16
    26fc:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <__unpack_f>
    2700:	89 85       	ldd	r24, Y+9	; 0x09
    2702:	82 30       	cpi	r24, 0x02	; 2
    2704:	40 f0       	brcs	.+16     	; 0x2716 <__ltsf2+0x56>
    2706:	89 89       	ldd	r24, Y+17	; 0x11
    2708:	82 30       	cpi	r24, 0x02	; 2
    270a:	28 f0       	brcs	.+10     	; 0x2716 <__ltsf2+0x56>
    270c:	c7 01       	movw	r24, r14
    270e:	b8 01       	movw	r22, r16
    2710:	0e 94 d6 16 	call	0x2dac	; 0x2dac <__fpcmp_parts_f>
    2714:	01 c0       	rjmp	.+2      	; 0x2718 <__ltsf2+0x58>
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	68 96       	adiw	r28, 0x18	; 24
    271a:	e6 e0       	ldi	r30, 0x06	; 6
    271c:	0c 94 92 3a 	jmp	0x7524	; 0x7524 <__epilogue_restores__+0x18>

00002720 <__floatsisf>:
    2720:	a8 e0       	ldi	r26, 0x08	; 8
    2722:	b0 e0       	ldi	r27, 0x00	; 0
    2724:	e6 e9       	ldi	r30, 0x96	; 150
    2726:	f3 e1       	ldi	r31, 0x13	; 19
    2728:	0c 94 73 3a 	jmp	0x74e6	; 0x74e6 <__prologue_saves__+0x12>
    272c:	9b 01       	movw	r18, r22
    272e:	ac 01       	movw	r20, r24
    2730:	83 e0       	ldi	r24, 0x03	; 3
    2732:	89 83       	std	Y+1, r24	; 0x01
    2734:	da 01       	movw	r26, r20
    2736:	c9 01       	movw	r24, r18
    2738:	88 27       	eor	r24, r24
    273a:	b7 fd       	sbrc	r27, 7
    273c:	83 95       	inc	r24
    273e:	99 27       	eor	r25, r25
    2740:	aa 27       	eor	r26, r26
    2742:	bb 27       	eor	r27, r27
    2744:	b8 2e       	mov	r11, r24
    2746:	21 15       	cp	r18, r1
    2748:	31 05       	cpc	r19, r1
    274a:	41 05       	cpc	r20, r1
    274c:	51 05       	cpc	r21, r1
    274e:	19 f4       	brne	.+6      	; 0x2756 <__floatsisf+0x36>
    2750:	82 e0       	ldi	r24, 0x02	; 2
    2752:	89 83       	std	Y+1, r24	; 0x01
    2754:	3a c0       	rjmp	.+116    	; 0x27ca <__floatsisf+0xaa>
    2756:	88 23       	and	r24, r24
    2758:	a9 f0       	breq	.+42     	; 0x2784 <__floatsisf+0x64>
    275a:	20 30       	cpi	r18, 0x00	; 0
    275c:	80 e0       	ldi	r24, 0x00	; 0
    275e:	38 07       	cpc	r19, r24
    2760:	80 e0       	ldi	r24, 0x00	; 0
    2762:	48 07       	cpc	r20, r24
    2764:	80 e8       	ldi	r24, 0x80	; 128
    2766:	58 07       	cpc	r21, r24
    2768:	29 f4       	brne	.+10     	; 0x2774 <__floatsisf+0x54>
    276a:	60 e0       	ldi	r22, 0x00	; 0
    276c:	70 e0       	ldi	r23, 0x00	; 0
    276e:	80 e0       	ldi	r24, 0x00	; 0
    2770:	9f ec       	ldi	r25, 0xCF	; 207
    2772:	30 c0       	rjmp	.+96     	; 0x27d4 <__floatsisf+0xb4>
    2774:	ee 24       	eor	r14, r14
    2776:	ff 24       	eor	r15, r15
    2778:	87 01       	movw	r16, r14
    277a:	e2 1a       	sub	r14, r18
    277c:	f3 0a       	sbc	r15, r19
    277e:	04 0b       	sbc	r16, r20
    2780:	15 0b       	sbc	r17, r21
    2782:	02 c0       	rjmp	.+4      	; 0x2788 <__floatsisf+0x68>
    2784:	79 01       	movw	r14, r18
    2786:	8a 01       	movw	r16, r20
    2788:	8e e1       	ldi	r24, 0x1E	; 30
    278a:	c8 2e       	mov	r12, r24
    278c:	d1 2c       	mov	r13, r1
    278e:	dc 82       	std	Y+4, r13	; 0x04
    2790:	cb 82       	std	Y+3, r12	; 0x03
    2792:	ed 82       	std	Y+5, r14	; 0x05
    2794:	fe 82       	std	Y+6, r15	; 0x06
    2796:	0f 83       	std	Y+7, r16	; 0x07
    2798:	18 87       	std	Y+8, r17	; 0x08
    279a:	c8 01       	movw	r24, r16
    279c:	b7 01       	movw	r22, r14
    279e:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <__clzsi2>
    27a2:	01 97       	sbiw	r24, 0x01	; 1
    27a4:	18 16       	cp	r1, r24
    27a6:	19 06       	cpc	r1, r25
    27a8:	84 f4       	brge	.+32     	; 0x27ca <__floatsisf+0xaa>
    27aa:	08 2e       	mov	r0, r24
    27ac:	04 c0       	rjmp	.+8      	; 0x27b6 <__floatsisf+0x96>
    27ae:	ee 0c       	add	r14, r14
    27b0:	ff 1c       	adc	r15, r15
    27b2:	00 1f       	adc	r16, r16
    27b4:	11 1f       	adc	r17, r17
    27b6:	0a 94       	dec	r0
    27b8:	d2 f7       	brpl	.-12     	; 0x27ae <__floatsisf+0x8e>
    27ba:	ed 82       	std	Y+5, r14	; 0x05
    27bc:	fe 82       	std	Y+6, r15	; 0x06
    27be:	0f 83       	std	Y+7, r16	; 0x07
    27c0:	18 87       	std	Y+8, r17	; 0x08
    27c2:	c8 1a       	sub	r12, r24
    27c4:	d9 0a       	sbc	r13, r25
    27c6:	dc 82       	std	Y+4, r13	; 0x04
    27c8:	cb 82       	std	Y+3, r12	; 0x03
    27ca:	ba 82       	std	Y+2, r11	; 0x02
    27cc:	ce 01       	movw	r24, r28
    27ce:	01 96       	adiw	r24, 0x01	; 1
    27d0:	0e 94 89 15 	call	0x2b12	; 0x2b12 <__pack_f>
    27d4:	28 96       	adiw	r28, 0x08	; 8
    27d6:	e9 e0       	ldi	r30, 0x09	; 9
    27d8:	0c 94 8f 3a 	jmp	0x751e	; 0x751e <__epilogue_restores__+0x12>

000027dc <__fixsfsi>:
    27dc:	ac e0       	ldi	r26, 0x0C	; 12
    27de:	b0 e0       	ldi	r27, 0x00	; 0
    27e0:	e4 ef       	ldi	r30, 0xF4	; 244
    27e2:	f3 e1       	ldi	r31, 0x13	; 19
    27e4:	0c 94 7a 3a 	jmp	0x74f4	; 0x74f4 <__prologue_saves__+0x20>
    27e8:	69 83       	std	Y+1, r22	; 0x01
    27ea:	7a 83       	std	Y+2, r23	; 0x02
    27ec:	8b 83       	std	Y+3, r24	; 0x03
    27ee:	9c 83       	std	Y+4, r25	; 0x04
    27f0:	ce 01       	movw	r24, r28
    27f2:	01 96       	adiw	r24, 0x01	; 1
    27f4:	be 01       	movw	r22, r28
    27f6:	6b 5f       	subi	r22, 0xFB	; 251
    27f8:	7f 4f       	sbci	r23, 0xFF	; 255
    27fa:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <__unpack_f>
    27fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2800:	82 30       	cpi	r24, 0x02	; 2
    2802:	61 f1       	breq	.+88     	; 0x285c <__fixsfsi+0x80>
    2804:	82 30       	cpi	r24, 0x02	; 2
    2806:	50 f1       	brcs	.+84     	; 0x285c <__fixsfsi+0x80>
    2808:	84 30       	cpi	r24, 0x04	; 4
    280a:	21 f4       	brne	.+8      	; 0x2814 <__fixsfsi+0x38>
    280c:	8e 81       	ldd	r24, Y+6	; 0x06
    280e:	88 23       	and	r24, r24
    2810:	51 f1       	breq	.+84     	; 0x2866 <__fixsfsi+0x8a>
    2812:	2e c0       	rjmp	.+92     	; 0x2870 <__fixsfsi+0x94>
    2814:	2f 81       	ldd	r18, Y+7	; 0x07
    2816:	38 85       	ldd	r19, Y+8	; 0x08
    2818:	37 fd       	sbrc	r19, 7
    281a:	20 c0       	rjmp	.+64     	; 0x285c <__fixsfsi+0x80>
    281c:	6e 81       	ldd	r22, Y+6	; 0x06
    281e:	2f 31       	cpi	r18, 0x1F	; 31
    2820:	31 05       	cpc	r19, r1
    2822:	1c f0       	brlt	.+6      	; 0x282a <__fixsfsi+0x4e>
    2824:	66 23       	and	r22, r22
    2826:	f9 f0       	breq	.+62     	; 0x2866 <__fixsfsi+0x8a>
    2828:	23 c0       	rjmp	.+70     	; 0x2870 <__fixsfsi+0x94>
    282a:	8e e1       	ldi	r24, 0x1E	; 30
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	82 1b       	sub	r24, r18
    2830:	93 0b       	sbc	r25, r19
    2832:	29 85       	ldd	r18, Y+9	; 0x09
    2834:	3a 85       	ldd	r19, Y+10	; 0x0a
    2836:	4b 85       	ldd	r20, Y+11	; 0x0b
    2838:	5c 85       	ldd	r21, Y+12	; 0x0c
    283a:	04 c0       	rjmp	.+8      	; 0x2844 <__fixsfsi+0x68>
    283c:	56 95       	lsr	r21
    283e:	47 95       	ror	r20
    2840:	37 95       	ror	r19
    2842:	27 95       	ror	r18
    2844:	8a 95       	dec	r24
    2846:	d2 f7       	brpl	.-12     	; 0x283c <__fixsfsi+0x60>
    2848:	66 23       	and	r22, r22
    284a:	b1 f0       	breq	.+44     	; 0x2878 <__fixsfsi+0x9c>
    284c:	50 95       	com	r21
    284e:	40 95       	com	r20
    2850:	30 95       	com	r19
    2852:	21 95       	neg	r18
    2854:	3f 4f       	sbci	r19, 0xFF	; 255
    2856:	4f 4f       	sbci	r20, 0xFF	; 255
    2858:	5f 4f       	sbci	r21, 0xFF	; 255
    285a:	0e c0       	rjmp	.+28     	; 0x2878 <__fixsfsi+0x9c>
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	40 e0       	ldi	r20, 0x00	; 0
    2862:	50 e0       	ldi	r21, 0x00	; 0
    2864:	09 c0       	rjmp	.+18     	; 0x2878 <__fixsfsi+0x9c>
    2866:	2f ef       	ldi	r18, 0xFF	; 255
    2868:	3f ef       	ldi	r19, 0xFF	; 255
    286a:	4f ef       	ldi	r20, 0xFF	; 255
    286c:	5f e7       	ldi	r21, 0x7F	; 127
    286e:	04 c0       	rjmp	.+8      	; 0x2878 <__fixsfsi+0x9c>
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	40 e0       	ldi	r20, 0x00	; 0
    2876:	50 e8       	ldi	r21, 0x80	; 128
    2878:	b9 01       	movw	r22, r18
    287a:	ca 01       	movw	r24, r20
    287c:	2c 96       	adiw	r28, 0x0c	; 12
    287e:	e2 e0       	ldi	r30, 0x02	; 2
    2880:	0c 94 96 3a 	jmp	0x752c	; 0x752c <__epilogue_restores__+0x20>

00002884 <__floatunsisf>:
    2884:	a8 e0       	ldi	r26, 0x08	; 8
    2886:	b0 e0       	ldi	r27, 0x00	; 0
    2888:	e8 e4       	ldi	r30, 0x48	; 72
    288a:	f4 e1       	ldi	r31, 0x14	; 20
    288c:	0c 94 72 3a 	jmp	0x74e4	; 0x74e4 <__prologue_saves__+0x10>
    2890:	7b 01       	movw	r14, r22
    2892:	8c 01       	movw	r16, r24
    2894:	61 15       	cp	r22, r1
    2896:	71 05       	cpc	r23, r1
    2898:	81 05       	cpc	r24, r1
    289a:	91 05       	cpc	r25, r1
    289c:	19 f4       	brne	.+6      	; 0x28a4 <__floatunsisf+0x20>
    289e:	82 e0       	ldi	r24, 0x02	; 2
    28a0:	89 83       	std	Y+1, r24	; 0x01
    28a2:	60 c0       	rjmp	.+192    	; 0x2964 <__floatunsisf+0xe0>
    28a4:	83 e0       	ldi	r24, 0x03	; 3
    28a6:	89 83       	std	Y+1, r24	; 0x01
    28a8:	8e e1       	ldi	r24, 0x1E	; 30
    28aa:	c8 2e       	mov	r12, r24
    28ac:	d1 2c       	mov	r13, r1
    28ae:	dc 82       	std	Y+4, r13	; 0x04
    28b0:	cb 82       	std	Y+3, r12	; 0x03
    28b2:	ed 82       	std	Y+5, r14	; 0x05
    28b4:	fe 82       	std	Y+6, r15	; 0x06
    28b6:	0f 83       	std	Y+7, r16	; 0x07
    28b8:	18 87       	std	Y+8, r17	; 0x08
    28ba:	c8 01       	movw	r24, r16
    28bc:	b7 01       	movw	r22, r14
    28be:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <__clzsi2>
    28c2:	fc 01       	movw	r30, r24
    28c4:	31 97       	sbiw	r30, 0x01	; 1
    28c6:	f7 ff       	sbrs	r31, 7
    28c8:	3b c0       	rjmp	.+118    	; 0x2940 <__floatunsisf+0xbc>
    28ca:	22 27       	eor	r18, r18
    28cc:	33 27       	eor	r19, r19
    28ce:	2e 1b       	sub	r18, r30
    28d0:	3f 0b       	sbc	r19, r31
    28d2:	57 01       	movw	r10, r14
    28d4:	68 01       	movw	r12, r16
    28d6:	02 2e       	mov	r0, r18
    28d8:	04 c0       	rjmp	.+8      	; 0x28e2 <__floatunsisf+0x5e>
    28da:	d6 94       	lsr	r13
    28dc:	c7 94       	ror	r12
    28de:	b7 94       	ror	r11
    28e0:	a7 94       	ror	r10
    28e2:	0a 94       	dec	r0
    28e4:	d2 f7       	brpl	.-12     	; 0x28da <__floatunsisf+0x56>
    28e6:	40 e0       	ldi	r20, 0x00	; 0
    28e8:	50 e0       	ldi	r21, 0x00	; 0
    28ea:	60 e0       	ldi	r22, 0x00	; 0
    28ec:	70 e0       	ldi	r23, 0x00	; 0
    28ee:	81 e0       	ldi	r24, 0x01	; 1
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	a0 e0       	ldi	r26, 0x00	; 0
    28f4:	b0 e0       	ldi	r27, 0x00	; 0
    28f6:	04 c0       	rjmp	.+8      	; 0x2900 <__floatunsisf+0x7c>
    28f8:	88 0f       	add	r24, r24
    28fa:	99 1f       	adc	r25, r25
    28fc:	aa 1f       	adc	r26, r26
    28fe:	bb 1f       	adc	r27, r27
    2900:	2a 95       	dec	r18
    2902:	d2 f7       	brpl	.-12     	; 0x28f8 <__floatunsisf+0x74>
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	a1 09       	sbc	r26, r1
    2908:	b1 09       	sbc	r27, r1
    290a:	8e 21       	and	r24, r14
    290c:	9f 21       	and	r25, r15
    290e:	a0 23       	and	r26, r16
    2910:	b1 23       	and	r27, r17
    2912:	00 97       	sbiw	r24, 0x00	; 0
    2914:	a1 05       	cpc	r26, r1
    2916:	b1 05       	cpc	r27, r1
    2918:	21 f0       	breq	.+8      	; 0x2922 <__floatunsisf+0x9e>
    291a:	41 e0       	ldi	r20, 0x01	; 1
    291c:	50 e0       	ldi	r21, 0x00	; 0
    291e:	60 e0       	ldi	r22, 0x00	; 0
    2920:	70 e0       	ldi	r23, 0x00	; 0
    2922:	4a 29       	or	r20, r10
    2924:	5b 29       	or	r21, r11
    2926:	6c 29       	or	r22, r12
    2928:	7d 29       	or	r23, r13
    292a:	4d 83       	std	Y+5, r20	; 0x05
    292c:	5e 83       	std	Y+6, r21	; 0x06
    292e:	6f 83       	std	Y+7, r22	; 0x07
    2930:	78 87       	std	Y+8, r23	; 0x08
    2932:	8e e1       	ldi	r24, 0x1E	; 30
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	8e 1b       	sub	r24, r30
    2938:	9f 0b       	sbc	r25, r31
    293a:	9c 83       	std	Y+4, r25	; 0x04
    293c:	8b 83       	std	Y+3, r24	; 0x03
    293e:	12 c0       	rjmp	.+36     	; 0x2964 <__floatunsisf+0xe0>
    2940:	30 97       	sbiw	r30, 0x00	; 0
    2942:	81 f0       	breq	.+32     	; 0x2964 <__floatunsisf+0xe0>
    2944:	0e 2e       	mov	r0, r30
    2946:	04 c0       	rjmp	.+8      	; 0x2950 <__floatunsisf+0xcc>
    2948:	ee 0c       	add	r14, r14
    294a:	ff 1c       	adc	r15, r15
    294c:	00 1f       	adc	r16, r16
    294e:	11 1f       	adc	r17, r17
    2950:	0a 94       	dec	r0
    2952:	d2 f7       	brpl	.-12     	; 0x2948 <__floatunsisf+0xc4>
    2954:	ed 82       	std	Y+5, r14	; 0x05
    2956:	fe 82       	std	Y+6, r15	; 0x06
    2958:	0f 83       	std	Y+7, r16	; 0x07
    295a:	18 87       	std	Y+8, r17	; 0x08
    295c:	ce 1a       	sub	r12, r30
    295e:	df 0a       	sbc	r13, r31
    2960:	dc 82       	std	Y+4, r13	; 0x04
    2962:	cb 82       	std	Y+3, r12	; 0x03
    2964:	1a 82       	std	Y+2, r1	; 0x02
    2966:	ce 01       	movw	r24, r28
    2968:	01 96       	adiw	r24, 0x01	; 1
    296a:	0e 94 89 15 	call	0x2b12	; 0x2b12 <__pack_f>
    296e:	28 96       	adiw	r28, 0x08	; 8
    2970:	ea e0       	ldi	r30, 0x0A	; 10
    2972:	0c 94 8e 3a 	jmp	0x751c	; 0x751c <__epilogue_restores__+0x10>

00002976 <__lshrdi3>:
    2976:	ef 92       	push	r14
    2978:	ff 92       	push	r15
    297a:	0f 93       	push	r16
    297c:	df 93       	push	r29
    297e:	cf 93       	push	r28
    2980:	cd b7       	in	r28, 0x3d	; 61
    2982:	de b7       	in	r29, 0x3e	; 62
    2984:	60 97       	sbiw	r28, 0x10	; 16
    2986:	0f b6       	in	r0, 0x3f	; 63
    2988:	f8 94       	cli
    298a:	de bf       	out	0x3e, r29	; 62
    298c:	0f be       	out	0x3f, r0	; 63
    298e:	cd bf       	out	0x3d, r28	; 61
    2990:	a8 2f       	mov	r26, r24
    2992:	00 23       	and	r16, r16
    2994:	09 f4       	brne	.+2      	; 0x2998 <__lshrdi3+0x22>
    2996:	61 c0       	rjmp	.+194    	; 0x2a5a <__lshrdi3+0xe4>
    2998:	7e 01       	movw	r14, r28
    299a:	08 94       	sec
    299c:	e1 1c       	adc	r14, r1
    299e:	f1 1c       	adc	r15, r1
    29a0:	88 e0       	ldi	r24, 0x08	; 8
    29a2:	f7 01       	movw	r30, r14
    29a4:	11 92       	st	Z+, r1
    29a6:	8a 95       	dec	r24
    29a8:	e9 f7       	brne	.-6      	; 0x29a4 <__lshrdi3+0x2e>
    29aa:	29 83       	std	Y+1, r18	; 0x01
    29ac:	3a 83       	std	Y+2, r19	; 0x02
    29ae:	4b 83       	std	Y+3, r20	; 0x03
    29b0:	5c 83       	std	Y+4, r21	; 0x04
    29b2:	6d 83       	std	Y+5, r22	; 0x05
    29b4:	7e 83       	std	Y+6, r23	; 0x06
    29b6:	af 83       	std	Y+7, r26	; 0x07
    29b8:	98 87       	std	Y+8, r25	; 0x08
    29ba:	80 e2       	ldi	r24, 0x20	; 32
    29bc:	80 1b       	sub	r24, r16
    29be:	e8 2f       	mov	r30, r24
    29c0:	ff 27       	eor	r31, r31
    29c2:	e7 fd       	sbrc	r30, 7
    29c4:	f0 95       	com	r31
    29c6:	4d 81       	ldd	r20, Y+5	; 0x05
    29c8:	5e 81       	ldd	r21, Y+6	; 0x06
    29ca:	6f 81       	ldd	r22, Y+7	; 0x07
    29cc:	78 85       	ldd	r23, Y+8	; 0x08
    29ce:	18 16       	cp	r1, r24
    29d0:	84 f0       	brlt	.+32     	; 0x29f2 <__lshrdi3+0x7c>
    29d2:	1d 86       	std	Y+13, r1	; 0x0d
    29d4:	1e 86       	std	Y+14, r1	; 0x0e
    29d6:	1f 86       	std	Y+15, r1	; 0x0f
    29d8:	18 8a       	std	Y+16, r1	; 0x10
    29da:	88 27       	eor	r24, r24
    29dc:	99 27       	eor	r25, r25
    29de:	8e 1b       	sub	r24, r30
    29e0:	9f 0b       	sbc	r25, r31
    29e2:	04 c0       	rjmp	.+8      	; 0x29ec <__lshrdi3+0x76>
    29e4:	76 95       	lsr	r23
    29e6:	67 95       	ror	r22
    29e8:	57 95       	ror	r21
    29ea:	47 95       	ror	r20
    29ec:	8a 95       	dec	r24
    29ee:	d2 f7       	brpl	.-12     	; 0x29e4 <__lshrdi3+0x6e>
    29f0:	28 c0       	rjmp	.+80     	; 0x2a42 <__lshrdi3+0xcc>
    29f2:	20 2f       	mov	r18, r16
    29f4:	33 27       	eor	r19, r19
    29f6:	27 fd       	sbrc	r18, 7
    29f8:	30 95       	com	r19
    29fa:	db 01       	movw	r26, r22
    29fc:	ca 01       	movw	r24, r20
    29fe:	02 2e       	mov	r0, r18
    2a00:	04 c0       	rjmp	.+8      	; 0x2a0a <__lshrdi3+0x94>
    2a02:	b6 95       	lsr	r27
    2a04:	a7 95       	ror	r26
    2a06:	97 95       	ror	r25
    2a08:	87 95       	ror	r24
    2a0a:	0a 94       	dec	r0
    2a0c:	d2 f7       	brpl	.-12     	; 0x2a02 <__lshrdi3+0x8c>
    2a0e:	8d 87       	std	Y+13, r24	; 0x0d
    2a10:	9e 87       	std	Y+14, r25	; 0x0e
    2a12:	af 87       	std	Y+15, r26	; 0x0f
    2a14:	b8 8b       	std	Y+16, r27	; 0x10
    2a16:	04 c0       	rjmp	.+8      	; 0x2a20 <__lshrdi3+0xaa>
    2a18:	44 0f       	add	r20, r20
    2a1a:	55 1f       	adc	r21, r21
    2a1c:	66 1f       	adc	r22, r22
    2a1e:	77 1f       	adc	r23, r23
    2a20:	ea 95       	dec	r30
    2a22:	d2 f7       	brpl	.-12     	; 0x2a18 <__lshrdi3+0xa2>
    2a24:	89 81       	ldd	r24, Y+1	; 0x01
    2a26:	9a 81       	ldd	r25, Y+2	; 0x02
    2a28:	ab 81       	ldd	r26, Y+3	; 0x03
    2a2a:	bc 81       	ldd	r27, Y+4	; 0x04
    2a2c:	04 c0       	rjmp	.+8      	; 0x2a36 <__lshrdi3+0xc0>
    2a2e:	b6 95       	lsr	r27
    2a30:	a7 95       	ror	r26
    2a32:	97 95       	ror	r25
    2a34:	87 95       	ror	r24
    2a36:	2a 95       	dec	r18
    2a38:	d2 f7       	brpl	.-12     	; 0x2a2e <__lshrdi3+0xb8>
    2a3a:	48 2b       	or	r20, r24
    2a3c:	59 2b       	or	r21, r25
    2a3e:	6a 2b       	or	r22, r26
    2a40:	7b 2b       	or	r23, r27
    2a42:	49 87       	std	Y+9, r20	; 0x09
    2a44:	5a 87       	std	Y+10, r21	; 0x0a
    2a46:	6b 87       	std	Y+11, r22	; 0x0b
    2a48:	7c 87       	std	Y+12, r23	; 0x0c
    2a4a:	29 85       	ldd	r18, Y+9	; 0x09
    2a4c:	3a 85       	ldd	r19, Y+10	; 0x0a
    2a4e:	4b 85       	ldd	r20, Y+11	; 0x0b
    2a50:	5c 85       	ldd	r21, Y+12	; 0x0c
    2a52:	6d 85       	ldd	r22, Y+13	; 0x0d
    2a54:	7e 85       	ldd	r23, Y+14	; 0x0e
    2a56:	af 85       	ldd	r26, Y+15	; 0x0f
    2a58:	98 89       	ldd	r25, Y+16	; 0x10
    2a5a:	8a 2f       	mov	r24, r26
    2a5c:	60 96       	adiw	r28, 0x10	; 16
    2a5e:	0f b6       	in	r0, 0x3f	; 63
    2a60:	f8 94       	cli
    2a62:	de bf       	out	0x3e, r29	; 62
    2a64:	0f be       	out	0x3f, r0	; 63
    2a66:	cd bf       	out	0x3d, r28	; 61
    2a68:	cf 91       	pop	r28
    2a6a:	df 91       	pop	r29
    2a6c:	0f 91       	pop	r16
    2a6e:	ff 90       	pop	r15
    2a70:	ef 90       	pop	r14
    2a72:	08 95       	ret

00002a74 <__clzsi2>:
    2a74:	ef 92       	push	r14
    2a76:	ff 92       	push	r15
    2a78:	0f 93       	push	r16
    2a7a:	1f 93       	push	r17
    2a7c:	7b 01       	movw	r14, r22
    2a7e:	8c 01       	movw	r16, r24
    2a80:	80 e0       	ldi	r24, 0x00	; 0
    2a82:	e8 16       	cp	r14, r24
    2a84:	80 e0       	ldi	r24, 0x00	; 0
    2a86:	f8 06       	cpc	r15, r24
    2a88:	81 e0       	ldi	r24, 0x01	; 1
    2a8a:	08 07       	cpc	r16, r24
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	18 07       	cpc	r17, r24
    2a90:	88 f4       	brcc	.+34     	; 0x2ab4 <__clzsi2+0x40>
    2a92:	8f ef       	ldi	r24, 0xFF	; 255
    2a94:	e8 16       	cp	r14, r24
    2a96:	f1 04       	cpc	r15, r1
    2a98:	01 05       	cpc	r16, r1
    2a9a:	11 05       	cpc	r17, r1
    2a9c:	31 f0       	breq	.+12     	; 0x2aaa <__clzsi2+0x36>
    2a9e:	28 f0       	brcs	.+10     	; 0x2aaa <__clzsi2+0x36>
    2aa0:	88 e0       	ldi	r24, 0x08	; 8
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	a0 e0       	ldi	r26, 0x00	; 0
    2aa6:	b0 e0       	ldi	r27, 0x00	; 0
    2aa8:	17 c0       	rjmp	.+46     	; 0x2ad8 <__clzsi2+0x64>
    2aaa:	80 e0       	ldi	r24, 0x00	; 0
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	a0 e0       	ldi	r26, 0x00	; 0
    2ab0:	b0 e0       	ldi	r27, 0x00	; 0
    2ab2:	12 c0       	rjmp	.+36     	; 0x2ad8 <__clzsi2+0x64>
    2ab4:	80 e0       	ldi	r24, 0x00	; 0
    2ab6:	e8 16       	cp	r14, r24
    2ab8:	80 e0       	ldi	r24, 0x00	; 0
    2aba:	f8 06       	cpc	r15, r24
    2abc:	80 e0       	ldi	r24, 0x00	; 0
    2abe:	08 07       	cpc	r16, r24
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	18 07       	cpc	r17, r24
    2ac4:	28 f0       	brcs	.+10     	; 0x2ad0 <__clzsi2+0x5c>
    2ac6:	88 e1       	ldi	r24, 0x18	; 24
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	a0 e0       	ldi	r26, 0x00	; 0
    2acc:	b0 e0       	ldi	r27, 0x00	; 0
    2ace:	04 c0       	rjmp	.+8      	; 0x2ad8 <__clzsi2+0x64>
    2ad0:	80 e1       	ldi	r24, 0x10	; 16
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	a0 e0       	ldi	r26, 0x00	; 0
    2ad6:	b0 e0       	ldi	r27, 0x00	; 0
    2ad8:	20 e2       	ldi	r18, 0x20	; 32
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	40 e0       	ldi	r20, 0x00	; 0
    2ade:	50 e0       	ldi	r21, 0x00	; 0
    2ae0:	28 1b       	sub	r18, r24
    2ae2:	39 0b       	sbc	r19, r25
    2ae4:	4a 0b       	sbc	r20, r26
    2ae6:	5b 0b       	sbc	r21, r27
    2ae8:	04 c0       	rjmp	.+8      	; 0x2af2 <__clzsi2+0x7e>
    2aea:	16 95       	lsr	r17
    2aec:	07 95       	ror	r16
    2aee:	f7 94       	ror	r15
    2af0:	e7 94       	ror	r14
    2af2:	8a 95       	dec	r24
    2af4:	d2 f7       	brpl	.-12     	; 0x2aea <__clzsi2+0x76>
    2af6:	f7 01       	movw	r30, r14
    2af8:	e2 50       	subi	r30, 0x02	; 2
    2afa:	ff 4f       	sbci	r31, 0xFF	; 255
    2afc:	80 81       	ld	r24, Z
    2afe:	28 1b       	sub	r18, r24
    2b00:	31 09       	sbc	r19, r1
    2b02:	41 09       	sbc	r20, r1
    2b04:	51 09       	sbc	r21, r1
    2b06:	c9 01       	movw	r24, r18
    2b08:	1f 91       	pop	r17
    2b0a:	0f 91       	pop	r16
    2b0c:	ff 90       	pop	r15
    2b0e:	ef 90       	pop	r14
    2b10:	08 95       	ret

00002b12 <__pack_f>:
    2b12:	df 92       	push	r13
    2b14:	ef 92       	push	r14
    2b16:	ff 92       	push	r15
    2b18:	0f 93       	push	r16
    2b1a:	1f 93       	push	r17
    2b1c:	fc 01       	movw	r30, r24
    2b1e:	e4 80       	ldd	r14, Z+4	; 0x04
    2b20:	f5 80       	ldd	r15, Z+5	; 0x05
    2b22:	06 81       	ldd	r16, Z+6	; 0x06
    2b24:	17 81       	ldd	r17, Z+7	; 0x07
    2b26:	d1 80       	ldd	r13, Z+1	; 0x01
    2b28:	80 81       	ld	r24, Z
    2b2a:	82 30       	cpi	r24, 0x02	; 2
    2b2c:	48 f4       	brcc	.+18     	; 0x2b40 <__pack_f+0x2e>
    2b2e:	80 e0       	ldi	r24, 0x00	; 0
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	a0 e1       	ldi	r26, 0x10	; 16
    2b34:	b0 e0       	ldi	r27, 0x00	; 0
    2b36:	e8 2a       	or	r14, r24
    2b38:	f9 2a       	or	r15, r25
    2b3a:	0a 2b       	or	r16, r26
    2b3c:	1b 2b       	or	r17, r27
    2b3e:	a5 c0       	rjmp	.+330    	; 0x2c8a <__pack_f+0x178>
    2b40:	84 30       	cpi	r24, 0x04	; 4
    2b42:	09 f4       	brne	.+2      	; 0x2b46 <__pack_f+0x34>
    2b44:	9f c0       	rjmp	.+318    	; 0x2c84 <__pack_f+0x172>
    2b46:	82 30       	cpi	r24, 0x02	; 2
    2b48:	21 f4       	brne	.+8      	; 0x2b52 <__pack_f+0x40>
    2b4a:	ee 24       	eor	r14, r14
    2b4c:	ff 24       	eor	r15, r15
    2b4e:	87 01       	movw	r16, r14
    2b50:	05 c0       	rjmp	.+10     	; 0x2b5c <__pack_f+0x4a>
    2b52:	e1 14       	cp	r14, r1
    2b54:	f1 04       	cpc	r15, r1
    2b56:	01 05       	cpc	r16, r1
    2b58:	11 05       	cpc	r17, r1
    2b5a:	19 f4       	brne	.+6      	; 0x2b62 <__pack_f+0x50>
    2b5c:	e0 e0       	ldi	r30, 0x00	; 0
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	96 c0       	rjmp	.+300    	; 0x2c8e <__pack_f+0x17c>
    2b62:	62 81       	ldd	r22, Z+2	; 0x02
    2b64:	73 81       	ldd	r23, Z+3	; 0x03
    2b66:	9f ef       	ldi	r25, 0xFF	; 255
    2b68:	62 38       	cpi	r22, 0x82	; 130
    2b6a:	79 07       	cpc	r23, r25
    2b6c:	0c f0       	brlt	.+2      	; 0x2b70 <__pack_f+0x5e>
    2b6e:	5b c0       	rjmp	.+182    	; 0x2c26 <__pack_f+0x114>
    2b70:	22 e8       	ldi	r18, 0x82	; 130
    2b72:	3f ef       	ldi	r19, 0xFF	; 255
    2b74:	26 1b       	sub	r18, r22
    2b76:	37 0b       	sbc	r19, r23
    2b78:	2a 31       	cpi	r18, 0x1A	; 26
    2b7a:	31 05       	cpc	r19, r1
    2b7c:	2c f0       	brlt	.+10     	; 0x2b88 <__pack_f+0x76>
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	40 e0       	ldi	r20, 0x00	; 0
    2b84:	50 e0       	ldi	r21, 0x00	; 0
    2b86:	2a c0       	rjmp	.+84     	; 0x2bdc <__pack_f+0xca>
    2b88:	b8 01       	movw	r22, r16
    2b8a:	a7 01       	movw	r20, r14
    2b8c:	02 2e       	mov	r0, r18
    2b8e:	04 c0       	rjmp	.+8      	; 0x2b98 <__pack_f+0x86>
    2b90:	76 95       	lsr	r23
    2b92:	67 95       	ror	r22
    2b94:	57 95       	ror	r21
    2b96:	47 95       	ror	r20
    2b98:	0a 94       	dec	r0
    2b9a:	d2 f7       	brpl	.-12     	; 0x2b90 <__pack_f+0x7e>
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	a0 e0       	ldi	r26, 0x00	; 0
    2ba2:	b0 e0       	ldi	r27, 0x00	; 0
    2ba4:	04 c0       	rjmp	.+8      	; 0x2bae <__pack_f+0x9c>
    2ba6:	88 0f       	add	r24, r24
    2ba8:	99 1f       	adc	r25, r25
    2baa:	aa 1f       	adc	r26, r26
    2bac:	bb 1f       	adc	r27, r27
    2bae:	2a 95       	dec	r18
    2bb0:	d2 f7       	brpl	.-12     	; 0x2ba6 <__pack_f+0x94>
    2bb2:	01 97       	sbiw	r24, 0x01	; 1
    2bb4:	a1 09       	sbc	r26, r1
    2bb6:	b1 09       	sbc	r27, r1
    2bb8:	8e 21       	and	r24, r14
    2bba:	9f 21       	and	r25, r15
    2bbc:	a0 23       	and	r26, r16
    2bbe:	b1 23       	and	r27, r17
    2bc0:	00 97       	sbiw	r24, 0x00	; 0
    2bc2:	a1 05       	cpc	r26, r1
    2bc4:	b1 05       	cpc	r27, r1
    2bc6:	21 f0       	breq	.+8      	; 0x2bd0 <__pack_f+0xbe>
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	a0 e0       	ldi	r26, 0x00	; 0
    2bce:	b0 e0       	ldi	r27, 0x00	; 0
    2bd0:	9a 01       	movw	r18, r20
    2bd2:	ab 01       	movw	r20, r22
    2bd4:	28 2b       	or	r18, r24
    2bd6:	39 2b       	or	r19, r25
    2bd8:	4a 2b       	or	r20, r26
    2bda:	5b 2b       	or	r21, r27
    2bdc:	da 01       	movw	r26, r20
    2bde:	c9 01       	movw	r24, r18
    2be0:	8f 77       	andi	r24, 0x7F	; 127
    2be2:	90 70       	andi	r25, 0x00	; 0
    2be4:	a0 70       	andi	r26, 0x00	; 0
    2be6:	b0 70       	andi	r27, 0x00	; 0
    2be8:	80 34       	cpi	r24, 0x40	; 64
    2bea:	91 05       	cpc	r25, r1
    2bec:	a1 05       	cpc	r26, r1
    2bee:	b1 05       	cpc	r27, r1
    2bf0:	39 f4       	brne	.+14     	; 0x2c00 <__pack_f+0xee>
    2bf2:	27 ff       	sbrs	r18, 7
    2bf4:	09 c0       	rjmp	.+18     	; 0x2c08 <__pack_f+0xf6>
    2bf6:	20 5c       	subi	r18, 0xC0	; 192
    2bf8:	3f 4f       	sbci	r19, 0xFF	; 255
    2bfa:	4f 4f       	sbci	r20, 0xFF	; 255
    2bfc:	5f 4f       	sbci	r21, 0xFF	; 255
    2bfe:	04 c0       	rjmp	.+8      	; 0x2c08 <__pack_f+0xf6>
    2c00:	21 5c       	subi	r18, 0xC1	; 193
    2c02:	3f 4f       	sbci	r19, 0xFF	; 255
    2c04:	4f 4f       	sbci	r20, 0xFF	; 255
    2c06:	5f 4f       	sbci	r21, 0xFF	; 255
    2c08:	e0 e0       	ldi	r30, 0x00	; 0
    2c0a:	f0 e0       	ldi	r31, 0x00	; 0
    2c0c:	20 30       	cpi	r18, 0x00	; 0
    2c0e:	a0 e0       	ldi	r26, 0x00	; 0
    2c10:	3a 07       	cpc	r19, r26
    2c12:	a0 e0       	ldi	r26, 0x00	; 0
    2c14:	4a 07       	cpc	r20, r26
    2c16:	a0 e4       	ldi	r26, 0x40	; 64
    2c18:	5a 07       	cpc	r21, r26
    2c1a:	10 f0       	brcs	.+4      	; 0x2c20 <__pack_f+0x10e>
    2c1c:	e1 e0       	ldi	r30, 0x01	; 1
    2c1e:	f0 e0       	ldi	r31, 0x00	; 0
    2c20:	79 01       	movw	r14, r18
    2c22:	8a 01       	movw	r16, r20
    2c24:	27 c0       	rjmp	.+78     	; 0x2c74 <__pack_f+0x162>
    2c26:	60 38       	cpi	r22, 0x80	; 128
    2c28:	71 05       	cpc	r23, r1
    2c2a:	64 f5       	brge	.+88     	; 0x2c84 <__pack_f+0x172>
    2c2c:	fb 01       	movw	r30, r22
    2c2e:	e1 58       	subi	r30, 0x81	; 129
    2c30:	ff 4f       	sbci	r31, 0xFF	; 255
    2c32:	d8 01       	movw	r26, r16
    2c34:	c7 01       	movw	r24, r14
    2c36:	8f 77       	andi	r24, 0x7F	; 127
    2c38:	90 70       	andi	r25, 0x00	; 0
    2c3a:	a0 70       	andi	r26, 0x00	; 0
    2c3c:	b0 70       	andi	r27, 0x00	; 0
    2c3e:	80 34       	cpi	r24, 0x40	; 64
    2c40:	91 05       	cpc	r25, r1
    2c42:	a1 05       	cpc	r26, r1
    2c44:	b1 05       	cpc	r27, r1
    2c46:	39 f4       	brne	.+14     	; 0x2c56 <__pack_f+0x144>
    2c48:	e7 fe       	sbrs	r14, 7
    2c4a:	0d c0       	rjmp	.+26     	; 0x2c66 <__pack_f+0x154>
    2c4c:	80 e4       	ldi	r24, 0x40	; 64
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	a0 e0       	ldi	r26, 0x00	; 0
    2c52:	b0 e0       	ldi	r27, 0x00	; 0
    2c54:	04 c0       	rjmp	.+8      	; 0x2c5e <__pack_f+0x14c>
    2c56:	8f e3       	ldi	r24, 0x3F	; 63
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	a0 e0       	ldi	r26, 0x00	; 0
    2c5c:	b0 e0       	ldi	r27, 0x00	; 0
    2c5e:	e8 0e       	add	r14, r24
    2c60:	f9 1e       	adc	r15, r25
    2c62:	0a 1f       	adc	r16, r26
    2c64:	1b 1f       	adc	r17, r27
    2c66:	17 ff       	sbrs	r17, 7
    2c68:	05 c0       	rjmp	.+10     	; 0x2c74 <__pack_f+0x162>
    2c6a:	16 95       	lsr	r17
    2c6c:	07 95       	ror	r16
    2c6e:	f7 94       	ror	r15
    2c70:	e7 94       	ror	r14
    2c72:	31 96       	adiw	r30, 0x01	; 1
    2c74:	87 e0       	ldi	r24, 0x07	; 7
    2c76:	16 95       	lsr	r17
    2c78:	07 95       	ror	r16
    2c7a:	f7 94       	ror	r15
    2c7c:	e7 94       	ror	r14
    2c7e:	8a 95       	dec	r24
    2c80:	d1 f7       	brne	.-12     	; 0x2c76 <__pack_f+0x164>
    2c82:	05 c0       	rjmp	.+10     	; 0x2c8e <__pack_f+0x17c>
    2c84:	ee 24       	eor	r14, r14
    2c86:	ff 24       	eor	r15, r15
    2c88:	87 01       	movw	r16, r14
    2c8a:	ef ef       	ldi	r30, 0xFF	; 255
    2c8c:	f0 e0       	ldi	r31, 0x00	; 0
    2c8e:	6e 2f       	mov	r22, r30
    2c90:	67 95       	ror	r22
    2c92:	66 27       	eor	r22, r22
    2c94:	67 95       	ror	r22
    2c96:	90 2f       	mov	r25, r16
    2c98:	9f 77       	andi	r25, 0x7F	; 127
    2c9a:	d7 94       	ror	r13
    2c9c:	dd 24       	eor	r13, r13
    2c9e:	d7 94       	ror	r13
    2ca0:	8e 2f       	mov	r24, r30
    2ca2:	86 95       	lsr	r24
    2ca4:	49 2f       	mov	r20, r25
    2ca6:	46 2b       	or	r20, r22
    2ca8:	58 2f       	mov	r21, r24
    2caa:	5d 29       	or	r21, r13
    2cac:	b7 01       	movw	r22, r14
    2cae:	ca 01       	movw	r24, r20
    2cb0:	1f 91       	pop	r17
    2cb2:	0f 91       	pop	r16
    2cb4:	ff 90       	pop	r15
    2cb6:	ef 90       	pop	r14
    2cb8:	df 90       	pop	r13
    2cba:	08 95       	ret

00002cbc <__unpack_f>:
    2cbc:	fc 01       	movw	r30, r24
    2cbe:	db 01       	movw	r26, r22
    2cc0:	40 81       	ld	r20, Z
    2cc2:	51 81       	ldd	r21, Z+1	; 0x01
    2cc4:	22 81       	ldd	r18, Z+2	; 0x02
    2cc6:	62 2f       	mov	r22, r18
    2cc8:	6f 77       	andi	r22, 0x7F	; 127
    2cca:	70 e0       	ldi	r23, 0x00	; 0
    2ccc:	22 1f       	adc	r18, r18
    2cce:	22 27       	eor	r18, r18
    2cd0:	22 1f       	adc	r18, r18
    2cd2:	93 81       	ldd	r25, Z+3	; 0x03
    2cd4:	89 2f       	mov	r24, r25
    2cd6:	88 0f       	add	r24, r24
    2cd8:	82 2b       	or	r24, r18
    2cda:	28 2f       	mov	r18, r24
    2cdc:	30 e0       	ldi	r19, 0x00	; 0
    2cde:	99 1f       	adc	r25, r25
    2ce0:	99 27       	eor	r25, r25
    2ce2:	99 1f       	adc	r25, r25
    2ce4:	11 96       	adiw	r26, 0x01	; 1
    2ce6:	9c 93       	st	X, r25
    2ce8:	11 97       	sbiw	r26, 0x01	; 1
    2cea:	21 15       	cp	r18, r1
    2cec:	31 05       	cpc	r19, r1
    2cee:	a9 f5       	brne	.+106    	; 0x2d5a <__unpack_f+0x9e>
    2cf0:	41 15       	cp	r20, r1
    2cf2:	51 05       	cpc	r21, r1
    2cf4:	61 05       	cpc	r22, r1
    2cf6:	71 05       	cpc	r23, r1
    2cf8:	11 f4       	brne	.+4      	; 0x2cfe <__unpack_f+0x42>
    2cfa:	82 e0       	ldi	r24, 0x02	; 2
    2cfc:	37 c0       	rjmp	.+110    	; 0x2d6c <__unpack_f+0xb0>
    2cfe:	82 e8       	ldi	r24, 0x82	; 130
    2d00:	9f ef       	ldi	r25, 0xFF	; 255
    2d02:	13 96       	adiw	r26, 0x03	; 3
    2d04:	9c 93       	st	X, r25
    2d06:	8e 93       	st	-X, r24
    2d08:	12 97       	sbiw	r26, 0x02	; 2
    2d0a:	9a 01       	movw	r18, r20
    2d0c:	ab 01       	movw	r20, r22
    2d0e:	67 e0       	ldi	r22, 0x07	; 7
    2d10:	22 0f       	add	r18, r18
    2d12:	33 1f       	adc	r19, r19
    2d14:	44 1f       	adc	r20, r20
    2d16:	55 1f       	adc	r21, r21
    2d18:	6a 95       	dec	r22
    2d1a:	d1 f7       	brne	.-12     	; 0x2d10 <__unpack_f+0x54>
    2d1c:	83 e0       	ldi	r24, 0x03	; 3
    2d1e:	8c 93       	st	X, r24
    2d20:	0d c0       	rjmp	.+26     	; 0x2d3c <__unpack_f+0x80>
    2d22:	22 0f       	add	r18, r18
    2d24:	33 1f       	adc	r19, r19
    2d26:	44 1f       	adc	r20, r20
    2d28:	55 1f       	adc	r21, r21
    2d2a:	12 96       	adiw	r26, 0x02	; 2
    2d2c:	8d 91       	ld	r24, X+
    2d2e:	9c 91       	ld	r25, X
    2d30:	13 97       	sbiw	r26, 0x03	; 3
    2d32:	01 97       	sbiw	r24, 0x01	; 1
    2d34:	13 96       	adiw	r26, 0x03	; 3
    2d36:	9c 93       	st	X, r25
    2d38:	8e 93       	st	-X, r24
    2d3a:	12 97       	sbiw	r26, 0x02	; 2
    2d3c:	20 30       	cpi	r18, 0x00	; 0
    2d3e:	80 e0       	ldi	r24, 0x00	; 0
    2d40:	38 07       	cpc	r19, r24
    2d42:	80 e0       	ldi	r24, 0x00	; 0
    2d44:	48 07       	cpc	r20, r24
    2d46:	80 e4       	ldi	r24, 0x40	; 64
    2d48:	58 07       	cpc	r21, r24
    2d4a:	58 f3       	brcs	.-42     	; 0x2d22 <__unpack_f+0x66>
    2d4c:	14 96       	adiw	r26, 0x04	; 4
    2d4e:	2d 93       	st	X+, r18
    2d50:	3d 93       	st	X+, r19
    2d52:	4d 93       	st	X+, r20
    2d54:	5c 93       	st	X, r21
    2d56:	17 97       	sbiw	r26, 0x07	; 7
    2d58:	08 95       	ret
    2d5a:	2f 3f       	cpi	r18, 0xFF	; 255
    2d5c:	31 05       	cpc	r19, r1
    2d5e:	79 f4       	brne	.+30     	; 0x2d7e <__unpack_f+0xc2>
    2d60:	41 15       	cp	r20, r1
    2d62:	51 05       	cpc	r21, r1
    2d64:	61 05       	cpc	r22, r1
    2d66:	71 05       	cpc	r23, r1
    2d68:	19 f4       	brne	.+6      	; 0x2d70 <__unpack_f+0xb4>
    2d6a:	84 e0       	ldi	r24, 0x04	; 4
    2d6c:	8c 93       	st	X, r24
    2d6e:	08 95       	ret
    2d70:	64 ff       	sbrs	r22, 4
    2d72:	03 c0       	rjmp	.+6      	; 0x2d7a <__unpack_f+0xbe>
    2d74:	81 e0       	ldi	r24, 0x01	; 1
    2d76:	8c 93       	st	X, r24
    2d78:	12 c0       	rjmp	.+36     	; 0x2d9e <__unpack_f+0xe2>
    2d7a:	1c 92       	st	X, r1
    2d7c:	10 c0       	rjmp	.+32     	; 0x2d9e <__unpack_f+0xe2>
    2d7e:	2f 57       	subi	r18, 0x7F	; 127
    2d80:	30 40       	sbci	r19, 0x00	; 0
    2d82:	13 96       	adiw	r26, 0x03	; 3
    2d84:	3c 93       	st	X, r19
    2d86:	2e 93       	st	-X, r18
    2d88:	12 97       	sbiw	r26, 0x02	; 2
    2d8a:	83 e0       	ldi	r24, 0x03	; 3
    2d8c:	8c 93       	st	X, r24
    2d8e:	87 e0       	ldi	r24, 0x07	; 7
    2d90:	44 0f       	add	r20, r20
    2d92:	55 1f       	adc	r21, r21
    2d94:	66 1f       	adc	r22, r22
    2d96:	77 1f       	adc	r23, r23
    2d98:	8a 95       	dec	r24
    2d9a:	d1 f7       	brne	.-12     	; 0x2d90 <__unpack_f+0xd4>
    2d9c:	70 64       	ori	r23, 0x40	; 64
    2d9e:	14 96       	adiw	r26, 0x04	; 4
    2da0:	4d 93       	st	X+, r20
    2da2:	5d 93       	st	X+, r21
    2da4:	6d 93       	st	X+, r22
    2da6:	7c 93       	st	X, r23
    2da8:	17 97       	sbiw	r26, 0x07	; 7
    2daa:	08 95       	ret

00002dac <__fpcmp_parts_f>:
    2dac:	1f 93       	push	r17
    2dae:	dc 01       	movw	r26, r24
    2db0:	fb 01       	movw	r30, r22
    2db2:	9c 91       	ld	r25, X
    2db4:	92 30       	cpi	r25, 0x02	; 2
    2db6:	08 f4       	brcc	.+2      	; 0x2dba <__fpcmp_parts_f+0xe>
    2db8:	47 c0       	rjmp	.+142    	; 0x2e48 <__fpcmp_parts_f+0x9c>
    2dba:	80 81       	ld	r24, Z
    2dbc:	82 30       	cpi	r24, 0x02	; 2
    2dbe:	08 f4       	brcc	.+2      	; 0x2dc2 <__fpcmp_parts_f+0x16>
    2dc0:	43 c0       	rjmp	.+134    	; 0x2e48 <__fpcmp_parts_f+0x9c>
    2dc2:	94 30       	cpi	r25, 0x04	; 4
    2dc4:	51 f4       	brne	.+20     	; 0x2dda <__fpcmp_parts_f+0x2e>
    2dc6:	11 96       	adiw	r26, 0x01	; 1
    2dc8:	1c 91       	ld	r17, X
    2dca:	84 30       	cpi	r24, 0x04	; 4
    2dcc:	99 f5       	brne	.+102    	; 0x2e34 <__fpcmp_parts_f+0x88>
    2dce:	81 81       	ldd	r24, Z+1	; 0x01
    2dd0:	68 2f       	mov	r22, r24
    2dd2:	70 e0       	ldi	r23, 0x00	; 0
    2dd4:	61 1b       	sub	r22, r17
    2dd6:	71 09       	sbc	r23, r1
    2dd8:	3f c0       	rjmp	.+126    	; 0x2e58 <__fpcmp_parts_f+0xac>
    2dda:	84 30       	cpi	r24, 0x04	; 4
    2ddc:	21 f0       	breq	.+8      	; 0x2de6 <__fpcmp_parts_f+0x3a>
    2dde:	92 30       	cpi	r25, 0x02	; 2
    2de0:	31 f4       	brne	.+12     	; 0x2dee <__fpcmp_parts_f+0x42>
    2de2:	82 30       	cpi	r24, 0x02	; 2
    2de4:	b9 f1       	breq	.+110    	; 0x2e54 <__fpcmp_parts_f+0xa8>
    2de6:	81 81       	ldd	r24, Z+1	; 0x01
    2de8:	88 23       	and	r24, r24
    2dea:	89 f1       	breq	.+98     	; 0x2e4e <__fpcmp_parts_f+0xa2>
    2dec:	2d c0       	rjmp	.+90     	; 0x2e48 <__fpcmp_parts_f+0x9c>
    2dee:	11 96       	adiw	r26, 0x01	; 1
    2df0:	1c 91       	ld	r17, X
    2df2:	11 97       	sbiw	r26, 0x01	; 1
    2df4:	82 30       	cpi	r24, 0x02	; 2
    2df6:	f1 f0       	breq	.+60     	; 0x2e34 <__fpcmp_parts_f+0x88>
    2df8:	81 81       	ldd	r24, Z+1	; 0x01
    2dfa:	18 17       	cp	r17, r24
    2dfc:	d9 f4       	brne	.+54     	; 0x2e34 <__fpcmp_parts_f+0x88>
    2dfe:	12 96       	adiw	r26, 0x02	; 2
    2e00:	2d 91       	ld	r18, X+
    2e02:	3c 91       	ld	r19, X
    2e04:	13 97       	sbiw	r26, 0x03	; 3
    2e06:	82 81       	ldd	r24, Z+2	; 0x02
    2e08:	93 81       	ldd	r25, Z+3	; 0x03
    2e0a:	82 17       	cp	r24, r18
    2e0c:	93 07       	cpc	r25, r19
    2e0e:	94 f0       	brlt	.+36     	; 0x2e34 <__fpcmp_parts_f+0x88>
    2e10:	28 17       	cp	r18, r24
    2e12:	39 07       	cpc	r19, r25
    2e14:	bc f0       	brlt	.+46     	; 0x2e44 <__fpcmp_parts_f+0x98>
    2e16:	14 96       	adiw	r26, 0x04	; 4
    2e18:	8d 91       	ld	r24, X+
    2e1a:	9d 91       	ld	r25, X+
    2e1c:	0d 90       	ld	r0, X+
    2e1e:	bc 91       	ld	r27, X
    2e20:	a0 2d       	mov	r26, r0
    2e22:	24 81       	ldd	r18, Z+4	; 0x04
    2e24:	35 81       	ldd	r19, Z+5	; 0x05
    2e26:	46 81       	ldd	r20, Z+6	; 0x06
    2e28:	57 81       	ldd	r21, Z+7	; 0x07
    2e2a:	28 17       	cp	r18, r24
    2e2c:	39 07       	cpc	r19, r25
    2e2e:	4a 07       	cpc	r20, r26
    2e30:	5b 07       	cpc	r21, r27
    2e32:	18 f4       	brcc	.+6      	; 0x2e3a <__fpcmp_parts_f+0x8e>
    2e34:	11 23       	and	r17, r17
    2e36:	41 f0       	breq	.+16     	; 0x2e48 <__fpcmp_parts_f+0x9c>
    2e38:	0a c0       	rjmp	.+20     	; 0x2e4e <__fpcmp_parts_f+0xa2>
    2e3a:	82 17       	cp	r24, r18
    2e3c:	93 07       	cpc	r25, r19
    2e3e:	a4 07       	cpc	r26, r20
    2e40:	b5 07       	cpc	r27, r21
    2e42:	40 f4       	brcc	.+16     	; 0x2e54 <__fpcmp_parts_f+0xa8>
    2e44:	11 23       	and	r17, r17
    2e46:	19 f0       	breq	.+6      	; 0x2e4e <__fpcmp_parts_f+0xa2>
    2e48:	61 e0       	ldi	r22, 0x01	; 1
    2e4a:	70 e0       	ldi	r23, 0x00	; 0
    2e4c:	05 c0       	rjmp	.+10     	; 0x2e58 <__fpcmp_parts_f+0xac>
    2e4e:	6f ef       	ldi	r22, 0xFF	; 255
    2e50:	7f ef       	ldi	r23, 0xFF	; 255
    2e52:	02 c0       	rjmp	.+4      	; 0x2e58 <__fpcmp_parts_f+0xac>
    2e54:	60 e0       	ldi	r22, 0x00	; 0
    2e56:	70 e0       	ldi	r23, 0x00	; 0
    2e58:	cb 01       	movw	r24, r22
    2e5a:	1f 91       	pop	r17
    2e5c:	08 95       	ret

00002e5e <ADC_VidInit>:
#include "INTERRUPT_Interface.h"
#include "ADC_interface.h"
#include "ADC_private.h"
#include "ADC_cfg.h"

void ADC_VidInit (void){
    2e5e:	df 93       	push	r29
    2e60:	cf 93       	push	r28
    2e62:	cd b7       	in	r28, 0x3d	; 61
    2e64:	de b7       	in	r29, 0x3e	; 62

#if VREF_USED == AVCC_5V
	ADMUX = 0x40 ;
    2e66:	e7 e2       	ldi	r30, 0x27	; 39
    2e68:	f0 e0       	ldi	r31, 0x00	; 0
    2e6a:	80 e4       	ldi	r24, 0x40	; 64
    2e6c:	80 83       	st	Z, r24
#elif PRE_SCALAR ==   PRE_SCALAR_32
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS0) ;
#elif PRE_SCALAR ==  PRE_SCALAR_64
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) ;
#elif PRE_SCALAR == PRE_SCALAR_128
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0) ;
    2e6e:	e6 e2       	ldi	r30, 0x26	; 38
    2e70:	f0 e0       	ldi	r31, 0x00	; 0
    2e72:	87 e8       	ldi	r24, 0x87	; 135
    2e74:	80 83       	st	Z, r24
#endif

#if ADJUSTED_USED == RIGHT_ADJEUSTED
	CLR_BIT(ADMUX,ADLAR);                             //CLEAR ADLAR , RIGHT_ADJEUSTED
    2e76:	a7 e2       	ldi	r26, 0x27	; 39
    2e78:	b0 e0       	ldi	r27, 0x00	; 0
    2e7a:	e7 e2       	ldi	r30, 0x27	; 39
    2e7c:	f0 e0       	ldi	r31, 0x00	; 0
    2e7e:	80 81       	ld	r24, Z
    2e80:	8f 7d       	andi	r24, 0xDF	; 223
    2e82:	8c 93       	st	X, r24
#elif ADJUSTED_USED == LEFT_ADJUSTED
	SET_BIT(ADMUX,ADLAR);                             //SET ADLAR , LEFT_ADJUSTED
#endif

}
    2e84:	cf 91       	pop	r28
    2e86:	df 91       	pop	r29
    2e88:	08 95       	ret

00002e8a <ADC_VidReadChannel>:

u16 ADC_VidReadChannel (u8 Copy_U8Channel){
    2e8a:	2f 92       	push	r2
    2e8c:	3f 92       	push	r3
    2e8e:	4f 92       	push	r4
    2e90:	5f 92       	push	r5
    2e92:	6f 92       	push	r6
    2e94:	7f 92       	push	r7
    2e96:	8f 92       	push	r8
    2e98:	9f 92       	push	r9
    2e9a:	af 92       	push	r10
    2e9c:	bf 92       	push	r11
    2e9e:	cf 92       	push	r12
    2ea0:	df 92       	push	r13
    2ea2:	ef 92       	push	r14
    2ea4:	ff 92       	push	r15
    2ea6:	0f 93       	push	r16
    2ea8:	1f 93       	push	r17
    2eaa:	df 93       	push	r29
    2eac:	cf 93       	push	r28
    2eae:	00 d0       	rcall	.+0      	; 0x2eb0 <ADC_VidReadChannel+0x26>
    2eb0:	cd b7       	in	r28, 0x3d	; 61
    2eb2:	de b7       	in	r29, 0x3e	; 62
    2eb4:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0 ;                                   //to clear ADMUX
    2eb6:	a7 e2       	ldi	r26, 0x27	; 39
    2eb8:	b0 e0       	ldi	r27, 0x00	; 0
    2eba:	e7 e2       	ldi	r30, 0x27	; 39
    2ebc:	f0 e0       	ldi	r31, 0x00	; 0
    2ebe:	80 81       	ld	r24, Z
    2ec0:	80 7e       	andi	r24, 0xE0	; 224
    2ec2:	8c 93       	st	X, r24
	ADMUX |= ( 0x1F & Copy_U8Channel ) ;              //to check that the channel out of 8 pins
    2ec4:	a7 e2       	ldi	r26, 0x27	; 39
    2ec6:	b0 e0       	ldi	r27, 0x00	; 0
    2ec8:	e7 e2       	ldi	r30, 0x27	; 39
    2eca:	f0 e0       	ldi	r31, 0x00	; 0
    2ecc:	80 81       	ld	r24, Z
    2ece:	98 2f       	mov	r25, r24
    2ed0:	89 81       	ldd	r24, Y+1	; 0x01
    2ed2:	8f 71       	andi	r24, 0x1F	; 31
    2ed4:	89 2b       	or	r24, r25
    2ed6:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC) ;                            //to start conversion
    2ed8:	a6 e2       	ldi	r26, 0x26	; 38
    2eda:	b0 e0       	ldi	r27, 0x00	; 0
    2edc:	e6 e2       	ldi	r30, 0x26	; 38
    2ede:	f0 e0       	ldi	r31, 0x00	; 0
    2ee0:	80 81       	ld	r24, Z
    2ee2:	80 64       	ori	r24, 0x40	; 64
    2ee4:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,ADATE) ;                           //to disable  Auto Trigger
    2ee6:	a6 e2       	ldi	r26, 0x26	; 38
    2ee8:	b0 e0       	ldi	r27, 0x00	; 0
    2eea:	e6 e2       	ldi	r30, 0x26	; 38
    2eec:	f0 e0       	ldi	r31, 0x00	; 0
    2eee:	80 81       	ld	r24, Z
    2ef0:	8f 7d       	andi	r24, 0xDF	; 223
    2ef2:	8c 93       	st	X, r24
	while ( GET_BIT(ADCSRA,ADIF) == 0 ) ;             //to stac while conversion
    2ef4:	e6 e2       	ldi	r30, 0x26	; 38
    2ef6:	f0 e0       	ldi	r31, 0x00	; 0
    2ef8:	80 81       	ld	r24, Z
    SET_BIT(ADCSRA,ADIF);                             //to clear flag
    2efa:	a6 e2       	ldi	r26, 0x26	; 38
    2efc:	b0 e0       	ldi	r27, 0x00	; 0
    2efe:	e6 e2       	ldi	r30, 0x26	; 38
    2f00:	f0 e0       	ldi	r31, 0x00	; 0
    2f02:	80 81       	ld	r24, Z
    2f04:	80 61       	ori	r24, 0x10	; 16
    2f06:	8c 93       	st	X, r24

#if ADJUSTED_USED == RIGHT_ADJEUSTED
    return ( (u64)ADC*VREF*1000)/MAX_DIGITAL ;        //to return Analog value in mv value
    2f08:	e4 e2       	ldi	r30, 0x24	; 36
    2f0a:	f0 e0       	ldi	r31, 0x00	; 0
    2f0c:	80 81       	ld	r24, Z
    2f0e:	91 81       	ldd	r25, Z+1	; 0x01
    2f10:	5c 01       	movw	r10, r24
    2f12:	cc 24       	eor	r12, r12
    2f14:	dd 24       	eor	r13, r13
    2f16:	ee 24       	eor	r14, r14
    2f18:	ff 24       	eor	r15, r15
    2f1a:	87 01       	movw	r16, r14
    2f1c:	2a 2d       	mov	r18, r10
    2f1e:	3b 2d       	mov	r19, r11
    2f20:	4c 2d       	mov	r20, r12
    2f22:	5d 2d       	mov	r21, r13
    2f24:	6e 2d       	mov	r22, r14
    2f26:	7f 2d       	mov	r23, r15
    2f28:	80 2f       	mov	r24, r16
    2f2a:	91 2f       	mov	r25, r17
    2f2c:	0f 2e       	mov	r0, r31
    2f2e:	f8 e8       	ldi	r31, 0x88	; 136
    2f30:	af 2e       	mov	r10, r31
    2f32:	f0 2d       	mov	r31, r0
    2f34:	0f 2e       	mov	r0, r31
    2f36:	f3 e1       	ldi	r31, 0x13	; 19
    2f38:	bf 2e       	mov	r11, r31
    2f3a:	f0 2d       	mov	r31, r0
    2f3c:	cc 24       	eor	r12, r12
    2f3e:	dd 24       	eor	r13, r13
    2f40:	ee 24       	eor	r14, r14
    2f42:	ff 24       	eor	r15, r15
    2f44:	00 e0       	ldi	r16, 0x00	; 0
    2f46:	10 e0       	ldi	r17, 0x00	; 0
    2f48:	0e 94 49 00 	call	0x92	; 0x92 <__muldi3>
    2f4c:	22 2e       	mov	r2, r18
    2f4e:	33 2e       	mov	r3, r19
    2f50:	44 2e       	mov	r4, r20
    2f52:	55 2e       	mov	r5, r21
    2f54:	66 2e       	mov	r6, r22
    2f56:	77 2e       	mov	r7, r23
    2f58:	88 2e       	mov	r8, r24
    2f5a:	99 2e       	mov	r9, r25
    2f5c:	a2 2c       	mov	r10, r2
    2f5e:	b3 2c       	mov	r11, r3
    2f60:	c4 2c       	mov	r12, r4
    2f62:	d5 2c       	mov	r13, r5
    2f64:	e6 2c       	mov	r14, r6
    2f66:	f7 2c       	mov	r15, r7
    2f68:	08 2d       	mov	r16, r8
    2f6a:	19 2d       	mov	r17, r9
    2f6c:	2a 2d       	mov	r18, r10
    2f6e:	3b 2d       	mov	r19, r11
    2f70:	4c 2d       	mov	r20, r12
    2f72:	5d 2d       	mov	r21, r13
    2f74:	6e 2d       	mov	r22, r14
    2f76:	7f 2d       	mov	r23, r15
    2f78:	80 2f       	mov	r24, r16
    2f7a:	91 2f       	mov	r25, r17
    2f7c:	aa 24       	eor	r10, r10
    2f7e:	aa 94       	dec	r10
    2f80:	0f 2e       	mov	r0, r31
    2f82:	f3 e0       	ldi	r31, 0x03	; 3
    2f84:	bf 2e       	mov	r11, r31
    2f86:	f0 2d       	mov	r31, r0
    2f88:	cc 24       	eor	r12, r12
    2f8a:	dd 24       	eor	r13, r13
    2f8c:	ee 24       	eor	r14, r14
    2f8e:	ff 24       	eor	r15, r15
    2f90:	00 e0       	ldi	r16, 0x00	; 0
    2f92:	10 e0       	ldi	r17, 0x00	; 0
    2f94:	0e 94 cb 02 	call	0x596	; 0x596 <__udivdi3>
    2f98:	a2 2e       	mov	r10, r18
    2f9a:	b3 2e       	mov	r11, r19
    2f9c:	c4 2e       	mov	r12, r20
    2f9e:	d5 2e       	mov	r13, r21
    2fa0:	e6 2e       	mov	r14, r22
    2fa2:	f7 2e       	mov	r15, r23
    2fa4:	08 2f       	mov	r16, r24
    2fa6:	19 2f       	mov	r17, r25
    2fa8:	2a 2d       	mov	r18, r10
    2faa:	3b 2d       	mov	r19, r11
    2fac:	4c 2d       	mov	r20, r12
    2fae:	5d 2d       	mov	r21, r13
    2fb0:	6e 2d       	mov	r22, r14
    2fb2:	7f 2d       	mov	r23, r15
    2fb4:	80 2f       	mov	r24, r16
    2fb6:	91 2f       	mov	r25, r17
    2fb8:	c9 01       	movw	r24, r18
#elif ADJUSTED_USED == LEFT_ADJUSTED
    ADCH = (ADCH<<2) ;
    return ( (u64)ADCH*VREF*1000)/MAX_DIGITAL ;        //to return Analog value in mv value
#endif
}
    2fba:	0f 90       	pop	r0
    2fbc:	0f 90       	pop	r0
    2fbe:	cf 91       	pop	r28
    2fc0:	df 91       	pop	r29
    2fc2:	1f 91       	pop	r17
    2fc4:	0f 91       	pop	r16
    2fc6:	ff 90       	pop	r15
    2fc8:	ef 90       	pop	r14
    2fca:	df 90       	pop	r13
    2fcc:	cf 90       	pop	r12
    2fce:	bf 90       	pop	r11
    2fd0:	af 90       	pop	r10
    2fd2:	9f 90       	pop	r9
    2fd4:	8f 90       	pop	r8
    2fd6:	7f 90       	pop	r7
    2fd8:	6f 90       	pop	r6
    2fda:	5f 90       	pop	r5
    2fdc:	4f 90       	pop	r4
    2fde:	3f 90       	pop	r3
    2fe0:	2f 90       	pop	r2
    2fe2:	08 95       	ret

00002fe4 <ADC_VidDeinit>:

void ADC_VidDeinit (void){
    2fe4:	df 93       	push	r29
    2fe6:	cf 93       	push	r28
    2fe8:	cd b7       	in	r28, 0x3d	; 61
    2fea:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADEN);                             //to disable ADC perpherial
    2fec:	a6 e2       	ldi	r26, 0x26	; 38
    2fee:	b0 e0       	ldi	r27, 0x00	; 0
    2ff0:	e6 e2       	ldi	r30, 0x26	; 38
    2ff2:	f0 e0       	ldi	r31, 0x00	; 0
    2ff4:	80 81       	ld	r24, Z
    2ff6:	8f 77       	andi	r24, 0x7F	; 127
    2ff8:	8c 93       	st	X, r24
    ADMUX = 0x00 ;                                    //to clear ADMUX
    2ffa:	e7 e2       	ldi	r30, 0x27	; 39
    2ffc:	f0 e0       	ldi	r31, 0x00	; 0
    2ffe:	10 82       	st	Z, r1
	/*to disable interrupt of ADC :
	 1) close global interrupt
	 2) clear ADIE
	  */
	GIE_VidDisable();
    3000:	0e 94 19 24 	call	0x4832	; 0x4832 <GIE_VidDisable>
	CLR_BIT(ADCSRA,ADIE);
    3004:	a6 e2       	ldi	r26, 0x26	; 38
    3006:	b0 e0       	ldi	r27, 0x00	; 0
    3008:	e6 e2       	ldi	r30, 0x26	; 38
    300a:	f0 e0       	ldi	r31, 0x00	; 0
    300c:	80 81       	ld	r24, Z
    300e:	87 7f       	andi	r24, 0xF7	; 247
    3010:	8c 93       	st	X, r24
}
    3012:	cf 91       	pop	r28
    3014:	df 91       	pop	r29
    3016:	08 95       	ret

00003018 <DcMotor_VidInit>:
#include "DIO_interface.h"
#include "DCMOTOR_Interface.h"
#include "DCMOTOR_Private.h"
#include "DCMOTOR_CFG.h"

void DcMotor_VidInit(void){
    3018:	df 93       	push	r29
    301a:	cf 93       	push	r28
    301c:	cd b7       	in	r28, 0x3d	; 61
    301e:	de b7       	in	r29, 0x3e	; 62
	/*set the direction of the two input pins of the dc motor to be output pins */
	DIO_VidSetPinDirection(DC_MOTOR_PORT , DC_MOTOR_PIN1 , HIGH);
    3020:	83 e0       	ldi	r24, 0x03	; 3
    3022:	60 e0       	ldi	r22, 0x00	; 0
    3024:	41 e0       	ldi	r20, 0x01	; 1
    3026:	0e 94 67 18 	call	0x30ce	; 0x30ce <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DC_MOTOR_PORT , DC_MOTOR_PIN2 , HIGH);
    302a:	83 e0       	ldi	r24, 0x03	; 3
    302c:	61 e0       	ldi	r22, 0x01	; 1
    302e:	41 e0       	ldi	r20, 0x01	; 1
    3030:	0e 94 67 18 	call	0x30ce	; 0x30ce <DIO_VidSetPinDirection>

	/*initialize the dc motor to be stop at the beginning*/
	DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN1 , LOW);
    3034:	83 e0       	ldi	r24, 0x03	; 3
    3036:	60 e0       	ldi	r22, 0x00	; 0
    3038:	40 e0       	ldi	r20, 0x00	; 0
    303a:	0e 94 a8 19 	call	0x3350	; 0x3350 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN2 , LOW);
    303e:	83 e0       	ldi	r24, 0x03	; 3
    3040:	61 e0       	ldi	r22, 0x01	; 1
    3042:	40 e0       	ldi	r20, 0x00	; 0
    3044:	0e 94 a8 19 	call	0x3350	; 0x3350 <DIO_VidSetPinValue>
}
    3048:	cf 91       	pop	r28
    304a:	df 91       	pop	r29
    304c:	08 95       	ret

0000304e <DcMotor_VidRotate>:

void DcMotor_VidRotate(u8 state){
    304e:	df 93       	push	r29
    3050:	cf 93       	push	r28
    3052:	00 d0       	rcall	.+0      	; 0x3054 <DcMotor_VidRotate+0x6>
    3054:	0f 92       	push	r0
    3056:	cd b7       	in	r28, 0x3d	; 61
    3058:	de b7       	in	r29, 0x3e	; 62
    305a:	89 83       	std	Y+1, r24	; 0x01
	switch(state){
    305c:	89 81       	ldd	r24, Y+1	; 0x01
    305e:	28 2f       	mov	r18, r24
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	3b 83       	std	Y+3, r19	; 0x03
    3064:	2a 83       	std	Y+2, r18	; 0x02
    3066:	8a 81       	ldd	r24, Y+2	; 0x02
    3068:	9b 81       	ldd	r25, Y+3	; 0x03
    306a:	81 30       	cpi	r24, 0x01	; 1
    306c:	91 05       	cpc	r25, r1
    306e:	a1 f0       	breq	.+40     	; 0x3098 <DcMotor_VidRotate+0x4a>
    3070:	2a 81       	ldd	r18, Y+2	; 0x02
    3072:	3b 81       	ldd	r19, Y+3	; 0x03
    3074:	22 30       	cpi	r18, 0x02	; 2
    3076:	31 05       	cpc	r19, r1
    3078:	d1 f0       	breq	.+52     	; 0x30ae <DcMotor_VidRotate+0x60>
    307a:	8a 81       	ldd	r24, Y+2	; 0x02
    307c:	9b 81       	ldd	r25, Y+3	; 0x03
    307e:	00 97       	sbiw	r24, 0x00	; 0
    3080:	01 f5       	brne	.+64     	; 0x30c2 <DcMotor_VidRotate+0x74>
	case STOP:
		/*make the dc motor stop*/
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN1 , LOW);
    3082:	83 e0       	ldi	r24, 0x03	; 3
    3084:	60 e0       	ldi	r22, 0x00	; 0
    3086:	40 e0       	ldi	r20, 0x00	; 0
    3088:	0e 94 a8 19 	call	0x3350	; 0x3350 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN2 , LOW);
    308c:	83 e0       	ldi	r24, 0x03	; 3
    308e:	61 e0       	ldi	r22, 0x01	; 1
    3090:	40 e0       	ldi	r20, 0x00	; 0
    3092:	0e 94 a8 19 	call	0x3350	; 0x3350 <DIO_VidSetPinValue>
    3096:	15 c0       	rjmp	.+42     	; 0x30c2 <DcMotor_VidRotate+0x74>
		break;
	case CLK_WISE:
		/*make the dc motor start in CLOCK_WISE direction*/
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN1 , LOW);
    3098:	83 e0       	ldi	r24, 0x03	; 3
    309a:	60 e0       	ldi	r22, 0x00	; 0
    309c:	40 e0       	ldi	r20, 0x00	; 0
    309e:	0e 94 a8 19 	call	0x3350	; 0x3350 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN2 , HIGH);
    30a2:	83 e0       	ldi	r24, 0x03	; 3
    30a4:	61 e0       	ldi	r22, 0x01	; 1
    30a6:	41 e0       	ldi	r20, 0x01	; 1
    30a8:	0e 94 a8 19 	call	0x3350	; 0x3350 <DIO_VidSetPinValue>
    30ac:	0a c0       	rjmp	.+20     	; 0x30c2 <DcMotor_VidRotate+0x74>
		break;
	case ANTI_CLK_WISE:
		/*make the dc motor start in ANTI_CLOCK_WISE  direction*/
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN1 , HIGH);
    30ae:	83 e0       	ldi	r24, 0x03	; 3
    30b0:	60 e0       	ldi	r22, 0x00	; 0
    30b2:	41 e0       	ldi	r20, 0x01	; 1
    30b4:	0e 94 a8 19 	call	0x3350	; 0x3350 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN2 , LOW);
    30b8:	83 e0       	ldi	r24, 0x03	; 3
    30ba:	61 e0       	ldi	r22, 0x01	; 1
    30bc:	40 e0       	ldi	r20, 0x00	; 0
    30be:	0e 94 a8 19 	call	0x3350	; 0x3350 <DIO_VidSetPinValue>
		break;
	}
}
    30c2:	0f 90       	pop	r0
    30c4:	0f 90       	pop	r0
    30c6:	0f 90       	pop	r0
    30c8:	cf 91       	pop	r28
    30ca:	df 91       	pop	r29
    30cc:	08 95       	ret

000030ce <DIO_VidSetPinDirection>:
#include"STD_TYPES.h"
#include"BIT_MATH.h"
#include"DIO_private.h"
#include"DIO_interface.h"

void DIO_VidSetPinDirection (u8 Copy_U8Port , u8 Copy_U8Pin , u8 Copy_U8Dir ) {
    30ce:	df 93       	push	r29
    30d0:	cf 93       	push	r28
    30d2:	cd b7       	in	r28, 0x3d	; 61
    30d4:	de b7       	in	r29, 0x3e	; 62
    30d6:	27 97       	sbiw	r28, 0x07	; 7
    30d8:	0f b6       	in	r0, 0x3f	; 63
    30da:	f8 94       	cli
    30dc:	de bf       	out	0x3e, r29	; 62
    30de:	0f be       	out	0x3f, r0	; 63
    30e0:	cd bf       	out	0x3d, r28	; 61
    30e2:	89 83       	std	Y+1, r24	; 0x01
    30e4:	6a 83       	std	Y+2, r22	; 0x02
    30e6:	4b 83       	std	Y+3, r20	; 0x03
	if ( 1 == Copy_U8Dir ){
    30e8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ea:	81 30       	cpi	r24, 0x01	; 1
    30ec:	09 f0       	breq	.+2      	; 0x30f0 <DIO_VidSetPinDirection+0x22>
    30ee:	6f c0       	rjmp	.+222    	; 0x31ce <DIO_VidSetPinDirection+0x100>
		switch (Copy_U8Port){
    30f0:	89 81       	ldd	r24, Y+1	; 0x01
    30f2:	28 2f       	mov	r18, r24
    30f4:	30 e0       	ldi	r19, 0x00	; 0
    30f6:	3f 83       	std	Y+7, r19	; 0x07
    30f8:	2e 83       	std	Y+6, r18	; 0x06
    30fa:	8e 81       	ldd	r24, Y+6	; 0x06
    30fc:	9f 81       	ldd	r25, Y+7	; 0x07
    30fe:	81 30       	cpi	r24, 0x01	; 1
    3100:	91 05       	cpc	r25, r1
    3102:	49 f1       	breq	.+82     	; 0x3156 <DIO_VidSetPinDirection+0x88>
    3104:	2e 81       	ldd	r18, Y+6	; 0x06
    3106:	3f 81       	ldd	r19, Y+7	; 0x07
    3108:	22 30       	cpi	r18, 0x02	; 2
    310a:	31 05       	cpc	r19, r1
    310c:	2c f4       	brge	.+10     	; 0x3118 <DIO_VidSetPinDirection+0x4a>
    310e:	8e 81       	ldd	r24, Y+6	; 0x06
    3110:	9f 81       	ldd	r25, Y+7	; 0x07
    3112:	00 97       	sbiw	r24, 0x00	; 0
    3114:	61 f0       	breq	.+24     	; 0x312e <DIO_VidSetPinDirection+0x60>
    3116:	d2 c0       	rjmp	.+420    	; 0x32bc <DIO_VidSetPinDirection+0x1ee>
    3118:	2e 81       	ldd	r18, Y+6	; 0x06
    311a:	3f 81       	ldd	r19, Y+7	; 0x07
    311c:	22 30       	cpi	r18, 0x02	; 2
    311e:	31 05       	cpc	r19, r1
    3120:	71 f1       	breq	.+92     	; 0x317e <DIO_VidSetPinDirection+0xb0>
    3122:	8e 81       	ldd	r24, Y+6	; 0x06
    3124:	9f 81       	ldd	r25, Y+7	; 0x07
    3126:	83 30       	cpi	r24, 0x03	; 3
    3128:	91 05       	cpc	r25, r1
    312a:	e9 f1       	breq	.+122    	; 0x31a6 <DIO_VidSetPinDirection+0xd8>
    312c:	c7 c0       	rjmp	.+398    	; 0x32bc <DIO_VidSetPinDirection+0x1ee>
			case 0 : 
			    SET_BIT(DDRA,Copy_U8Pin);
    312e:	aa e3       	ldi	r26, 0x3A	; 58
    3130:	b0 e0       	ldi	r27, 0x00	; 0
    3132:	ea e3       	ldi	r30, 0x3A	; 58
    3134:	f0 e0       	ldi	r31, 0x00	; 0
    3136:	80 81       	ld	r24, Z
    3138:	48 2f       	mov	r20, r24
    313a:	8a 81       	ldd	r24, Y+2	; 0x02
    313c:	28 2f       	mov	r18, r24
    313e:	30 e0       	ldi	r19, 0x00	; 0
    3140:	81 e0       	ldi	r24, 0x01	; 1
    3142:	90 e0       	ldi	r25, 0x00	; 0
    3144:	02 2e       	mov	r0, r18
    3146:	02 c0       	rjmp	.+4      	; 0x314c <DIO_VidSetPinDirection+0x7e>
    3148:	88 0f       	add	r24, r24
    314a:	99 1f       	adc	r25, r25
    314c:	0a 94       	dec	r0
    314e:	e2 f7       	brpl	.-8      	; 0x3148 <DIO_VidSetPinDirection+0x7a>
    3150:	84 2b       	or	r24, r20
    3152:	8c 93       	st	X, r24
    3154:	b3 c0       	rjmp	.+358    	; 0x32bc <DIO_VidSetPinDirection+0x1ee>
			    break ;  
			case 1 : 
			    SET_BIT(DDRB,Copy_U8Pin);
    3156:	a7 e3       	ldi	r26, 0x37	; 55
    3158:	b0 e0       	ldi	r27, 0x00	; 0
    315a:	e7 e3       	ldi	r30, 0x37	; 55
    315c:	f0 e0       	ldi	r31, 0x00	; 0
    315e:	80 81       	ld	r24, Z
    3160:	48 2f       	mov	r20, r24
    3162:	8a 81       	ldd	r24, Y+2	; 0x02
    3164:	28 2f       	mov	r18, r24
    3166:	30 e0       	ldi	r19, 0x00	; 0
    3168:	81 e0       	ldi	r24, 0x01	; 1
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	02 2e       	mov	r0, r18
    316e:	02 c0       	rjmp	.+4      	; 0x3174 <DIO_VidSetPinDirection+0xa6>
    3170:	88 0f       	add	r24, r24
    3172:	99 1f       	adc	r25, r25
    3174:	0a 94       	dec	r0
    3176:	e2 f7       	brpl	.-8      	; 0x3170 <DIO_VidSetPinDirection+0xa2>
    3178:	84 2b       	or	r24, r20
    317a:	8c 93       	st	X, r24
    317c:	9f c0       	rjmp	.+318    	; 0x32bc <DIO_VidSetPinDirection+0x1ee>
			    break ;			
			case 2 : 
			    SET_BIT(DDRC,Copy_U8Pin);
    317e:	a4 e3       	ldi	r26, 0x34	; 52
    3180:	b0 e0       	ldi	r27, 0x00	; 0
    3182:	e4 e3       	ldi	r30, 0x34	; 52
    3184:	f0 e0       	ldi	r31, 0x00	; 0
    3186:	80 81       	ld	r24, Z
    3188:	48 2f       	mov	r20, r24
    318a:	8a 81       	ldd	r24, Y+2	; 0x02
    318c:	28 2f       	mov	r18, r24
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	81 e0       	ldi	r24, 0x01	; 1
    3192:	90 e0       	ldi	r25, 0x00	; 0
    3194:	02 2e       	mov	r0, r18
    3196:	02 c0       	rjmp	.+4      	; 0x319c <DIO_VidSetPinDirection+0xce>
    3198:	88 0f       	add	r24, r24
    319a:	99 1f       	adc	r25, r25
    319c:	0a 94       	dec	r0
    319e:	e2 f7       	brpl	.-8      	; 0x3198 <DIO_VidSetPinDirection+0xca>
    31a0:	84 2b       	or	r24, r20
    31a2:	8c 93       	st	X, r24
    31a4:	8b c0       	rjmp	.+278    	; 0x32bc <DIO_VidSetPinDirection+0x1ee>
			    break ;  
			case 3 : 
			    SET_BIT(DDRD,Copy_U8Pin);
    31a6:	a1 e3       	ldi	r26, 0x31	; 49
    31a8:	b0 e0       	ldi	r27, 0x00	; 0
    31aa:	e1 e3       	ldi	r30, 0x31	; 49
    31ac:	f0 e0       	ldi	r31, 0x00	; 0
    31ae:	80 81       	ld	r24, Z
    31b0:	48 2f       	mov	r20, r24
    31b2:	8a 81       	ldd	r24, Y+2	; 0x02
    31b4:	28 2f       	mov	r18, r24
    31b6:	30 e0       	ldi	r19, 0x00	; 0
    31b8:	81 e0       	ldi	r24, 0x01	; 1
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	02 2e       	mov	r0, r18
    31be:	02 c0       	rjmp	.+4      	; 0x31c4 <DIO_VidSetPinDirection+0xf6>
    31c0:	88 0f       	add	r24, r24
    31c2:	99 1f       	adc	r25, r25
    31c4:	0a 94       	dec	r0
    31c6:	e2 f7       	brpl	.-8      	; 0x31c0 <DIO_VidSetPinDirection+0xf2>
    31c8:	84 2b       	or	r24, r20
    31ca:	8c 93       	st	X, r24
    31cc:	77 c0       	rjmp	.+238    	; 0x32bc <DIO_VidSetPinDirection+0x1ee>
			    break ; 
		}//end switch
	}//end if
	else if ( 0 == Copy_U8Dir ) {
    31ce:	8b 81       	ldd	r24, Y+3	; 0x03
    31d0:	88 23       	and	r24, r24
    31d2:	09 f0       	breq	.+2      	; 0x31d6 <DIO_VidSetPinDirection+0x108>
    31d4:	73 c0       	rjmp	.+230    	; 0x32bc <DIO_VidSetPinDirection+0x1ee>
		switch (Copy_U8Port){
    31d6:	89 81       	ldd	r24, Y+1	; 0x01
    31d8:	28 2f       	mov	r18, r24
    31da:	30 e0       	ldi	r19, 0x00	; 0
    31dc:	3d 83       	std	Y+5, r19	; 0x05
    31de:	2c 83       	std	Y+4, r18	; 0x04
    31e0:	8c 81       	ldd	r24, Y+4	; 0x04
    31e2:	9d 81       	ldd	r25, Y+5	; 0x05
    31e4:	81 30       	cpi	r24, 0x01	; 1
    31e6:	91 05       	cpc	r25, r1
    31e8:	59 f1       	breq	.+86     	; 0x3240 <DIO_VidSetPinDirection+0x172>
    31ea:	2c 81       	ldd	r18, Y+4	; 0x04
    31ec:	3d 81       	ldd	r19, Y+5	; 0x05
    31ee:	22 30       	cpi	r18, 0x02	; 2
    31f0:	31 05       	cpc	r19, r1
    31f2:	2c f4       	brge	.+10     	; 0x31fe <DIO_VidSetPinDirection+0x130>
    31f4:	8c 81       	ldd	r24, Y+4	; 0x04
    31f6:	9d 81       	ldd	r25, Y+5	; 0x05
    31f8:	00 97       	sbiw	r24, 0x00	; 0
    31fa:	69 f0       	breq	.+26     	; 0x3216 <DIO_VidSetPinDirection+0x148>
    31fc:	5f c0       	rjmp	.+190    	; 0x32bc <DIO_VidSetPinDirection+0x1ee>
    31fe:	2c 81       	ldd	r18, Y+4	; 0x04
    3200:	3d 81       	ldd	r19, Y+5	; 0x05
    3202:	22 30       	cpi	r18, 0x02	; 2
    3204:	31 05       	cpc	r19, r1
    3206:	89 f1       	breq	.+98     	; 0x326a <DIO_VidSetPinDirection+0x19c>
    3208:	8c 81       	ldd	r24, Y+4	; 0x04
    320a:	9d 81       	ldd	r25, Y+5	; 0x05
    320c:	83 30       	cpi	r24, 0x03	; 3
    320e:	91 05       	cpc	r25, r1
    3210:	09 f4       	brne	.+2      	; 0x3214 <DIO_VidSetPinDirection+0x146>
    3212:	40 c0       	rjmp	.+128    	; 0x3294 <DIO_VidSetPinDirection+0x1c6>
    3214:	53 c0       	rjmp	.+166    	; 0x32bc <DIO_VidSetPinDirection+0x1ee>
			case 0 : 
			    CLR_BIT(DDRA,Copy_U8Pin);
    3216:	aa e3       	ldi	r26, 0x3A	; 58
    3218:	b0 e0       	ldi	r27, 0x00	; 0
    321a:	ea e3       	ldi	r30, 0x3A	; 58
    321c:	f0 e0       	ldi	r31, 0x00	; 0
    321e:	80 81       	ld	r24, Z
    3220:	48 2f       	mov	r20, r24
    3222:	8a 81       	ldd	r24, Y+2	; 0x02
    3224:	28 2f       	mov	r18, r24
    3226:	30 e0       	ldi	r19, 0x00	; 0
    3228:	81 e0       	ldi	r24, 0x01	; 1
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	02 2e       	mov	r0, r18
    322e:	02 c0       	rjmp	.+4      	; 0x3234 <DIO_VidSetPinDirection+0x166>
    3230:	88 0f       	add	r24, r24
    3232:	99 1f       	adc	r25, r25
    3234:	0a 94       	dec	r0
    3236:	e2 f7       	brpl	.-8      	; 0x3230 <DIO_VidSetPinDirection+0x162>
    3238:	80 95       	com	r24
    323a:	84 23       	and	r24, r20
    323c:	8c 93       	st	X, r24
    323e:	3e c0       	rjmp	.+124    	; 0x32bc <DIO_VidSetPinDirection+0x1ee>
			    break ;  
			case 1 : 
			    CLR_BIT(DDRB,Copy_U8Pin);
    3240:	a7 e3       	ldi	r26, 0x37	; 55
    3242:	b0 e0       	ldi	r27, 0x00	; 0
    3244:	e7 e3       	ldi	r30, 0x37	; 55
    3246:	f0 e0       	ldi	r31, 0x00	; 0
    3248:	80 81       	ld	r24, Z
    324a:	48 2f       	mov	r20, r24
    324c:	8a 81       	ldd	r24, Y+2	; 0x02
    324e:	28 2f       	mov	r18, r24
    3250:	30 e0       	ldi	r19, 0x00	; 0
    3252:	81 e0       	ldi	r24, 0x01	; 1
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	02 2e       	mov	r0, r18
    3258:	02 c0       	rjmp	.+4      	; 0x325e <DIO_VidSetPinDirection+0x190>
    325a:	88 0f       	add	r24, r24
    325c:	99 1f       	adc	r25, r25
    325e:	0a 94       	dec	r0
    3260:	e2 f7       	brpl	.-8      	; 0x325a <DIO_VidSetPinDirection+0x18c>
    3262:	80 95       	com	r24
    3264:	84 23       	and	r24, r20
    3266:	8c 93       	st	X, r24
    3268:	29 c0       	rjmp	.+82     	; 0x32bc <DIO_VidSetPinDirection+0x1ee>
			    break ;			
			case 2 : 
			    CLR_BIT(DDRC,Copy_U8Pin);
    326a:	a4 e3       	ldi	r26, 0x34	; 52
    326c:	b0 e0       	ldi	r27, 0x00	; 0
    326e:	e4 e3       	ldi	r30, 0x34	; 52
    3270:	f0 e0       	ldi	r31, 0x00	; 0
    3272:	80 81       	ld	r24, Z
    3274:	48 2f       	mov	r20, r24
    3276:	8a 81       	ldd	r24, Y+2	; 0x02
    3278:	28 2f       	mov	r18, r24
    327a:	30 e0       	ldi	r19, 0x00	; 0
    327c:	81 e0       	ldi	r24, 0x01	; 1
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	02 2e       	mov	r0, r18
    3282:	02 c0       	rjmp	.+4      	; 0x3288 <DIO_VidSetPinDirection+0x1ba>
    3284:	88 0f       	add	r24, r24
    3286:	99 1f       	adc	r25, r25
    3288:	0a 94       	dec	r0
    328a:	e2 f7       	brpl	.-8      	; 0x3284 <DIO_VidSetPinDirection+0x1b6>
    328c:	80 95       	com	r24
    328e:	84 23       	and	r24, r20
    3290:	8c 93       	st	X, r24
    3292:	14 c0       	rjmp	.+40     	; 0x32bc <DIO_VidSetPinDirection+0x1ee>
			    break ;  
			case 3 : 
			    CLR_BIT(DDRD,Copy_U8Pin);
    3294:	a1 e3       	ldi	r26, 0x31	; 49
    3296:	b0 e0       	ldi	r27, 0x00	; 0
    3298:	e1 e3       	ldi	r30, 0x31	; 49
    329a:	f0 e0       	ldi	r31, 0x00	; 0
    329c:	80 81       	ld	r24, Z
    329e:	48 2f       	mov	r20, r24
    32a0:	8a 81       	ldd	r24, Y+2	; 0x02
    32a2:	28 2f       	mov	r18, r24
    32a4:	30 e0       	ldi	r19, 0x00	; 0
    32a6:	81 e0       	ldi	r24, 0x01	; 1
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	02 2e       	mov	r0, r18
    32ac:	02 c0       	rjmp	.+4      	; 0x32b2 <DIO_VidSetPinDirection+0x1e4>
    32ae:	88 0f       	add	r24, r24
    32b0:	99 1f       	adc	r25, r25
    32b2:	0a 94       	dec	r0
    32b4:	e2 f7       	brpl	.-8      	; 0x32ae <DIO_VidSetPinDirection+0x1e0>
    32b6:	80 95       	com	r24
    32b8:	84 23       	and	r24, r20
    32ba:	8c 93       	st	X, r24
			    break ; 
		}//end switch
	}//end else if 
}//end FUNC DIO_VidSetPinDirection
    32bc:	27 96       	adiw	r28, 0x07	; 7
    32be:	0f b6       	in	r0, 0x3f	; 63
    32c0:	f8 94       	cli
    32c2:	de bf       	out	0x3e, r29	; 62
    32c4:	0f be       	out	0x3f, r0	; 63
    32c6:	cd bf       	out	0x3d, r28	; 61
    32c8:	cf 91       	pop	r28
    32ca:	df 91       	pop	r29
    32cc:	08 95       	ret

000032ce <DIO_VidSetPortDirection>:
void DIO_VidSetPortDirection (u8 Copy_U8Port , u8 Copy_U8Dir ) {
    32ce:	df 93       	push	r29
    32d0:	cf 93       	push	r28
    32d2:	00 d0       	rcall	.+0      	; 0x32d4 <DIO_VidSetPortDirection+0x6>
    32d4:	00 d0       	rcall	.+0      	; 0x32d6 <DIO_VidSetPortDirection+0x8>
    32d6:	cd b7       	in	r28, 0x3d	; 61
    32d8:	de b7       	in	r29, 0x3e	; 62
    32da:	89 83       	std	Y+1, r24	; 0x01
    32dc:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_U8Port){
    32de:	89 81       	ldd	r24, Y+1	; 0x01
    32e0:	28 2f       	mov	r18, r24
    32e2:	30 e0       	ldi	r19, 0x00	; 0
    32e4:	3c 83       	std	Y+4, r19	; 0x04
    32e6:	2b 83       	std	Y+3, r18	; 0x03
    32e8:	8b 81       	ldd	r24, Y+3	; 0x03
    32ea:	9c 81       	ldd	r25, Y+4	; 0x04
    32ec:	81 30       	cpi	r24, 0x01	; 1
    32ee:	91 05       	cpc	r25, r1
    32f0:	d1 f0       	breq	.+52     	; 0x3326 <DIO_VidSetPortDirection+0x58>
    32f2:	2b 81       	ldd	r18, Y+3	; 0x03
    32f4:	3c 81       	ldd	r19, Y+4	; 0x04
    32f6:	22 30       	cpi	r18, 0x02	; 2
    32f8:	31 05       	cpc	r19, r1
    32fa:	2c f4       	brge	.+10     	; 0x3306 <DIO_VidSetPortDirection+0x38>
    32fc:	8b 81       	ldd	r24, Y+3	; 0x03
    32fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3300:	00 97       	sbiw	r24, 0x00	; 0
    3302:	61 f0       	breq	.+24     	; 0x331c <DIO_VidSetPortDirection+0x4e>
    3304:	1e c0       	rjmp	.+60     	; 0x3342 <DIO_VidSetPortDirection+0x74>
    3306:	2b 81       	ldd	r18, Y+3	; 0x03
    3308:	3c 81       	ldd	r19, Y+4	; 0x04
    330a:	22 30       	cpi	r18, 0x02	; 2
    330c:	31 05       	cpc	r19, r1
    330e:	81 f0       	breq	.+32     	; 0x3330 <DIO_VidSetPortDirection+0x62>
    3310:	8b 81       	ldd	r24, Y+3	; 0x03
    3312:	9c 81       	ldd	r25, Y+4	; 0x04
    3314:	83 30       	cpi	r24, 0x03	; 3
    3316:	91 05       	cpc	r25, r1
    3318:	81 f0       	breq	.+32     	; 0x333a <DIO_VidSetPortDirection+0x6c>
    331a:	13 c0       	rjmp	.+38     	; 0x3342 <DIO_VidSetPortDirection+0x74>
		case 0 : 
			DDRA = Copy_U8Dir ;
    331c:	ea e3       	ldi	r30, 0x3A	; 58
    331e:	f0 e0       	ldi	r31, 0x00	; 0
    3320:	8a 81       	ldd	r24, Y+2	; 0x02
    3322:	80 83       	st	Z, r24
    3324:	0e c0       	rjmp	.+28     	; 0x3342 <DIO_VidSetPortDirection+0x74>
			break ;  
		case 1 : 
			DDRB = Copy_U8Dir ;
    3326:	e7 e3       	ldi	r30, 0x37	; 55
    3328:	f0 e0       	ldi	r31, 0x00	; 0
    332a:	8a 81       	ldd	r24, Y+2	; 0x02
    332c:	80 83       	st	Z, r24
    332e:	09 c0       	rjmp	.+18     	; 0x3342 <DIO_VidSetPortDirection+0x74>
			break ;			
		case 2 : 
			DDRC = Copy_U8Dir ;
    3330:	e4 e3       	ldi	r30, 0x34	; 52
    3332:	f0 e0       	ldi	r31, 0x00	; 0
    3334:	8a 81       	ldd	r24, Y+2	; 0x02
    3336:	80 83       	st	Z, r24
    3338:	04 c0       	rjmp	.+8      	; 0x3342 <DIO_VidSetPortDirection+0x74>
			break ;  
		case 3 : 
			DDRD = Copy_U8Dir ;
    333a:	e1 e3       	ldi	r30, 0x31	; 49
    333c:	f0 e0       	ldi	r31, 0x00	; 0
    333e:	8a 81       	ldd	r24, Y+2	; 0x02
    3340:	80 83       	st	Z, r24
			break ; 
		}//end switch
}// end FUNC DIO_VidSetPortDirection
    3342:	0f 90       	pop	r0
    3344:	0f 90       	pop	r0
    3346:	0f 90       	pop	r0
    3348:	0f 90       	pop	r0
    334a:	cf 91       	pop	r28
    334c:	df 91       	pop	r29
    334e:	08 95       	ret

00003350 <DIO_VidSetPinValue>:
void DIO_VidSetPinValue (u8 Copy_U8Port , u8 Copy_U8Pin , u8 Copy_U8Val ) {
    3350:	df 93       	push	r29
    3352:	cf 93       	push	r28
    3354:	cd b7       	in	r28, 0x3d	; 61
    3356:	de b7       	in	r29, 0x3e	; 62
    3358:	27 97       	sbiw	r28, 0x07	; 7
    335a:	0f b6       	in	r0, 0x3f	; 63
    335c:	f8 94       	cli
    335e:	de bf       	out	0x3e, r29	; 62
    3360:	0f be       	out	0x3f, r0	; 63
    3362:	cd bf       	out	0x3d, r28	; 61
    3364:	89 83       	std	Y+1, r24	; 0x01
    3366:	6a 83       	std	Y+2, r22	; 0x02
    3368:	4b 83       	std	Y+3, r20	; 0x03
	if ( 1 == Copy_U8Val ){
    336a:	8b 81       	ldd	r24, Y+3	; 0x03
    336c:	81 30       	cpi	r24, 0x01	; 1
    336e:	09 f0       	breq	.+2      	; 0x3372 <DIO_VidSetPinValue+0x22>
    3370:	6f c0       	rjmp	.+222    	; 0x3450 <DIO_VidSetPinValue+0x100>
		switch (Copy_U8Port){
    3372:	89 81       	ldd	r24, Y+1	; 0x01
    3374:	28 2f       	mov	r18, r24
    3376:	30 e0       	ldi	r19, 0x00	; 0
    3378:	3f 83       	std	Y+7, r19	; 0x07
    337a:	2e 83       	std	Y+6, r18	; 0x06
    337c:	8e 81       	ldd	r24, Y+6	; 0x06
    337e:	9f 81       	ldd	r25, Y+7	; 0x07
    3380:	81 30       	cpi	r24, 0x01	; 1
    3382:	91 05       	cpc	r25, r1
    3384:	49 f1       	breq	.+82     	; 0x33d8 <DIO_VidSetPinValue+0x88>
    3386:	2e 81       	ldd	r18, Y+6	; 0x06
    3388:	3f 81       	ldd	r19, Y+7	; 0x07
    338a:	22 30       	cpi	r18, 0x02	; 2
    338c:	31 05       	cpc	r19, r1
    338e:	2c f4       	brge	.+10     	; 0x339a <DIO_VidSetPinValue+0x4a>
    3390:	8e 81       	ldd	r24, Y+6	; 0x06
    3392:	9f 81       	ldd	r25, Y+7	; 0x07
    3394:	00 97       	sbiw	r24, 0x00	; 0
    3396:	61 f0       	breq	.+24     	; 0x33b0 <DIO_VidSetPinValue+0x60>
    3398:	d2 c0       	rjmp	.+420    	; 0x353e <DIO_VidSetPinValue+0x1ee>
    339a:	2e 81       	ldd	r18, Y+6	; 0x06
    339c:	3f 81       	ldd	r19, Y+7	; 0x07
    339e:	22 30       	cpi	r18, 0x02	; 2
    33a0:	31 05       	cpc	r19, r1
    33a2:	71 f1       	breq	.+92     	; 0x3400 <DIO_VidSetPinValue+0xb0>
    33a4:	8e 81       	ldd	r24, Y+6	; 0x06
    33a6:	9f 81       	ldd	r25, Y+7	; 0x07
    33a8:	83 30       	cpi	r24, 0x03	; 3
    33aa:	91 05       	cpc	r25, r1
    33ac:	e9 f1       	breq	.+122    	; 0x3428 <DIO_VidSetPinValue+0xd8>
    33ae:	c7 c0       	rjmp	.+398    	; 0x353e <DIO_VidSetPinValue+0x1ee>
			case 0 : 
			    SET_BIT(PORTA,Copy_U8Pin);
    33b0:	ab e3       	ldi	r26, 0x3B	; 59
    33b2:	b0 e0       	ldi	r27, 0x00	; 0
    33b4:	eb e3       	ldi	r30, 0x3B	; 59
    33b6:	f0 e0       	ldi	r31, 0x00	; 0
    33b8:	80 81       	ld	r24, Z
    33ba:	48 2f       	mov	r20, r24
    33bc:	8a 81       	ldd	r24, Y+2	; 0x02
    33be:	28 2f       	mov	r18, r24
    33c0:	30 e0       	ldi	r19, 0x00	; 0
    33c2:	81 e0       	ldi	r24, 0x01	; 1
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	02 2e       	mov	r0, r18
    33c8:	02 c0       	rjmp	.+4      	; 0x33ce <DIO_VidSetPinValue+0x7e>
    33ca:	88 0f       	add	r24, r24
    33cc:	99 1f       	adc	r25, r25
    33ce:	0a 94       	dec	r0
    33d0:	e2 f7       	brpl	.-8      	; 0x33ca <DIO_VidSetPinValue+0x7a>
    33d2:	84 2b       	or	r24, r20
    33d4:	8c 93       	st	X, r24
    33d6:	b3 c0       	rjmp	.+358    	; 0x353e <DIO_VidSetPinValue+0x1ee>
			    break ;  
			case 1 : 
			    SET_BIT(PORTB,Copy_U8Pin);
    33d8:	a8 e3       	ldi	r26, 0x38	; 56
    33da:	b0 e0       	ldi	r27, 0x00	; 0
    33dc:	e8 e3       	ldi	r30, 0x38	; 56
    33de:	f0 e0       	ldi	r31, 0x00	; 0
    33e0:	80 81       	ld	r24, Z
    33e2:	48 2f       	mov	r20, r24
    33e4:	8a 81       	ldd	r24, Y+2	; 0x02
    33e6:	28 2f       	mov	r18, r24
    33e8:	30 e0       	ldi	r19, 0x00	; 0
    33ea:	81 e0       	ldi	r24, 0x01	; 1
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	02 2e       	mov	r0, r18
    33f0:	02 c0       	rjmp	.+4      	; 0x33f6 <DIO_VidSetPinValue+0xa6>
    33f2:	88 0f       	add	r24, r24
    33f4:	99 1f       	adc	r25, r25
    33f6:	0a 94       	dec	r0
    33f8:	e2 f7       	brpl	.-8      	; 0x33f2 <DIO_VidSetPinValue+0xa2>
    33fa:	84 2b       	or	r24, r20
    33fc:	8c 93       	st	X, r24
    33fe:	9f c0       	rjmp	.+318    	; 0x353e <DIO_VidSetPinValue+0x1ee>
			    break ;			
			case 2 : 
			    SET_BIT(PORTC,Copy_U8Pin);
    3400:	a5 e3       	ldi	r26, 0x35	; 53
    3402:	b0 e0       	ldi	r27, 0x00	; 0
    3404:	e5 e3       	ldi	r30, 0x35	; 53
    3406:	f0 e0       	ldi	r31, 0x00	; 0
    3408:	80 81       	ld	r24, Z
    340a:	48 2f       	mov	r20, r24
    340c:	8a 81       	ldd	r24, Y+2	; 0x02
    340e:	28 2f       	mov	r18, r24
    3410:	30 e0       	ldi	r19, 0x00	; 0
    3412:	81 e0       	ldi	r24, 0x01	; 1
    3414:	90 e0       	ldi	r25, 0x00	; 0
    3416:	02 2e       	mov	r0, r18
    3418:	02 c0       	rjmp	.+4      	; 0x341e <DIO_VidSetPinValue+0xce>
    341a:	88 0f       	add	r24, r24
    341c:	99 1f       	adc	r25, r25
    341e:	0a 94       	dec	r0
    3420:	e2 f7       	brpl	.-8      	; 0x341a <DIO_VidSetPinValue+0xca>
    3422:	84 2b       	or	r24, r20
    3424:	8c 93       	st	X, r24
    3426:	8b c0       	rjmp	.+278    	; 0x353e <DIO_VidSetPinValue+0x1ee>
			    break ;  
			case 3 : 
			    SET_BIT(PORTD,Copy_U8Pin);
    3428:	a2 e3       	ldi	r26, 0x32	; 50
    342a:	b0 e0       	ldi	r27, 0x00	; 0
    342c:	e2 e3       	ldi	r30, 0x32	; 50
    342e:	f0 e0       	ldi	r31, 0x00	; 0
    3430:	80 81       	ld	r24, Z
    3432:	48 2f       	mov	r20, r24
    3434:	8a 81       	ldd	r24, Y+2	; 0x02
    3436:	28 2f       	mov	r18, r24
    3438:	30 e0       	ldi	r19, 0x00	; 0
    343a:	81 e0       	ldi	r24, 0x01	; 1
    343c:	90 e0       	ldi	r25, 0x00	; 0
    343e:	02 2e       	mov	r0, r18
    3440:	02 c0       	rjmp	.+4      	; 0x3446 <DIO_VidSetPinValue+0xf6>
    3442:	88 0f       	add	r24, r24
    3444:	99 1f       	adc	r25, r25
    3446:	0a 94       	dec	r0
    3448:	e2 f7       	brpl	.-8      	; 0x3442 <DIO_VidSetPinValue+0xf2>
    344a:	84 2b       	or	r24, r20
    344c:	8c 93       	st	X, r24
    344e:	77 c0       	rjmp	.+238    	; 0x353e <DIO_VidSetPinValue+0x1ee>
			    break ; 
		}//end switch
	}//end if
	else if ( 0 == Copy_U8Val){
    3450:	8b 81       	ldd	r24, Y+3	; 0x03
    3452:	88 23       	and	r24, r24
    3454:	09 f0       	breq	.+2      	; 0x3458 <DIO_VidSetPinValue+0x108>
    3456:	73 c0       	rjmp	.+230    	; 0x353e <DIO_VidSetPinValue+0x1ee>
		switch (Copy_U8Port){
    3458:	89 81       	ldd	r24, Y+1	; 0x01
    345a:	28 2f       	mov	r18, r24
    345c:	30 e0       	ldi	r19, 0x00	; 0
    345e:	3d 83       	std	Y+5, r19	; 0x05
    3460:	2c 83       	std	Y+4, r18	; 0x04
    3462:	8c 81       	ldd	r24, Y+4	; 0x04
    3464:	9d 81       	ldd	r25, Y+5	; 0x05
    3466:	81 30       	cpi	r24, 0x01	; 1
    3468:	91 05       	cpc	r25, r1
    346a:	59 f1       	breq	.+86     	; 0x34c2 <DIO_VidSetPinValue+0x172>
    346c:	2c 81       	ldd	r18, Y+4	; 0x04
    346e:	3d 81       	ldd	r19, Y+5	; 0x05
    3470:	22 30       	cpi	r18, 0x02	; 2
    3472:	31 05       	cpc	r19, r1
    3474:	2c f4       	brge	.+10     	; 0x3480 <DIO_VidSetPinValue+0x130>
    3476:	8c 81       	ldd	r24, Y+4	; 0x04
    3478:	9d 81       	ldd	r25, Y+5	; 0x05
    347a:	00 97       	sbiw	r24, 0x00	; 0
    347c:	69 f0       	breq	.+26     	; 0x3498 <DIO_VidSetPinValue+0x148>
    347e:	5f c0       	rjmp	.+190    	; 0x353e <DIO_VidSetPinValue+0x1ee>
    3480:	2c 81       	ldd	r18, Y+4	; 0x04
    3482:	3d 81       	ldd	r19, Y+5	; 0x05
    3484:	22 30       	cpi	r18, 0x02	; 2
    3486:	31 05       	cpc	r19, r1
    3488:	89 f1       	breq	.+98     	; 0x34ec <DIO_VidSetPinValue+0x19c>
    348a:	8c 81       	ldd	r24, Y+4	; 0x04
    348c:	9d 81       	ldd	r25, Y+5	; 0x05
    348e:	83 30       	cpi	r24, 0x03	; 3
    3490:	91 05       	cpc	r25, r1
    3492:	09 f4       	brne	.+2      	; 0x3496 <DIO_VidSetPinValue+0x146>
    3494:	40 c0       	rjmp	.+128    	; 0x3516 <DIO_VidSetPinValue+0x1c6>
    3496:	53 c0       	rjmp	.+166    	; 0x353e <DIO_VidSetPinValue+0x1ee>
			case 0 : 
			    CLR_BIT(PORTA,Copy_U8Pin);
    3498:	ab e3       	ldi	r26, 0x3B	; 59
    349a:	b0 e0       	ldi	r27, 0x00	; 0
    349c:	eb e3       	ldi	r30, 0x3B	; 59
    349e:	f0 e0       	ldi	r31, 0x00	; 0
    34a0:	80 81       	ld	r24, Z
    34a2:	48 2f       	mov	r20, r24
    34a4:	8a 81       	ldd	r24, Y+2	; 0x02
    34a6:	28 2f       	mov	r18, r24
    34a8:	30 e0       	ldi	r19, 0x00	; 0
    34aa:	81 e0       	ldi	r24, 0x01	; 1
    34ac:	90 e0       	ldi	r25, 0x00	; 0
    34ae:	02 2e       	mov	r0, r18
    34b0:	02 c0       	rjmp	.+4      	; 0x34b6 <DIO_VidSetPinValue+0x166>
    34b2:	88 0f       	add	r24, r24
    34b4:	99 1f       	adc	r25, r25
    34b6:	0a 94       	dec	r0
    34b8:	e2 f7       	brpl	.-8      	; 0x34b2 <DIO_VidSetPinValue+0x162>
    34ba:	80 95       	com	r24
    34bc:	84 23       	and	r24, r20
    34be:	8c 93       	st	X, r24
    34c0:	3e c0       	rjmp	.+124    	; 0x353e <DIO_VidSetPinValue+0x1ee>
			    break ;  
			case 1 : 
			    CLR_BIT(PORTB,Copy_U8Pin);
    34c2:	a8 e3       	ldi	r26, 0x38	; 56
    34c4:	b0 e0       	ldi	r27, 0x00	; 0
    34c6:	e8 e3       	ldi	r30, 0x38	; 56
    34c8:	f0 e0       	ldi	r31, 0x00	; 0
    34ca:	80 81       	ld	r24, Z
    34cc:	48 2f       	mov	r20, r24
    34ce:	8a 81       	ldd	r24, Y+2	; 0x02
    34d0:	28 2f       	mov	r18, r24
    34d2:	30 e0       	ldi	r19, 0x00	; 0
    34d4:	81 e0       	ldi	r24, 0x01	; 1
    34d6:	90 e0       	ldi	r25, 0x00	; 0
    34d8:	02 2e       	mov	r0, r18
    34da:	02 c0       	rjmp	.+4      	; 0x34e0 <DIO_VidSetPinValue+0x190>
    34dc:	88 0f       	add	r24, r24
    34de:	99 1f       	adc	r25, r25
    34e0:	0a 94       	dec	r0
    34e2:	e2 f7       	brpl	.-8      	; 0x34dc <DIO_VidSetPinValue+0x18c>
    34e4:	80 95       	com	r24
    34e6:	84 23       	and	r24, r20
    34e8:	8c 93       	st	X, r24
    34ea:	29 c0       	rjmp	.+82     	; 0x353e <DIO_VidSetPinValue+0x1ee>
			    break ;			
			case 2 : 
			    CLR_BIT(PORTC,Copy_U8Pin);
    34ec:	a5 e3       	ldi	r26, 0x35	; 53
    34ee:	b0 e0       	ldi	r27, 0x00	; 0
    34f0:	e5 e3       	ldi	r30, 0x35	; 53
    34f2:	f0 e0       	ldi	r31, 0x00	; 0
    34f4:	80 81       	ld	r24, Z
    34f6:	48 2f       	mov	r20, r24
    34f8:	8a 81       	ldd	r24, Y+2	; 0x02
    34fa:	28 2f       	mov	r18, r24
    34fc:	30 e0       	ldi	r19, 0x00	; 0
    34fe:	81 e0       	ldi	r24, 0x01	; 1
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	02 2e       	mov	r0, r18
    3504:	02 c0       	rjmp	.+4      	; 0x350a <DIO_VidSetPinValue+0x1ba>
    3506:	88 0f       	add	r24, r24
    3508:	99 1f       	adc	r25, r25
    350a:	0a 94       	dec	r0
    350c:	e2 f7       	brpl	.-8      	; 0x3506 <DIO_VidSetPinValue+0x1b6>
    350e:	80 95       	com	r24
    3510:	84 23       	and	r24, r20
    3512:	8c 93       	st	X, r24
    3514:	14 c0       	rjmp	.+40     	; 0x353e <DIO_VidSetPinValue+0x1ee>
			    break ;  
			case 3 : 
			    CLR_BIT(PORTD,Copy_U8Pin);
    3516:	a2 e3       	ldi	r26, 0x32	; 50
    3518:	b0 e0       	ldi	r27, 0x00	; 0
    351a:	e2 e3       	ldi	r30, 0x32	; 50
    351c:	f0 e0       	ldi	r31, 0x00	; 0
    351e:	80 81       	ld	r24, Z
    3520:	48 2f       	mov	r20, r24
    3522:	8a 81       	ldd	r24, Y+2	; 0x02
    3524:	28 2f       	mov	r18, r24
    3526:	30 e0       	ldi	r19, 0x00	; 0
    3528:	81 e0       	ldi	r24, 0x01	; 1
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	02 2e       	mov	r0, r18
    352e:	02 c0       	rjmp	.+4      	; 0x3534 <DIO_VidSetPinValue+0x1e4>
    3530:	88 0f       	add	r24, r24
    3532:	99 1f       	adc	r25, r25
    3534:	0a 94       	dec	r0
    3536:	e2 f7       	brpl	.-8      	; 0x3530 <DIO_VidSetPinValue+0x1e0>
    3538:	80 95       	com	r24
    353a:	84 23       	and	r24, r20
    353c:	8c 93       	st	X, r24
			    break ; 
		}//end switch
	}//end else if
}// end FUNC DIO_VidSetPinValue
    353e:	27 96       	adiw	r28, 0x07	; 7
    3540:	0f b6       	in	r0, 0x3f	; 63
    3542:	f8 94       	cli
    3544:	de bf       	out	0x3e, r29	; 62
    3546:	0f be       	out	0x3f, r0	; 63
    3548:	cd bf       	out	0x3d, r28	; 61
    354a:	cf 91       	pop	r28
    354c:	df 91       	pop	r29
    354e:	08 95       	ret

00003550 <DIO_VidSetPortValue>:
void DIO_VidSetPortValue (u8 Copy_U8Port , u8 Copy_U8Val ) {
    3550:	df 93       	push	r29
    3552:	cf 93       	push	r28
    3554:	00 d0       	rcall	.+0      	; 0x3556 <DIO_VidSetPortValue+0x6>
    3556:	00 d0       	rcall	.+0      	; 0x3558 <DIO_VidSetPortValue+0x8>
    3558:	cd b7       	in	r28, 0x3d	; 61
    355a:	de b7       	in	r29, 0x3e	; 62
    355c:	89 83       	std	Y+1, r24	; 0x01
    355e:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_U8Port){
    3560:	89 81       	ldd	r24, Y+1	; 0x01
    3562:	28 2f       	mov	r18, r24
    3564:	30 e0       	ldi	r19, 0x00	; 0
    3566:	3c 83       	std	Y+4, r19	; 0x04
    3568:	2b 83       	std	Y+3, r18	; 0x03
    356a:	8b 81       	ldd	r24, Y+3	; 0x03
    356c:	9c 81       	ldd	r25, Y+4	; 0x04
    356e:	81 30       	cpi	r24, 0x01	; 1
    3570:	91 05       	cpc	r25, r1
    3572:	d1 f0       	breq	.+52     	; 0x35a8 <DIO_VidSetPortValue+0x58>
    3574:	2b 81       	ldd	r18, Y+3	; 0x03
    3576:	3c 81       	ldd	r19, Y+4	; 0x04
    3578:	22 30       	cpi	r18, 0x02	; 2
    357a:	31 05       	cpc	r19, r1
    357c:	2c f4       	brge	.+10     	; 0x3588 <DIO_VidSetPortValue+0x38>
    357e:	8b 81       	ldd	r24, Y+3	; 0x03
    3580:	9c 81       	ldd	r25, Y+4	; 0x04
    3582:	00 97       	sbiw	r24, 0x00	; 0
    3584:	61 f0       	breq	.+24     	; 0x359e <DIO_VidSetPortValue+0x4e>
    3586:	1e c0       	rjmp	.+60     	; 0x35c4 <DIO_VidSetPortValue+0x74>
    3588:	2b 81       	ldd	r18, Y+3	; 0x03
    358a:	3c 81       	ldd	r19, Y+4	; 0x04
    358c:	22 30       	cpi	r18, 0x02	; 2
    358e:	31 05       	cpc	r19, r1
    3590:	81 f0       	breq	.+32     	; 0x35b2 <DIO_VidSetPortValue+0x62>
    3592:	8b 81       	ldd	r24, Y+3	; 0x03
    3594:	9c 81       	ldd	r25, Y+4	; 0x04
    3596:	83 30       	cpi	r24, 0x03	; 3
    3598:	91 05       	cpc	r25, r1
    359a:	81 f0       	breq	.+32     	; 0x35bc <DIO_VidSetPortValue+0x6c>
    359c:	13 c0       	rjmp	.+38     	; 0x35c4 <DIO_VidSetPortValue+0x74>
		case 0 : 
			PORTA = Copy_U8Val ;
    359e:	eb e3       	ldi	r30, 0x3B	; 59
    35a0:	f0 e0       	ldi	r31, 0x00	; 0
    35a2:	8a 81       	ldd	r24, Y+2	; 0x02
    35a4:	80 83       	st	Z, r24
    35a6:	0e c0       	rjmp	.+28     	; 0x35c4 <DIO_VidSetPortValue+0x74>
			break ;  
		case 1 : 
			PORTB = Copy_U8Val ;
    35a8:	e8 e3       	ldi	r30, 0x38	; 56
    35aa:	f0 e0       	ldi	r31, 0x00	; 0
    35ac:	8a 81       	ldd	r24, Y+2	; 0x02
    35ae:	80 83       	st	Z, r24
    35b0:	09 c0       	rjmp	.+18     	; 0x35c4 <DIO_VidSetPortValue+0x74>
			break ;			
		case 2 : 
			PORTC = Copy_U8Val ;
    35b2:	e5 e3       	ldi	r30, 0x35	; 53
    35b4:	f0 e0       	ldi	r31, 0x00	; 0
    35b6:	8a 81       	ldd	r24, Y+2	; 0x02
    35b8:	80 83       	st	Z, r24
    35ba:	04 c0       	rjmp	.+8      	; 0x35c4 <DIO_VidSetPortValue+0x74>
			break ;  
		case 3 : 
			PORTD = Copy_U8Val ;
    35bc:	e2 e3       	ldi	r30, 0x32	; 50
    35be:	f0 e0       	ldi	r31, 0x00	; 0
    35c0:	8a 81       	ldd	r24, Y+2	; 0x02
    35c2:	80 83       	st	Z, r24
			break ; 
		}//end switch
}//end FUNC DIO_VidSetPortValue
    35c4:	0f 90       	pop	r0
    35c6:	0f 90       	pop	r0
    35c8:	0f 90       	pop	r0
    35ca:	0f 90       	pop	r0
    35cc:	cf 91       	pop	r28
    35ce:	df 91       	pop	r29
    35d0:	08 95       	ret

000035d2 <DIO_VidTogglePinValue>:
void DIO_VidTogglePinValue (u8 Copy_U8Port , u8 Copy_U8Pin ) {
    35d2:	df 93       	push	r29
    35d4:	cf 93       	push	r28
    35d6:	00 d0       	rcall	.+0      	; 0x35d8 <DIO_VidTogglePinValue+0x6>
    35d8:	00 d0       	rcall	.+0      	; 0x35da <DIO_VidTogglePinValue+0x8>
    35da:	cd b7       	in	r28, 0x3d	; 61
    35dc:	de b7       	in	r29, 0x3e	; 62
    35de:	89 83       	std	Y+1, r24	; 0x01
    35e0:	6a 83       	std	Y+2, r22	; 0x02
	switch ( Copy_U8Port ) {
    35e2:	89 81       	ldd	r24, Y+1	; 0x01
    35e4:	28 2f       	mov	r18, r24
    35e6:	30 e0       	ldi	r19, 0x00	; 0
    35e8:	3c 83       	std	Y+4, r19	; 0x04
    35ea:	2b 83       	std	Y+3, r18	; 0x03
    35ec:	8b 81       	ldd	r24, Y+3	; 0x03
    35ee:	9c 81       	ldd	r25, Y+4	; 0x04
    35f0:	81 30       	cpi	r24, 0x01	; 1
    35f2:	91 05       	cpc	r25, r1
    35f4:	49 f1       	breq	.+82     	; 0x3648 <DIO_VidTogglePinValue+0x76>
    35f6:	2b 81       	ldd	r18, Y+3	; 0x03
    35f8:	3c 81       	ldd	r19, Y+4	; 0x04
    35fa:	22 30       	cpi	r18, 0x02	; 2
    35fc:	31 05       	cpc	r19, r1
    35fe:	2c f4       	brge	.+10     	; 0x360a <DIO_VidTogglePinValue+0x38>
    3600:	8b 81       	ldd	r24, Y+3	; 0x03
    3602:	9c 81       	ldd	r25, Y+4	; 0x04
    3604:	00 97       	sbiw	r24, 0x00	; 0
    3606:	61 f0       	breq	.+24     	; 0x3620 <DIO_VidTogglePinValue+0x4e>
    3608:	5a c0       	rjmp	.+180    	; 0x36be <DIO_VidTogglePinValue+0xec>
    360a:	2b 81       	ldd	r18, Y+3	; 0x03
    360c:	3c 81       	ldd	r19, Y+4	; 0x04
    360e:	22 30       	cpi	r18, 0x02	; 2
    3610:	31 05       	cpc	r19, r1
    3612:	71 f1       	breq	.+92     	; 0x3670 <DIO_VidTogglePinValue+0x9e>
    3614:	8b 81       	ldd	r24, Y+3	; 0x03
    3616:	9c 81       	ldd	r25, Y+4	; 0x04
    3618:	83 30       	cpi	r24, 0x03	; 3
    361a:	91 05       	cpc	r25, r1
    361c:	e9 f1       	breq	.+122    	; 0x3698 <DIO_VidTogglePinValue+0xc6>
    361e:	4f c0       	rjmp	.+158    	; 0x36be <DIO_VidTogglePinValue+0xec>
		case 0 : 
		    TOGGLE_BIT( PORTA , Copy_U8Pin ) ;
    3620:	ab e3       	ldi	r26, 0x3B	; 59
    3622:	b0 e0       	ldi	r27, 0x00	; 0
    3624:	eb e3       	ldi	r30, 0x3B	; 59
    3626:	f0 e0       	ldi	r31, 0x00	; 0
    3628:	80 81       	ld	r24, Z
    362a:	48 2f       	mov	r20, r24
    362c:	8a 81       	ldd	r24, Y+2	; 0x02
    362e:	28 2f       	mov	r18, r24
    3630:	30 e0       	ldi	r19, 0x00	; 0
    3632:	81 e0       	ldi	r24, 0x01	; 1
    3634:	90 e0       	ldi	r25, 0x00	; 0
    3636:	02 2e       	mov	r0, r18
    3638:	02 c0       	rjmp	.+4      	; 0x363e <DIO_VidTogglePinValue+0x6c>
    363a:	88 0f       	add	r24, r24
    363c:	99 1f       	adc	r25, r25
    363e:	0a 94       	dec	r0
    3640:	e2 f7       	brpl	.-8      	; 0x363a <DIO_VidTogglePinValue+0x68>
    3642:	84 27       	eor	r24, r20
    3644:	8c 93       	st	X, r24
    3646:	3b c0       	rjmp	.+118    	; 0x36be <DIO_VidTogglePinValue+0xec>
			break ;  
		case 1 : 
			TOGGLE_BIT( PORTB , Copy_U8Pin ) ;
    3648:	a8 e3       	ldi	r26, 0x38	; 56
    364a:	b0 e0       	ldi	r27, 0x00	; 0
    364c:	e8 e3       	ldi	r30, 0x38	; 56
    364e:	f0 e0       	ldi	r31, 0x00	; 0
    3650:	80 81       	ld	r24, Z
    3652:	48 2f       	mov	r20, r24
    3654:	8a 81       	ldd	r24, Y+2	; 0x02
    3656:	28 2f       	mov	r18, r24
    3658:	30 e0       	ldi	r19, 0x00	; 0
    365a:	81 e0       	ldi	r24, 0x01	; 1
    365c:	90 e0       	ldi	r25, 0x00	; 0
    365e:	02 2e       	mov	r0, r18
    3660:	02 c0       	rjmp	.+4      	; 0x3666 <DIO_VidTogglePinValue+0x94>
    3662:	88 0f       	add	r24, r24
    3664:	99 1f       	adc	r25, r25
    3666:	0a 94       	dec	r0
    3668:	e2 f7       	brpl	.-8      	; 0x3662 <DIO_VidTogglePinValue+0x90>
    366a:	84 27       	eor	r24, r20
    366c:	8c 93       	st	X, r24
    366e:	27 c0       	rjmp	.+78     	; 0x36be <DIO_VidTogglePinValue+0xec>
			break ;			
		case 2 : 
			TOGGLE_BIT( PORTC , Copy_U8Pin ) ;
    3670:	a5 e3       	ldi	r26, 0x35	; 53
    3672:	b0 e0       	ldi	r27, 0x00	; 0
    3674:	e5 e3       	ldi	r30, 0x35	; 53
    3676:	f0 e0       	ldi	r31, 0x00	; 0
    3678:	80 81       	ld	r24, Z
    367a:	48 2f       	mov	r20, r24
    367c:	8a 81       	ldd	r24, Y+2	; 0x02
    367e:	28 2f       	mov	r18, r24
    3680:	30 e0       	ldi	r19, 0x00	; 0
    3682:	81 e0       	ldi	r24, 0x01	; 1
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	02 2e       	mov	r0, r18
    3688:	02 c0       	rjmp	.+4      	; 0x368e <DIO_VidTogglePinValue+0xbc>
    368a:	88 0f       	add	r24, r24
    368c:	99 1f       	adc	r25, r25
    368e:	0a 94       	dec	r0
    3690:	e2 f7       	brpl	.-8      	; 0x368a <DIO_VidTogglePinValue+0xb8>
    3692:	84 27       	eor	r24, r20
    3694:	8c 93       	st	X, r24
    3696:	13 c0       	rjmp	.+38     	; 0x36be <DIO_VidTogglePinValue+0xec>
			break ;  
		case 3 : 
			TOGGLE_BIT( PORTD , Copy_U8Pin ) ;
    3698:	a2 e3       	ldi	r26, 0x32	; 50
    369a:	b0 e0       	ldi	r27, 0x00	; 0
    369c:	e2 e3       	ldi	r30, 0x32	; 50
    369e:	f0 e0       	ldi	r31, 0x00	; 0
    36a0:	80 81       	ld	r24, Z
    36a2:	48 2f       	mov	r20, r24
    36a4:	8a 81       	ldd	r24, Y+2	; 0x02
    36a6:	28 2f       	mov	r18, r24
    36a8:	30 e0       	ldi	r19, 0x00	; 0
    36aa:	81 e0       	ldi	r24, 0x01	; 1
    36ac:	90 e0       	ldi	r25, 0x00	; 0
    36ae:	02 2e       	mov	r0, r18
    36b0:	02 c0       	rjmp	.+4      	; 0x36b6 <DIO_VidTogglePinValue+0xe4>
    36b2:	88 0f       	add	r24, r24
    36b4:	99 1f       	adc	r25, r25
    36b6:	0a 94       	dec	r0
    36b8:	e2 f7       	brpl	.-8      	; 0x36b2 <DIO_VidTogglePinValue+0xe0>
    36ba:	84 27       	eor	r24, r20
    36bc:	8c 93       	st	X, r24
			break ; 
	}//end switch
}//end FUNC DIO_VidTogglePinValue
    36be:	0f 90       	pop	r0
    36c0:	0f 90       	pop	r0
    36c2:	0f 90       	pop	r0
    36c4:	0f 90       	pop	r0
    36c6:	cf 91       	pop	r28
    36c8:	df 91       	pop	r29
    36ca:	08 95       	ret

000036cc <DIO_U8GetPinValue>:
u8 DIO_U8GetPinValue (u8 Copy_U8Port , u8 Copy_U8Pin ) {
    36cc:	df 93       	push	r29
    36ce:	cf 93       	push	r28
    36d0:	00 d0       	rcall	.+0      	; 0x36d2 <DIO_U8GetPinValue+0x6>
    36d2:	00 d0       	rcall	.+0      	; 0x36d4 <DIO_U8GetPinValue+0x8>
    36d4:	00 d0       	rcall	.+0      	; 0x36d6 <DIO_U8GetPinValue+0xa>
    36d6:	cd b7       	in	r28, 0x3d	; 61
    36d8:	de b7       	in	r29, 0x3e	; 62
    36da:	89 83       	std	Y+1, r24	; 0x01
    36dc:	6a 83       	std	Y+2, r22	; 0x02
	switch ( Copy_U8Port ) {
    36de:	89 81       	ldd	r24, Y+1	; 0x01
    36e0:	28 2f       	mov	r18, r24
    36e2:	30 e0       	ldi	r19, 0x00	; 0
    36e4:	3d 83       	std	Y+5, r19	; 0x05
    36e6:	2c 83       	std	Y+4, r18	; 0x04
    36e8:	4c 81       	ldd	r20, Y+4	; 0x04
    36ea:	5d 81       	ldd	r21, Y+5	; 0x05
    36ec:	41 30       	cpi	r20, 0x01	; 1
    36ee:	51 05       	cpc	r21, r1
    36f0:	49 f1       	breq	.+82     	; 0x3744 <DIO_U8GetPinValue+0x78>
    36f2:	8c 81       	ldd	r24, Y+4	; 0x04
    36f4:	9d 81       	ldd	r25, Y+5	; 0x05
    36f6:	82 30       	cpi	r24, 0x02	; 2
    36f8:	91 05       	cpc	r25, r1
    36fa:	34 f4       	brge	.+12     	; 0x3708 <DIO_U8GetPinValue+0x3c>
    36fc:	2c 81       	ldd	r18, Y+4	; 0x04
    36fe:	3d 81       	ldd	r19, Y+5	; 0x05
    3700:	21 15       	cp	r18, r1
    3702:	31 05       	cpc	r19, r1
    3704:	61 f0       	breq	.+24     	; 0x371e <DIO_U8GetPinValue+0x52>
    3706:	57 c0       	rjmp	.+174    	; 0x37b6 <DIO_U8GetPinValue+0xea>
    3708:	4c 81       	ldd	r20, Y+4	; 0x04
    370a:	5d 81       	ldd	r21, Y+5	; 0x05
    370c:	42 30       	cpi	r20, 0x02	; 2
    370e:	51 05       	cpc	r21, r1
    3710:	61 f1       	breq	.+88     	; 0x376a <DIO_U8GetPinValue+0x9e>
    3712:	8c 81       	ldd	r24, Y+4	; 0x04
    3714:	9d 81       	ldd	r25, Y+5	; 0x05
    3716:	83 30       	cpi	r24, 0x03	; 3
    3718:	91 05       	cpc	r25, r1
    371a:	d1 f1       	breq	.+116    	; 0x3790 <DIO_U8GetPinValue+0xc4>
    371c:	4c c0       	rjmp	.+152    	; 0x37b6 <DIO_U8GetPinValue+0xea>
		case 0 : 
		   return GET_BIT( PINA , Copy_U8Pin ) ;
    371e:	e9 e3       	ldi	r30, 0x39	; 57
    3720:	f0 e0       	ldi	r31, 0x00	; 0
    3722:	80 81       	ld	r24, Z
    3724:	28 2f       	mov	r18, r24
    3726:	30 e0       	ldi	r19, 0x00	; 0
    3728:	8a 81       	ldd	r24, Y+2	; 0x02
    372a:	88 2f       	mov	r24, r24
    372c:	90 e0       	ldi	r25, 0x00	; 0
    372e:	a9 01       	movw	r20, r18
    3730:	02 c0       	rjmp	.+4      	; 0x3736 <DIO_U8GetPinValue+0x6a>
    3732:	55 95       	asr	r21
    3734:	47 95       	ror	r20
    3736:	8a 95       	dec	r24
    3738:	e2 f7       	brpl	.-8      	; 0x3732 <DIO_U8GetPinValue+0x66>
    373a:	ca 01       	movw	r24, r20
    373c:	58 2f       	mov	r21, r24
    373e:	51 70       	andi	r21, 0x01	; 1
    3740:	5b 83       	std	Y+3, r21	; 0x03
    3742:	3a c0       	rjmp	.+116    	; 0x37b8 <DIO_U8GetPinValue+0xec>
		case 1 : 
			return GET_BIT( PINB , Copy_U8Pin ) ;
    3744:	e6 e3       	ldi	r30, 0x36	; 54
    3746:	f0 e0       	ldi	r31, 0x00	; 0
    3748:	80 81       	ld	r24, Z
    374a:	28 2f       	mov	r18, r24
    374c:	30 e0       	ldi	r19, 0x00	; 0
    374e:	8a 81       	ldd	r24, Y+2	; 0x02
    3750:	88 2f       	mov	r24, r24
    3752:	90 e0       	ldi	r25, 0x00	; 0
    3754:	a9 01       	movw	r20, r18
    3756:	02 c0       	rjmp	.+4      	; 0x375c <DIO_U8GetPinValue+0x90>
    3758:	55 95       	asr	r21
    375a:	47 95       	ror	r20
    375c:	8a 95       	dec	r24
    375e:	e2 f7       	brpl	.-8      	; 0x3758 <DIO_U8GetPinValue+0x8c>
    3760:	ca 01       	movw	r24, r20
    3762:	58 2f       	mov	r21, r24
    3764:	51 70       	andi	r21, 0x01	; 1
    3766:	5b 83       	std	Y+3, r21	; 0x03
    3768:	27 c0       	rjmp	.+78     	; 0x37b8 <DIO_U8GetPinValue+0xec>
		case 2 : 
			return GET_BIT( PINC , Copy_U8Pin ) ;
    376a:	e3 e3       	ldi	r30, 0x33	; 51
    376c:	f0 e0       	ldi	r31, 0x00	; 0
    376e:	80 81       	ld	r24, Z
    3770:	28 2f       	mov	r18, r24
    3772:	30 e0       	ldi	r19, 0x00	; 0
    3774:	8a 81       	ldd	r24, Y+2	; 0x02
    3776:	88 2f       	mov	r24, r24
    3778:	90 e0       	ldi	r25, 0x00	; 0
    377a:	a9 01       	movw	r20, r18
    377c:	02 c0       	rjmp	.+4      	; 0x3782 <DIO_U8GetPinValue+0xb6>
    377e:	55 95       	asr	r21
    3780:	47 95       	ror	r20
    3782:	8a 95       	dec	r24
    3784:	e2 f7       	brpl	.-8      	; 0x377e <DIO_U8GetPinValue+0xb2>
    3786:	ca 01       	movw	r24, r20
    3788:	58 2f       	mov	r21, r24
    378a:	51 70       	andi	r21, 0x01	; 1
    378c:	5b 83       	std	Y+3, r21	; 0x03
    378e:	14 c0       	rjmp	.+40     	; 0x37b8 <DIO_U8GetPinValue+0xec>
		case 3 : 
			return GET_BIT( PIND , Copy_U8Pin ) ;
    3790:	e0 e3       	ldi	r30, 0x30	; 48
    3792:	f0 e0       	ldi	r31, 0x00	; 0
    3794:	80 81       	ld	r24, Z
    3796:	28 2f       	mov	r18, r24
    3798:	30 e0       	ldi	r19, 0x00	; 0
    379a:	8a 81       	ldd	r24, Y+2	; 0x02
    379c:	88 2f       	mov	r24, r24
    379e:	90 e0       	ldi	r25, 0x00	; 0
    37a0:	a9 01       	movw	r20, r18
    37a2:	02 c0       	rjmp	.+4      	; 0x37a8 <DIO_U8GetPinValue+0xdc>
    37a4:	55 95       	asr	r21
    37a6:	47 95       	ror	r20
    37a8:	8a 95       	dec	r24
    37aa:	e2 f7       	brpl	.-8      	; 0x37a4 <DIO_U8GetPinValue+0xd8>
    37ac:	ca 01       	movw	r24, r20
    37ae:	58 2f       	mov	r21, r24
    37b0:	51 70       	andi	r21, 0x01	; 1
    37b2:	5b 83       	std	Y+3, r21	; 0x03
    37b4:	01 c0       	rjmp	.+2      	; 0x37b8 <DIO_U8GetPinValue+0xec>
    37b6:	02 c0       	rjmp	.+4      	; 0x37bc <DIO_U8GetPinValue+0xf0>
	}//end switch	
}//end FUNC DIO_VidU8PinValue 
    37b8:	8b 81       	ldd	r24, Y+3	; 0x03
    37ba:	8e 83       	std	Y+6, r24	; 0x06
    37bc:	8e 81       	ldd	r24, Y+6	; 0x06
    37be:	26 96       	adiw	r28, 0x06	; 6
    37c0:	0f b6       	in	r0, 0x3f	; 63
    37c2:	f8 94       	cli
    37c4:	de bf       	out	0x3e, r29	; 62
    37c6:	0f be       	out	0x3f, r0	; 63
    37c8:	cd bf       	out	0x3d, r28	; 61
    37ca:	cf 91       	pop	r28
    37cc:	df 91       	pop	r29
    37ce:	08 95       	ret

000037d0 <EX_INT_VidSetCallBack>:
static void (*INT1_PFUNC)(void) = 0 ;
static void (*INT2_PFUNC)(void) = 0 ;


//preferred to use this FUNC in line 1 in main code to avoid some problems in memory
void EX_INT_VidSetCallBack (u8 Copy_NumOfINT , void (*ptr)(void)){
    37d0:	df 93       	push	r29
    37d2:	cf 93       	push	r28
    37d4:	00 d0       	rcall	.+0      	; 0x37d6 <EX_INT_VidSetCallBack+0x6>
    37d6:	00 d0       	rcall	.+0      	; 0x37d8 <EX_INT_VidSetCallBack+0x8>
    37d8:	0f 92       	push	r0
    37da:	cd b7       	in	r28, 0x3d	; 61
    37dc:	de b7       	in	r29, 0x3e	; 62
    37de:	89 83       	std	Y+1, r24	; 0x01
    37e0:	7b 83       	std	Y+3, r23	; 0x03
    37e2:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_NumOfINT){
    37e4:	89 81       	ldd	r24, Y+1	; 0x01
    37e6:	28 2f       	mov	r18, r24
    37e8:	30 e0       	ldi	r19, 0x00	; 0
    37ea:	3d 83       	std	Y+5, r19	; 0x05
    37ec:	2c 83       	std	Y+4, r18	; 0x04
    37ee:	8c 81       	ldd	r24, Y+4	; 0x04
    37f0:	9d 81       	ldd	r25, Y+5	; 0x05
    37f2:	81 30       	cpi	r24, 0x01	; 1
    37f4:	91 05       	cpc	r25, r1
    37f6:	81 f0       	breq	.+32     	; 0x3818 <EX_INT_VidSetCallBack+0x48>
    37f8:	2c 81       	ldd	r18, Y+4	; 0x04
    37fa:	3d 81       	ldd	r19, Y+5	; 0x05
    37fc:	22 30       	cpi	r18, 0x02	; 2
    37fe:	31 05       	cpc	r19, r1
    3800:	91 f0       	breq	.+36     	; 0x3826 <EX_INT_VidSetCallBack+0x56>
    3802:	8c 81       	ldd	r24, Y+4	; 0x04
    3804:	9d 81       	ldd	r25, Y+5	; 0x05
    3806:	00 97       	sbiw	r24, 0x00	; 0
    3808:	a1 f4       	brne	.+40     	; 0x3832 <EX_INT_VidSetCallBack+0x62>
	case 0 :INT0_PFUNC = ptr ;             break ;
    380a:	8a 81       	ldd	r24, Y+2	; 0x02
    380c:	9b 81       	ldd	r25, Y+3	; 0x03
    380e:	90 93 0b 02 	sts	0x020B, r25
    3812:	80 93 0a 02 	sts	0x020A, r24
    3816:	0d c0       	rjmp	.+26     	; 0x3832 <EX_INT_VidSetCallBack+0x62>
	case 1 :INT1_PFUNC = ptr ;             break ;
    3818:	8a 81       	ldd	r24, Y+2	; 0x02
    381a:	9b 81       	ldd	r25, Y+3	; 0x03
    381c:	90 93 0d 02 	sts	0x020D, r25
    3820:	80 93 0c 02 	sts	0x020C, r24
    3824:	06 c0       	rjmp	.+12     	; 0x3832 <EX_INT_VidSetCallBack+0x62>
	case 2 :INT2_PFUNC = ptr ;             break ;
    3826:	8a 81       	ldd	r24, Y+2	; 0x02
    3828:	9b 81       	ldd	r25, Y+3	; 0x03
    382a:	90 93 0f 02 	sts	0x020F, r25
    382e:	80 93 0e 02 	sts	0x020E, r24
	}
}
    3832:	0f 90       	pop	r0
    3834:	0f 90       	pop	r0
    3836:	0f 90       	pop	r0
    3838:	0f 90       	pop	r0
    383a:	0f 90       	pop	r0
    383c:	cf 91       	pop	r28
    383e:	df 91       	pop	r29
    3840:	08 95       	ret

00003842 <EX_INT_VidINIT>:
/**********************************************************/
void EX_INT_VidINIT(void){
    3842:	df 93       	push	r29
    3844:	cf 93       	push	r28
    3846:	cd b7       	in	r28, 0x3d	; 61
    3848:	de b7       	in	r29, 0x3e	; 62

#ifdef INT0       //to define edge of interrupt 0
    if (INT0_SENSE == LOW_LEVEL) {
    384a:	80 91 fe 01 	lds	r24, 0x01FE
    384e:	83 30       	cpi	r24, 0x03	; 3
    3850:	79 f4       	brne	.+30     	; 0x3870 <EX_INT_VidINIT+0x2e>
        //INT0 sense control = low level
    	CLR_BIT(MCUCR,ISC00);
    3852:	a5 e5       	ldi	r26, 0x55	; 85
    3854:	b0 e0       	ldi	r27, 0x00	; 0
    3856:	e5 e5       	ldi	r30, 0x55	; 85
    3858:	f0 e0       	ldi	r31, 0x00	; 0
    385a:	80 81       	ld	r24, Z
    385c:	8e 7f       	andi	r24, 0xFE	; 254
    385e:	8c 93       	st	X, r24
    	CLR_BIT(MCUCR,ISC01);
    3860:	a5 e5       	ldi	r26, 0x55	; 85
    3862:	b0 e0       	ldi	r27, 0x00	; 0
    3864:	e5 e5       	ldi	r30, 0x55	; 85
    3866:	f0 e0       	ldi	r31, 0x00	; 0
    3868:	80 81       	ld	r24, Z
    386a:	8d 7f       	andi	r24, 0xFD	; 253
    386c:	8c 93       	st	X, r24
    386e:	42 c0       	rjmp	.+132    	; 0x38f4 <EX_INT_VidINIT+0xb2>
    }
	else if (INT0_SENSE == CHANG_EDGE) {
    3870:	80 91 fe 01 	lds	r24, 0x01FE
    3874:	84 30       	cpi	r24, 0x04	; 4
    3876:	79 f4       	brne	.+30     	; 0x3896 <EX_INT_VidINIT+0x54>
		//INT0 sense control = change edge
    	SET_BIT(MCUCR,ISC00);
    3878:	a5 e5       	ldi	r26, 0x55	; 85
    387a:	b0 e0       	ldi	r27, 0x00	; 0
    387c:	e5 e5       	ldi	r30, 0x55	; 85
    387e:	f0 e0       	ldi	r31, 0x00	; 0
    3880:	80 81       	ld	r24, Z
    3882:	81 60       	ori	r24, 0x01	; 1
    3884:	8c 93       	st	X, r24
    	CLR_BIT(MCUCR,ISC01);
    3886:	a5 e5       	ldi	r26, 0x55	; 85
    3888:	b0 e0       	ldi	r27, 0x00	; 0
    388a:	e5 e5       	ldi	r30, 0x55	; 85
    388c:	f0 e0       	ldi	r31, 0x00	; 0
    388e:	80 81       	ld	r24, Z
    3890:	8d 7f       	andi	r24, 0xFD	; 253
    3892:	8c 93       	st	X, r24
    3894:	2f c0       	rjmp	.+94     	; 0x38f4 <EX_INT_VidINIT+0xb2>
    }
    else if (INT0_SENSE == FALLING){
    3896:	80 91 fe 01 	lds	r24, 0x01FE
    389a:	81 30       	cpi	r24, 0x01	; 1
    389c:	c9 f4       	brne	.+50     	; 0x38d0 <EX_INT_VidINIT+0x8e>
		//INT0 sense control = falling edge
        DIO_VidSetPinDirection(PORTD,PD2,LOW);     //to define bit interrupt 0 as input
    389e:	83 e0       	ldi	r24, 0x03	; 3
    38a0:	62 e0       	ldi	r22, 0x02	; 2
    38a2:	40 e0       	ldi	r20, 0x00	; 0
    38a4:	0e 94 67 18 	call	0x30ce	; 0x30ce <DIO_VidSetPinDirection>
        DIO_VidSetPinValue(PORTD,PD2,HIGH);        // pull up resistor on interrupt 0
    38a8:	83 e0       	ldi	r24, 0x03	; 3
    38aa:	62 e0       	ldi	r22, 0x02	; 2
    38ac:	41 e0       	ldi	r20, 0x01	; 1
    38ae:	0e 94 a8 19 	call	0x3350	; 0x3350 <DIO_VidSetPinValue>
		CLR_BIT(MCUCR,ISC00);
    38b2:	a5 e5       	ldi	r26, 0x55	; 85
    38b4:	b0 e0       	ldi	r27, 0x00	; 0
    38b6:	e5 e5       	ldi	r30, 0x55	; 85
    38b8:	f0 e0       	ldi	r31, 0x00	; 0
    38ba:	80 81       	ld	r24, Z
    38bc:	8e 7f       	andi	r24, 0xFE	; 254
    38be:	8c 93       	st	X, r24
		SET_BIT(MCUCR,ISC01);
    38c0:	a5 e5       	ldi	r26, 0x55	; 85
    38c2:	b0 e0       	ldi	r27, 0x00	; 0
    38c4:	e5 e5       	ldi	r30, 0x55	; 85
    38c6:	f0 e0       	ldi	r31, 0x00	; 0
    38c8:	80 81       	ld	r24, Z
    38ca:	82 60       	ori	r24, 0x02	; 2
    38cc:	8c 93       	st	X, r24
    38ce:	12 c0       	rjmp	.+36     	; 0x38f4 <EX_INT_VidINIT+0xb2>
    }
    else if (INT0_SENSE == RASING) {
    38d0:	80 91 fe 01 	lds	r24, 0x01FE
    38d4:	82 30       	cpi	r24, 0x02	; 2
    38d6:	71 f4       	brne	.+28     	; 0x38f4 <EX_INT_VidINIT+0xb2>
        //INT0 sense control = raising edge
    	SET_BIT(MCUCR,ISC00);
    38d8:	a5 e5       	ldi	r26, 0x55	; 85
    38da:	b0 e0       	ldi	r27, 0x00	; 0
    38dc:	e5 e5       	ldi	r30, 0x55	; 85
    38de:	f0 e0       	ldi	r31, 0x00	; 0
    38e0:	80 81       	ld	r24, Z
    38e2:	81 60       	ori	r24, 0x01	; 1
    38e4:	8c 93       	st	X, r24
        SET_BIT(MCUCR,ISC01);
    38e6:	a5 e5       	ldi	r26, 0x55	; 85
    38e8:	b0 e0       	ldi	r27, 0x00	; 0
    38ea:	e5 e5       	ldi	r30, 0x55	; 85
    38ec:	f0 e0       	ldi	r31, 0x00	; 0
    38ee:	80 81       	ld	r24, Z
    38f0:	82 60       	ori	r24, 0x02	; 2
    38f2:	8c 93       	st	X, r24
    }
#endif

#ifdef INT1      //to define edge of interrupt 1
    if (INT1_SENSE == LOW_LEVEL) {
    38f4:	80 91 ff 01 	lds	r24, 0x01FF
    38f8:	83 30       	cpi	r24, 0x03	; 3
    38fa:	79 f4       	brne	.+30     	; 0x391a <EX_INT_VidINIT+0xd8>
        //INT1 sense control = low level
    	CLR_BIT(MCUCR,ISC10);
    38fc:	a5 e5       	ldi	r26, 0x55	; 85
    38fe:	b0 e0       	ldi	r27, 0x00	; 0
    3900:	e5 e5       	ldi	r30, 0x55	; 85
    3902:	f0 e0       	ldi	r31, 0x00	; 0
    3904:	80 81       	ld	r24, Z
    3906:	8b 7f       	andi	r24, 0xFB	; 251
    3908:	8c 93       	st	X, r24
    	CLR_BIT(MCUCR,ISC11);
    390a:	a5 e5       	ldi	r26, 0x55	; 85
    390c:	b0 e0       	ldi	r27, 0x00	; 0
    390e:	e5 e5       	ldi	r30, 0x55	; 85
    3910:	f0 e0       	ldi	r31, 0x00	; 0
    3912:	80 81       	ld	r24, Z
    3914:	87 7f       	andi	r24, 0xF7	; 247
    3916:	8c 93       	st	X, r24
    3918:	42 c0       	rjmp	.+132    	; 0x399e <EX_INT_VidINIT+0x15c>
    }
	else if (INT1_SENSE == CHANG_EDGE) {
    391a:	80 91 ff 01 	lds	r24, 0x01FF
    391e:	84 30       	cpi	r24, 0x04	; 4
    3920:	79 f4       	brne	.+30     	; 0x3940 <EX_INT_VidINIT+0xfe>
		//INT1 sense control = change edge
    	SET_BIT(MCUCR,ISC10);
    3922:	a5 e5       	ldi	r26, 0x55	; 85
    3924:	b0 e0       	ldi	r27, 0x00	; 0
    3926:	e5 e5       	ldi	r30, 0x55	; 85
    3928:	f0 e0       	ldi	r31, 0x00	; 0
    392a:	80 81       	ld	r24, Z
    392c:	84 60       	ori	r24, 0x04	; 4
    392e:	8c 93       	st	X, r24
    	CLR_BIT(MCUCR,ISC11);
    3930:	a5 e5       	ldi	r26, 0x55	; 85
    3932:	b0 e0       	ldi	r27, 0x00	; 0
    3934:	e5 e5       	ldi	r30, 0x55	; 85
    3936:	f0 e0       	ldi	r31, 0x00	; 0
    3938:	80 81       	ld	r24, Z
    393a:	87 7f       	andi	r24, 0xF7	; 247
    393c:	8c 93       	st	X, r24
    393e:	2f c0       	rjmp	.+94     	; 0x399e <EX_INT_VidINIT+0x15c>
    }
    else if (INT1_SENSE == FALLING){
    3940:	80 91 ff 01 	lds	r24, 0x01FF
    3944:	81 30       	cpi	r24, 0x01	; 1
    3946:	c9 f4       	brne	.+50     	; 0x397a <EX_INT_VidINIT+0x138>
		//INT1 sense control = falling edge
        DIO_VidSetPinDirection(PORTD,PD3,LOW);     //to define bit interrupt 1 as input
    3948:	83 e0       	ldi	r24, 0x03	; 3
    394a:	63 e0       	ldi	r22, 0x03	; 3
    394c:	40 e0       	ldi	r20, 0x00	; 0
    394e:	0e 94 67 18 	call	0x30ce	; 0x30ce <DIO_VidSetPinDirection>
        DIO_VidSetPinValue(PORTD,PD3,HIGH);        // pull up resistor on interrupt 1
    3952:	83 e0       	ldi	r24, 0x03	; 3
    3954:	63 e0       	ldi	r22, 0x03	; 3
    3956:	41 e0       	ldi	r20, 0x01	; 1
    3958:	0e 94 a8 19 	call	0x3350	; 0x3350 <DIO_VidSetPinValue>
		CLR_BIT(MCUCR,ISC10);
    395c:	a5 e5       	ldi	r26, 0x55	; 85
    395e:	b0 e0       	ldi	r27, 0x00	; 0
    3960:	e5 e5       	ldi	r30, 0x55	; 85
    3962:	f0 e0       	ldi	r31, 0x00	; 0
    3964:	80 81       	ld	r24, Z
    3966:	8b 7f       	andi	r24, 0xFB	; 251
    3968:	8c 93       	st	X, r24
		SET_BIT(MCUCR,ISC11);
    396a:	a5 e5       	ldi	r26, 0x55	; 85
    396c:	b0 e0       	ldi	r27, 0x00	; 0
    396e:	e5 e5       	ldi	r30, 0x55	; 85
    3970:	f0 e0       	ldi	r31, 0x00	; 0
    3972:	80 81       	ld	r24, Z
    3974:	88 60       	ori	r24, 0x08	; 8
    3976:	8c 93       	st	X, r24
    3978:	12 c0       	rjmp	.+36     	; 0x399e <EX_INT_VidINIT+0x15c>
    }
    else if (INT1_SENSE == RASING) {
    397a:	80 91 ff 01 	lds	r24, 0x01FF
    397e:	82 30       	cpi	r24, 0x02	; 2
    3980:	71 f4       	brne	.+28     	; 0x399e <EX_INT_VidINIT+0x15c>
        //INT1 sense control = raising edge
    	SET_BIT(MCUCR,ISC10);
    3982:	a5 e5       	ldi	r26, 0x55	; 85
    3984:	b0 e0       	ldi	r27, 0x00	; 0
    3986:	e5 e5       	ldi	r30, 0x55	; 85
    3988:	f0 e0       	ldi	r31, 0x00	; 0
    398a:	80 81       	ld	r24, Z
    398c:	84 60       	ori	r24, 0x04	; 4
    398e:	8c 93       	st	X, r24
        SET_BIT(MCUCR,ISC11);
    3990:	a5 e5       	ldi	r26, 0x55	; 85
    3992:	b0 e0       	ldi	r27, 0x00	; 0
    3994:	e5 e5       	ldi	r30, 0x55	; 85
    3996:	f0 e0       	ldi	r31, 0x00	; 0
    3998:	80 81       	ld	r24, Z
    399a:	88 60       	ori	r24, 0x08	; 8
    399c:	8c 93       	st	X, r24
    }
#endif

#ifdef INT2      //to define edge of interrupt 2
    if (INT2_SENSE == FALLING){
    399e:	80 91 00 02 	lds	r24, 0x0200
    39a2:	81 30       	cpi	r24, 0x01	; 1
    39a4:	91 f4       	brne	.+36     	; 0x39ca <EX_INT_VidINIT+0x188>
        DIO_VidSetPinDirection(PORTB,PB2,LOW);     //to define bit interrupt 2 as input
    39a6:	81 e0       	ldi	r24, 0x01	; 1
    39a8:	62 e0       	ldi	r22, 0x02	; 2
    39aa:	40 e0       	ldi	r20, 0x00	; 0
    39ac:	0e 94 67 18 	call	0x30ce	; 0x30ce <DIO_VidSetPinDirection>
        DIO_VidSetPinValue(PORTB,PB2,HIGH);        // pull up resistor on interrupt 2
    39b0:	81 e0       	ldi	r24, 0x01	; 1
    39b2:	62 e0       	ldi	r22, 0x02	; 2
    39b4:	41 e0       	ldi	r20, 0x01	; 1
    39b6:	0e 94 a8 19 	call	0x3350	; 0x3350 <DIO_VidSetPinValue>
		CLR_BIT(MCUCSR,ISC2);		//INT2 sense control = falling edge
    39ba:	a4 e5       	ldi	r26, 0x54	; 84
    39bc:	b0 e0       	ldi	r27, 0x00	; 0
    39be:	e4 e5       	ldi	r30, 0x54	; 84
    39c0:	f0 e0       	ldi	r31, 0x00	; 0
    39c2:	80 81       	ld	r24, Z
    39c4:	8f 7b       	andi	r24, 0xBF	; 191
    39c6:	8c 93       	st	X, r24
    39c8:	0b c0       	rjmp	.+22     	; 0x39e0 <EX_INT_VidINIT+0x19e>
    }
    else if (INT2_SENSE == RASING) {
    39ca:	80 91 00 02 	lds	r24, 0x0200
    39ce:	82 30       	cpi	r24, 0x02	; 2
    39d0:	39 f4       	brne	.+14     	; 0x39e0 <EX_INT_VidINIT+0x19e>
    	SET_BIT(MCUCSR,ISC2);        //INT2 sense control = raising edge
    39d2:	a4 e5       	ldi	r26, 0x54	; 84
    39d4:	b0 e0       	ldi	r27, 0x00	; 0
    39d6:	e4 e5       	ldi	r30, 0x54	; 84
    39d8:	f0 e0       	ldi	r31, 0x00	; 0
    39da:	80 81       	ld	r24, Z
    39dc:	80 64       	ori	r24, 0x40	; 64
    39de:	8c 93       	st	X, r24
    }
#endif

}
    39e0:	cf 91       	pop	r28
    39e2:	df 91       	pop	r29
    39e4:	08 95       	ret

000039e6 <EX_PIE_VidEnable>:

/**********************************************************/
void EX_PIE_VidEnable(u8 COPY_U8INT_NUM){
    39e6:	df 93       	push	r29
    39e8:	cf 93       	push	r28
    39ea:	00 d0       	rcall	.+0      	; 0x39ec <EX_PIE_VidEnable+0x6>
    39ec:	0f 92       	push	r0
    39ee:	cd b7       	in	r28, 0x3d	; 61
    39f0:	de b7       	in	r29, 0x3e	; 62
    39f2:	89 83       	std	Y+1, r24	; 0x01
	switch(COPY_U8INT_NUM) {
    39f4:	89 81       	ldd	r24, Y+1	; 0x01
    39f6:	28 2f       	mov	r18, r24
    39f8:	30 e0       	ldi	r19, 0x00	; 0
    39fa:	3b 83       	std	Y+3, r19	; 0x03
    39fc:	2a 83       	std	Y+2, r18	; 0x02
    39fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3a00:	9b 81       	ldd	r25, Y+3	; 0x03
    3a02:	81 30       	cpi	r24, 0x01	; 1
    3a04:	91 05       	cpc	r25, r1
    3a06:	89 f0       	breq	.+34     	; 0x3a2a <EX_PIE_VidEnable+0x44>
    3a08:	2a 81       	ldd	r18, Y+2	; 0x02
    3a0a:	3b 81       	ldd	r19, Y+3	; 0x03
    3a0c:	22 30       	cpi	r18, 0x02	; 2
    3a0e:	31 05       	cpc	r19, r1
    3a10:	a1 f0       	breq	.+40     	; 0x3a3a <EX_PIE_VidEnable+0x54>
    3a12:	8a 81       	ldd	r24, Y+2	; 0x02
    3a14:	9b 81       	ldd	r25, Y+3	; 0x03
    3a16:	00 97       	sbiw	r24, 0x00	; 0
    3a18:	b9 f4       	brne	.+46     	; 0x3a48 <EX_PIE_VidEnable+0x62>
	case 0 : SET_BIT(GICR,INT0);  break ;   //INT0 Enable
    3a1a:	ab e5       	ldi	r26, 0x5B	; 91
    3a1c:	b0 e0       	ldi	r27, 0x00	; 0
    3a1e:	eb e5       	ldi	r30, 0x5B	; 91
    3a20:	f0 e0       	ldi	r31, 0x00	; 0
    3a22:	80 81       	ld	r24, Z
    3a24:	80 64       	ori	r24, 0x40	; 64
    3a26:	8c 93       	st	X, r24
    3a28:	0f c0       	rjmp	.+30     	; 0x3a48 <EX_PIE_VidEnable+0x62>
	case 1 : SET_BIT(GICR,INT1);  break ;   //INT1 Enable
    3a2a:	ab e5       	ldi	r26, 0x5B	; 91
    3a2c:	b0 e0       	ldi	r27, 0x00	; 0
    3a2e:	eb e5       	ldi	r30, 0x5B	; 91
    3a30:	f0 e0       	ldi	r31, 0x00	; 0
    3a32:	80 81       	ld	r24, Z
    3a34:	80 68       	ori	r24, 0x80	; 128
    3a36:	8c 93       	st	X, r24
    3a38:	07 c0       	rjmp	.+14     	; 0x3a48 <EX_PIE_VidEnable+0x62>
	case 2 : SET_BIT(GICR,INT2);  break ;   //INT2 Enable
    3a3a:	ab e5       	ldi	r26, 0x5B	; 91
    3a3c:	b0 e0       	ldi	r27, 0x00	; 0
    3a3e:	eb e5       	ldi	r30, 0x5B	; 91
    3a40:	f0 e0       	ldi	r31, 0x00	; 0
    3a42:	80 81       	ld	r24, Z
    3a44:	80 62       	ori	r24, 0x20	; 32
    3a46:	8c 93       	st	X, r24
	}
}
    3a48:	0f 90       	pop	r0
    3a4a:	0f 90       	pop	r0
    3a4c:	0f 90       	pop	r0
    3a4e:	cf 91       	pop	r28
    3a50:	df 91       	pop	r29
    3a52:	08 95       	ret

00003a54 <EX_PIE_VidDisable>:

void EX_PIE_VidDisable(u8 COPY_U8INT_NUM){
    3a54:	df 93       	push	r29
    3a56:	cf 93       	push	r28
    3a58:	00 d0       	rcall	.+0      	; 0x3a5a <EX_PIE_VidDisable+0x6>
    3a5a:	0f 92       	push	r0
    3a5c:	cd b7       	in	r28, 0x3d	; 61
    3a5e:	de b7       	in	r29, 0x3e	; 62
    3a60:	89 83       	std	Y+1, r24	; 0x01
	switch(COPY_U8INT_NUM) {
    3a62:	89 81       	ldd	r24, Y+1	; 0x01
    3a64:	28 2f       	mov	r18, r24
    3a66:	30 e0       	ldi	r19, 0x00	; 0
    3a68:	3b 83       	std	Y+3, r19	; 0x03
    3a6a:	2a 83       	std	Y+2, r18	; 0x02
    3a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a6e:	9b 81       	ldd	r25, Y+3	; 0x03
    3a70:	81 30       	cpi	r24, 0x01	; 1
    3a72:	91 05       	cpc	r25, r1
    3a74:	89 f0       	breq	.+34     	; 0x3a98 <EX_PIE_VidDisable+0x44>
    3a76:	2a 81       	ldd	r18, Y+2	; 0x02
    3a78:	3b 81       	ldd	r19, Y+3	; 0x03
    3a7a:	22 30       	cpi	r18, 0x02	; 2
    3a7c:	31 05       	cpc	r19, r1
    3a7e:	a1 f0       	breq	.+40     	; 0x3aa8 <EX_PIE_VidDisable+0x54>
    3a80:	8a 81       	ldd	r24, Y+2	; 0x02
    3a82:	9b 81       	ldd	r25, Y+3	; 0x03
    3a84:	00 97       	sbiw	r24, 0x00	; 0
    3a86:	b9 f4       	brne	.+46     	; 0x3ab6 <EX_PIE_VidDisable+0x62>
	case 0 : CLR_BIT(GICR,INT0);  break ;   //INT0 Enable
    3a88:	ab e5       	ldi	r26, 0x5B	; 91
    3a8a:	b0 e0       	ldi	r27, 0x00	; 0
    3a8c:	eb e5       	ldi	r30, 0x5B	; 91
    3a8e:	f0 e0       	ldi	r31, 0x00	; 0
    3a90:	80 81       	ld	r24, Z
    3a92:	8f 7b       	andi	r24, 0xBF	; 191
    3a94:	8c 93       	st	X, r24
    3a96:	0f c0       	rjmp	.+30     	; 0x3ab6 <EX_PIE_VidDisable+0x62>
	case 1 : CLR_BIT(GICR,INT1);  break ;   //INT1 Enable
    3a98:	ab e5       	ldi	r26, 0x5B	; 91
    3a9a:	b0 e0       	ldi	r27, 0x00	; 0
    3a9c:	eb e5       	ldi	r30, 0x5B	; 91
    3a9e:	f0 e0       	ldi	r31, 0x00	; 0
    3aa0:	80 81       	ld	r24, Z
    3aa2:	8f 77       	andi	r24, 0x7F	; 127
    3aa4:	8c 93       	st	X, r24
    3aa6:	07 c0       	rjmp	.+14     	; 0x3ab6 <EX_PIE_VidDisable+0x62>
	case 2 : CLR_BIT(GICR,INT2);  break ;   //INT2 Enable
    3aa8:	ab e5       	ldi	r26, 0x5B	; 91
    3aaa:	b0 e0       	ldi	r27, 0x00	; 0
    3aac:	eb e5       	ldi	r30, 0x5B	; 91
    3aae:	f0 e0       	ldi	r31, 0x00	; 0
    3ab0:	80 81       	ld	r24, Z
    3ab2:	8f 7d       	andi	r24, 0xDF	; 223
    3ab4:	8c 93       	st	X, r24
	}
}
    3ab6:	0f 90       	pop	r0
    3ab8:	0f 90       	pop	r0
    3aba:	0f 90       	pop	r0
    3abc:	cf 91       	pop	r28
    3abe:	df 91       	pop	r29
    3ac0:	08 95       	ret

00003ac2 <__vector_1>:

/**********************************************************/
void __vector_1(void){
    3ac2:	1f 92       	push	r1
    3ac4:	0f 92       	push	r0
    3ac6:	0f b6       	in	r0, 0x3f	; 63
    3ac8:	0f 92       	push	r0
    3aca:	11 24       	eor	r1, r1
    3acc:	2f 93       	push	r18
    3ace:	3f 93       	push	r19
    3ad0:	4f 93       	push	r20
    3ad2:	5f 93       	push	r21
    3ad4:	6f 93       	push	r22
    3ad6:	7f 93       	push	r23
    3ad8:	8f 93       	push	r24
    3ada:	9f 93       	push	r25
    3adc:	af 93       	push	r26
    3ade:	bf 93       	push	r27
    3ae0:	ef 93       	push	r30
    3ae2:	ff 93       	push	r31
    3ae4:	df 93       	push	r29
    3ae6:	cf 93       	push	r28
    3ae8:	cd b7       	in	r28, 0x3d	; 61
    3aea:	de b7       	in	r29, 0x3e	; 62
	//to toggle led
	INT0_PFUNC();
    3aec:	e0 91 0a 02 	lds	r30, 0x020A
    3af0:	f0 91 0b 02 	lds	r31, 0x020B
    3af4:	09 95       	icall
}
    3af6:	cf 91       	pop	r28
    3af8:	df 91       	pop	r29
    3afa:	ff 91       	pop	r31
    3afc:	ef 91       	pop	r30
    3afe:	bf 91       	pop	r27
    3b00:	af 91       	pop	r26
    3b02:	9f 91       	pop	r25
    3b04:	8f 91       	pop	r24
    3b06:	7f 91       	pop	r23
    3b08:	6f 91       	pop	r22
    3b0a:	5f 91       	pop	r21
    3b0c:	4f 91       	pop	r20
    3b0e:	3f 91       	pop	r19
    3b10:	2f 91       	pop	r18
    3b12:	0f 90       	pop	r0
    3b14:	0f be       	out	0x3f, r0	; 63
    3b16:	0f 90       	pop	r0
    3b18:	1f 90       	pop	r1
    3b1a:	18 95       	reti

00003b1c <__vector_2>:

void __vector_2(void){
    3b1c:	1f 92       	push	r1
    3b1e:	0f 92       	push	r0
    3b20:	0f b6       	in	r0, 0x3f	; 63
    3b22:	0f 92       	push	r0
    3b24:	11 24       	eor	r1, r1
    3b26:	2f 93       	push	r18
    3b28:	3f 93       	push	r19
    3b2a:	4f 93       	push	r20
    3b2c:	5f 93       	push	r21
    3b2e:	6f 93       	push	r22
    3b30:	7f 93       	push	r23
    3b32:	8f 93       	push	r24
    3b34:	9f 93       	push	r25
    3b36:	af 93       	push	r26
    3b38:	bf 93       	push	r27
    3b3a:	ef 93       	push	r30
    3b3c:	ff 93       	push	r31
    3b3e:	df 93       	push	r29
    3b40:	cf 93       	push	r28
    3b42:	cd b7       	in	r28, 0x3d	; 61
    3b44:	de b7       	in	r29, 0x3e	; 62
	//to toggle led
	INT1_PFUNC();
    3b46:	e0 91 0c 02 	lds	r30, 0x020C
    3b4a:	f0 91 0d 02 	lds	r31, 0x020D
    3b4e:	09 95       	icall
}
    3b50:	cf 91       	pop	r28
    3b52:	df 91       	pop	r29
    3b54:	ff 91       	pop	r31
    3b56:	ef 91       	pop	r30
    3b58:	bf 91       	pop	r27
    3b5a:	af 91       	pop	r26
    3b5c:	9f 91       	pop	r25
    3b5e:	8f 91       	pop	r24
    3b60:	7f 91       	pop	r23
    3b62:	6f 91       	pop	r22
    3b64:	5f 91       	pop	r21
    3b66:	4f 91       	pop	r20
    3b68:	3f 91       	pop	r19
    3b6a:	2f 91       	pop	r18
    3b6c:	0f 90       	pop	r0
    3b6e:	0f be       	out	0x3f, r0	; 63
    3b70:	0f 90       	pop	r0
    3b72:	1f 90       	pop	r1
    3b74:	18 95       	reti

00003b76 <__vector_3>:

void __vector_3(void){
    3b76:	1f 92       	push	r1
    3b78:	0f 92       	push	r0
    3b7a:	0f b6       	in	r0, 0x3f	; 63
    3b7c:	0f 92       	push	r0
    3b7e:	11 24       	eor	r1, r1
    3b80:	2f 93       	push	r18
    3b82:	3f 93       	push	r19
    3b84:	4f 93       	push	r20
    3b86:	5f 93       	push	r21
    3b88:	6f 93       	push	r22
    3b8a:	7f 93       	push	r23
    3b8c:	8f 93       	push	r24
    3b8e:	9f 93       	push	r25
    3b90:	af 93       	push	r26
    3b92:	bf 93       	push	r27
    3b94:	ef 93       	push	r30
    3b96:	ff 93       	push	r31
    3b98:	df 93       	push	r29
    3b9a:	cf 93       	push	r28
    3b9c:	cd b7       	in	r28, 0x3d	; 61
    3b9e:	de b7       	in	r29, 0x3e	; 62
	//to toggle led
	INT2_PFUNC();
    3ba0:	e0 91 0e 02 	lds	r30, 0x020E
    3ba4:	f0 91 0f 02 	lds	r31, 0x020F
    3ba8:	09 95       	icall
}
    3baa:	cf 91       	pop	r28
    3bac:	df 91       	pop	r29
    3bae:	ff 91       	pop	r31
    3bb0:	ef 91       	pop	r30
    3bb2:	bf 91       	pop	r27
    3bb4:	af 91       	pop	r26
    3bb6:	9f 91       	pop	r25
    3bb8:	8f 91       	pop	r24
    3bba:	7f 91       	pop	r23
    3bbc:	6f 91       	pop	r22
    3bbe:	5f 91       	pop	r21
    3bc0:	4f 91       	pop	r20
    3bc2:	3f 91       	pop	r19
    3bc4:	2f 91       	pop	r18
    3bc6:	0f 90       	pop	r0
    3bc8:	0f be       	out	0x3f, r0	; 63
    3bca:	0f 90       	pop	r0
    3bcc:	1f 90       	pop	r1
    3bce:	18 95       	reti

00003bd0 <EX_INT_VidSetEdge>:

void EX_INT_VidSetEdge(u8 COPY_U8INT_NUM , u8 COPY_U8INT_EDGE){
    3bd0:	df 93       	push	r29
    3bd2:	cf 93       	push	r28
    3bd4:	00 d0       	rcall	.+0      	; 0x3bd6 <EX_INT_VidSetEdge+0x6>
    3bd6:	00 d0       	rcall	.+0      	; 0x3bd8 <EX_INT_VidSetEdge+0x8>
    3bd8:	cd b7       	in	r28, 0x3d	; 61
    3bda:	de b7       	in	r29, 0x3e	; 62
    3bdc:	89 83       	std	Y+1, r24	; 0x01
    3bde:	6a 83       	std	Y+2, r22	; 0x02
	switch (COPY_U8INT_EDGE){
    3be0:	8a 81       	ldd	r24, Y+2	; 0x02
    3be2:	28 2f       	mov	r18, r24
    3be4:	30 e0       	ldi	r19, 0x00	; 0
    3be6:	3c 83       	std	Y+4, r19	; 0x04
    3be8:	2b 83       	std	Y+3, r18	; 0x03
    3bea:	8b 81       	ldd	r24, Y+3	; 0x03
    3bec:	9c 81       	ldd	r25, Y+4	; 0x04
    3bee:	82 30       	cpi	r24, 0x02	; 2
    3bf0:	91 05       	cpc	r25, r1
    3bf2:	09 f4       	brne	.+2      	; 0x3bf6 <EX_INT_VidSetEdge+0x26>
    3bf4:	64 c0       	rjmp	.+200    	; 0x3cbe <EX_INT_VidSetEdge+0xee>
    3bf6:	2b 81       	ldd	r18, Y+3	; 0x03
    3bf8:	3c 81       	ldd	r19, Y+4	; 0x04
    3bfa:	23 30       	cpi	r18, 0x03	; 3
    3bfc:	31 05       	cpc	r19, r1
    3bfe:	34 f4       	brge	.+12     	; 0x3c0c <EX_INT_VidSetEdge+0x3c>
    3c00:	8b 81       	ldd	r24, Y+3	; 0x03
    3c02:	9c 81       	ldd	r25, Y+4	; 0x04
    3c04:	81 30       	cpi	r24, 0x01	; 1
    3c06:	91 05       	cpc	r25, r1
    3c08:	71 f0       	breq	.+28     	; 0x3c26 <EX_INT_VidSetEdge+0x56>
    3c0a:	cc c0       	rjmp	.+408    	; 0x3da4 <EX_INT_VidSetEdge+0x1d4>
    3c0c:	2b 81       	ldd	r18, Y+3	; 0x03
    3c0e:	3c 81       	ldd	r19, Y+4	; 0x04
    3c10:	23 30       	cpi	r18, 0x03	; 3
    3c12:	31 05       	cpc	r19, r1
    3c14:	09 f4       	brne	.+2      	; 0x3c18 <EX_INT_VidSetEdge+0x48>
    3c16:	81 c0       	rjmp	.+258    	; 0x3d1a <EX_INT_VidSetEdge+0x14a>
    3c18:	8b 81       	ldd	r24, Y+3	; 0x03
    3c1a:	9c 81       	ldd	r25, Y+4	; 0x04
    3c1c:	84 30       	cpi	r24, 0x04	; 4
    3c1e:	91 05       	cpc	r25, r1
    3c20:	09 f4       	brne	.+2      	; 0x3c24 <EX_INT_VidSetEdge+0x54>
    3c22:	9e c0       	rjmp	.+316    	; 0x3d60 <EX_INT_VidSetEdge+0x190>
    3c24:	bf c0       	rjmp	.+382    	; 0x3da4 <EX_INT_VidSetEdge+0x1d4>
	case 1 :
		if (COPY_U8INT_NUM == 0 ){
    3c26:	89 81       	ldd	r24, Y+1	; 0x01
    3c28:	88 23       	and	r24, r24
    3c2a:	c1 f4       	brne	.+48     	; 0x3c5c <EX_INT_VidSetEdge+0x8c>
			//INT0 sense control = falling edge
	        DIO_VidSetPinDirection(PORTD,PD2,LOW);     //to define bit interrupt 0 as input
    3c2c:	83 e0       	ldi	r24, 0x03	; 3
    3c2e:	62 e0       	ldi	r22, 0x02	; 2
    3c30:	40 e0       	ldi	r20, 0x00	; 0
    3c32:	0e 94 67 18 	call	0x30ce	; 0x30ce <DIO_VidSetPinDirection>
	        DIO_VidSetPinValue(PORTD,PD2,HIGH);        // pull up resistor on interrupt 0
    3c36:	83 e0       	ldi	r24, 0x03	; 3
    3c38:	62 e0       	ldi	r22, 0x02	; 2
    3c3a:	41 e0       	ldi	r20, 0x01	; 1
    3c3c:	0e 94 a8 19 	call	0x3350	; 0x3350 <DIO_VidSetPinValue>
			CLR_BIT(MCUCR,ISC00);
    3c40:	a5 e5       	ldi	r26, 0x55	; 85
    3c42:	b0 e0       	ldi	r27, 0x00	; 0
    3c44:	e5 e5       	ldi	r30, 0x55	; 85
    3c46:	f0 e0       	ldi	r31, 0x00	; 0
    3c48:	80 81       	ld	r24, Z
    3c4a:	8e 7f       	andi	r24, 0xFE	; 254
    3c4c:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    3c4e:	a5 e5       	ldi	r26, 0x55	; 85
    3c50:	b0 e0       	ldi	r27, 0x00	; 0
    3c52:	e5 e5       	ldi	r30, 0x55	; 85
    3c54:	f0 e0       	ldi	r31, 0x00	; 0
    3c56:	80 81       	ld	r24, Z
    3c58:	82 60       	ori	r24, 0x02	; 2
    3c5a:	8c 93       	st	X, r24
		}
		if (COPY_U8INT_NUM == 1 ){
    3c5c:	89 81       	ldd	r24, Y+1	; 0x01
    3c5e:	81 30       	cpi	r24, 0x01	; 1
    3c60:	c1 f4       	brne	.+48     	; 0x3c92 <EX_INT_VidSetEdge+0xc2>
			//INT1 sense control = falling edge
	        DIO_VidSetPinDirection(PORTD,PD3,LOW);     //to define bit interrupt 1 as input
    3c62:	83 e0       	ldi	r24, 0x03	; 3
    3c64:	63 e0       	ldi	r22, 0x03	; 3
    3c66:	40 e0       	ldi	r20, 0x00	; 0
    3c68:	0e 94 67 18 	call	0x30ce	; 0x30ce <DIO_VidSetPinDirection>
	        DIO_VidSetPinValue(PORTD,PD3,HIGH);        // pull up resistor on interrupt 1
    3c6c:	83 e0       	ldi	r24, 0x03	; 3
    3c6e:	63 e0       	ldi	r22, 0x03	; 3
    3c70:	41 e0       	ldi	r20, 0x01	; 1
    3c72:	0e 94 a8 19 	call	0x3350	; 0x3350 <DIO_VidSetPinValue>
			CLR_BIT(MCUCR,ISC10);
    3c76:	a5 e5       	ldi	r26, 0x55	; 85
    3c78:	b0 e0       	ldi	r27, 0x00	; 0
    3c7a:	e5 e5       	ldi	r30, 0x55	; 85
    3c7c:	f0 e0       	ldi	r31, 0x00	; 0
    3c7e:	80 81       	ld	r24, Z
    3c80:	8b 7f       	andi	r24, 0xFB	; 251
    3c82:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC11);
    3c84:	a5 e5       	ldi	r26, 0x55	; 85
    3c86:	b0 e0       	ldi	r27, 0x00	; 0
    3c88:	e5 e5       	ldi	r30, 0x55	; 85
    3c8a:	f0 e0       	ldi	r31, 0x00	; 0
    3c8c:	80 81       	ld	r24, Z
    3c8e:	88 60       	ori	r24, 0x08	; 8
    3c90:	8c 93       	st	X, r24
		}
		if (COPY_U8INT_NUM == 2 ){
    3c92:	89 81       	ldd	r24, Y+1	; 0x01
    3c94:	82 30       	cpi	r24, 0x02	; 2
    3c96:	09 f0       	breq	.+2      	; 0x3c9a <EX_INT_VidSetEdge+0xca>
    3c98:	85 c0       	rjmp	.+266    	; 0x3da4 <EX_INT_VidSetEdge+0x1d4>
	        DIO_VidSetPinDirection(PORTB,PB2,LOW);     //to define bit interrupt 2 as input
    3c9a:	81 e0       	ldi	r24, 0x01	; 1
    3c9c:	62 e0       	ldi	r22, 0x02	; 2
    3c9e:	40 e0       	ldi	r20, 0x00	; 0
    3ca0:	0e 94 67 18 	call	0x30ce	; 0x30ce <DIO_VidSetPinDirection>
	        DIO_VidSetPinValue(PORTB,PB2,HIGH);        // pull up resistor on interrupt 2
    3ca4:	81 e0       	ldi	r24, 0x01	; 1
    3ca6:	62 e0       	ldi	r22, 0x02	; 2
    3ca8:	41 e0       	ldi	r20, 0x01	; 1
    3caa:	0e 94 a8 19 	call	0x3350	; 0x3350 <DIO_VidSetPinValue>
			CLR_BIT(MCUCSR,ISC2);		//INT2 sense control = falling edge
    3cae:	a4 e5       	ldi	r26, 0x54	; 84
    3cb0:	b0 e0       	ldi	r27, 0x00	; 0
    3cb2:	e4 e5       	ldi	r30, 0x54	; 84
    3cb4:	f0 e0       	ldi	r31, 0x00	; 0
    3cb6:	80 81       	ld	r24, Z
    3cb8:	8f 7b       	andi	r24, 0xBF	; 191
    3cba:	8c 93       	st	X, r24
    3cbc:	73 c0       	rjmp	.+230    	; 0x3da4 <EX_INT_VidSetEdge+0x1d4>
		}
		break ;
	case 2 :
		if (COPY_U8INT_NUM == 0 ){
    3cbe:	89 81       	ldd	r24, Y+1	; 0x01
    3cc0:	88 23       	and	r24, r24
    3cc2:	71 f4       	brne	.+28     	; 0x3ce0 <EX_INT_VidSetEdge+0x110>
	        //INT0 sense control = raising edge
	    	SET_BIT(MCUCR,ISC00);
    3cc4:	a5 e5       	ldi	r26, 0x55	; 85
    3cc6:	b0 e0       	ldi	r27, 0x00	; 0
    3cc8:	e5 e5       	ldi	r30, 0x55	; 85
    3cca:	f0 e0       	ldi	r31, 0x00	; 0
    3ccc:	80 81       	ld	r24, Z
    3cce:	81 60       	ori	r24, 0x01	; 1
    3cd0:	8c 93       	st	X, r24
	        SET_BIT(MCUCR,ISC01);
    3cd2:	a5 e5       	ldi	r26, 0x55	; 85
    3cd4:	b0 e0       	ldi	r27, 0x00	; 0
    3cd6:	e5 e5       	ldi	r30, 0x55	; 85
    3cd8:	f0 e0       	ldi	r31, 0x00	; 0
    3cda:	80 81       	ld	r24, Z
    3cdc:	82 60       	ori	r24, 0x02	; 2
    3cde:	8c 93       	st	X, r24
		}
		if (COPY_U8INT_NUM == 1 ){
    3ce0:	89 81       	ldd	r24, Y+1	; 0x01
    3ce2:	81 30       	cpi	r24, 0x01	; 1
    3ce4:	71 f4       	brne	.+28     	; 0x3d02 <EX_INT_VidSetEdge+0x132>
	        //INT1 sense control = raising edge
	    	SET_BIT(MCUCR,ISC10);
    3ce6:	a5 e5       	ldi	r26, 0x55	; 85
    3ce8:	b0 e0       	ldi	r27, 0x00	; 0
    3cea:	e5 e5       	ldi	r30, 0x55	; 85
    3cec:	f0 e0       	ldi	r31, 0x00	; 0
    3cee:	80 81       	ld	r24, Z
    3cf0:	84 60       	ori	r24, 0x04	; 4
    3cf2:	8c 93       	st	X, r24
	        SET_BIT(MCUCR,ISC11);
    3cf4:	a5 e5       	ldi	r26, 0x55	; 85
    3cf6:	b0 e0       	ldi	r27, 0x00	; 0
    3cf8:	e5 e5       	ldi	r30, 0x55	; 85
    3cfa:	f0 e0       	ldi	r31, 0x00	; 0
    3cfc:	80 81       	ld	r24, Z
    3cfe:	88 60       	ori	r24, 0x08	; 8
    3d00:	8c 93       	st	X, r24
		}
		if (COPY_U8INT_NUM == 2 ){
    3d02:	89 81       	ldd	r24, Y+1	; 0x01
    3d04:	82 30       	cpi	r24, 0x02	; 2
    3d06:	09 f0       	breq	.+2      	; 0x3d0a <EX_INT_VidSetEdge+0x13a>
    3d08:	4d c0       	rjmp	.+154    	; 0x3da4 <EX_INT_VidSetEdge+0x1d4>
	    	SET_BIT(MCUCSR,ISC2);        //INT2 sense control = raising edge
    3d0a:	a4 e5       	ldi	r26, 0x54	; 84
    3d0c:	b0 e0       	ldi	r27, 0x00	; 0
    3d0e:	e4 e5       	ldi	r30, 0x54	; 84
    3d10:	f0 e0       	ldi	r31, 0x00	; 0
    3d12:	80 81       	ld	r24, Z
    3d14:	80 64       	ori	r24, 0x40	; 64
    3d16:	8c 93       	st	X, r24
    3d18:	45 c0       	rjmp	.+138    	; 0x3da4 <EX_INT_VidSetEdge+0x1d4>
		}
	    break ;
	case 3 :
		if (COPY_U8INT_NUM == 0 ){
    3d1a:	89 81       	ldd	r24, Y+1	; 0x01
    3d1c:	88 23       	and	r24, r24
    3d1e:	71 f4       	brne	.+28     	; 0x3d3c <EX_INT_VidSetEdge+0x16c>
			//INT0 sense control = low level
	    	CLR_BIT(MCUCR,ISC00);
    3d20:	a5 e5       	ldi	r26, 0x55	; 85
    3d22:	b0 e0       	ldi	r27, 0x00	; 0
    3d24:	e5 e5       	ldi	r30, 0x55	; 85
    3d26:	f0 e0       	ldi	r31, 0x00	; 0
    3d28:	80 81       	ld	r24, Z
    3d2a:	8e 7f       	andi	r24, 0xFE	; 254
    3d2c:	8c 93       	st	X, r24
	    	CLR_BIT(MCUCR,ISC01);
    3d2e:	a5 e5       	ldi	r26, 0x55	; 85
    3d30:	b0 e0       	ldi	r27, 0x00	; 0
    3d32:	e5 e5       	ldi	r30, 0x55	; 85
    3d34:	f0 e0       	ldi	r31, 0x00	; 0
    3d36:	80 81       	ld	r24, Z
    3d38:	8d 7f       	andi	r24, 0xFD	; 253
    3d3a:	8c 93       	st	X, r24
		}
		if (COPY_U8INT_NUM == 1 ){
    3d3c:	89 81       	ldd	r24, Y+1	; 0x01
    3d3e:	81 30       	cpi	r24, 0x01	; 1
    3d40:	89 f5       	brne	.+98     	; 0x3da4 <EX_INT_VidSetEdge+0x1d4>
	        //INT1 sense control = low level
	    	CLR_BIT(MCUCR,ISC10);
    3d42:	a5 e5       	ldi	r26, 0x55	; 85
    3d44:	b0 e0       	ldi	r27, 0x00	; 0
    3d46:	e5 e5       	ldi	r30, 0x55	; 85
    3d48:	f0 e0       	ldi	r31, 0x00	; 0
    3d4a:	80 81       	ld	r24, Z
    3d4c:	8b 7f       	andi	r24, 0xFB	; 251
    3d4e:	8c 93       	st	X, r24
	    	CLR_BIT(MCUCR,ISC11);
    3d50:	a5 e5       	ldi	r26, 0x55	; 85
    3d52:	b0 e0       	ldi	r27, 0x00	; 0
    3d54:	e5 e5       	ldi	r30, 0x55	; 85
    3d56:	f0 e0       	ldi	r31, 0x00	; 0
    3d58:	80 81       	ld	r24, Z
    3d5a:	87 7f       	andi	r24, 0xF7	; 247
    3d5c:	8c 93       	st	X, r24
    3d5e:	22 c0       	rjmp	.+68     	; 0x3da4 <EX_INT_VidSetEdge+0x1d4>
		}
		break ;
	case 4 :
		if (COPY_U8INT_NUM == 0 ){
    3d60:	89 81       	ldd	r24, Y+1	; 0x01
    3d62:	88 23       	and	r24, r24
    3d64:	71 f4       	brne	.+28     	; 0x3d82 <EX_INT_VidSetEdge+0x1b2>
			//INT0 sense control = change edge
	    	SET_BIT(MCUCR,ISC00);
    3d66:	a5 e5       	ldi	r26, 0x55	; 85
    3d68:	b0 e0       	ldi	r27, 0x00	; 0
    3d6a:	e5 e5       	ldi	r30, 0x55	; 85
    3d6c:	f0 e0       	ldi	r31, 0x00	; 0
    3d6e:	80 81       	ld	r24, Z
    3d70:	81 60       	ori	r24, 0x01	; 1
    3d72:	8c 93       	st	X, r24
	    	CLR_BIT(MCUCR,ISC01);
    3d74:	a5 e5       	ldi	r26, 0x55	; 85
    3d76:	b0 e0       	ldi	r27, 0x00	; 0
    3d78:	e5 e5       	ldi	r30, 0x55	; 85
    3d7a:	f0 e0       	ldi	r31, 0x00	; 0
    3d7c:	80 81       	ld	r24, Z
    3d7e:	8d 7f       	andi	r24, 0xFD	; 253
    3d80:	8c 93       	st	X, r24
		}
		if (COPY_U8INT_NUM == 1 ){
    3d82:	89 81       	ldd	r24, Y+1	; 0x01
    3d84:	81 30       	cpi	r24, 0x01	; 1
    3d86:	71 f4       	brne	.+28     	; 0x3da4 <EX_INT_VidSetEdge+0x1d4>
			//INT1 sense control = change edge
	    	SET_BIT(MCUCR,ISC10);
    3d88:	a5 e5       	ldi	r26, 0x55	; 85
    3d8a:	b0 e0       	ldi	r27, 0x00	; 0
    3d8c:	e5 e5       	ldi	r30, 0x55	; 85
    3d8e:	f0 e0       	ldi	r31, 0x00	; 0
    3d90:	80 81       	ld	r24, Z
    3d92:	84 60       	ori	r24, 0x04	; 4
    3d94:	8c 93       	st	X, r24
	    	CLR_BIT(MCUCR,ISC11);
    3d96:	a5 e5       	ldi	r26, 0x55	; 85
    3d98:	b0 e0       	ldi	r27, 0x00	; 0
    3d9a:	e5 e5       	ldi	r30, 0x55	; 85
    3d9c:	f0 e0       	ldi	r31, 0x00	; 0
    3d9e:	80 81       	ld	r24, Z
    3da0:	87 7f       	andi	r24, 0xF7	; 247
    3da2:	8c 93       	st	X, r24
		}
		break ;
	}
}
    3da4:	0f 90       	pop	r0
    3da6:	0f 90       	pop	r0
    3da8:	0f 90       	pop	r0
    3daa:	0f 90       	pop	r0
    3dac:	cf 91       	pop	r28
    3dae:	df 91       	pop	r29
    3db0:	08 95       	ret

00003db2 <FUNC>:
 Name        : FUNC
 Input       : void
 Output      : void
 Description : pointer to function which excuted in interrupt
*/
void FUNC (void){
    3db2:	df 93       	push	r29
    3db4:	cf 93       	push	r28
    3db6:	cd b7       	in	r28, 0x3d	; 61
    3db8:	de b7       	in	r29, 0x3e	; 62
	counter_exsit++;
    3dba:	80 91 1b 02 	lds	r24, 0x021B
    3dbe:	8f 5f       	subi	r24, 0xFF	; 255
    3dc0:	80 93 1b 02 	sts	0x021B, r24

	/* To make angle of door while entering */
	SetDoorAngle(GET_OUT);
    3dc4:	82 e0       	ldi	r24, 0x02	; 2
    3dc6:	0e 94 2b 20 	call	0x4056	; 0x4056 <SetDoorAngle>
}
    3dca:	cf 91       	pop	r28
    3dcc:	df 91       	pop	r29
    3dce:	08 95       	ret

00003dd0 <FINALPROJECT_VidInit>:
 Input       : void
 Output      : void
 Description : to initialize every function in project
*/

void FINALPROJECT_VidInit(){
    3dd0:	df 93       	push	r29
    3dd2:	cf 93       	push	r28
    3dd4:	cd b7       	in	r28, 0x3d	; 61
    3dd6:	de b7       	in	r29, 0x3e	; 62
	   /* For LCD & LM35 & DCMOTOR & KEYPAD & USART*/
	    ADC_VidInit();
    3dd8:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <ADC_VidInit>
		LCD_VidInit();
    3ddc:	0e 94 4e 26 	call	0x4c9c	; 0x4c9c <LCD_VidInit>
		DcMotor_VidInit();
    3de0:	0e 94 0c 18 	call	0x3018	; 0x3018 <DcMotor_VidInit>
		keypad_init();
    3de4:	0e 94 ec 24 	call	0x49d8	; 0x49d8 <keypad_init>
		//UART_Vidinit();

		/* For Fun */
		TIMER0_VidInitialize();
    3de8:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <TIMER0_VidInitialize>
		TIMER1_VidInit();
    3dec:	0e 94 f0 36 	call	0x6de0	; 0x6de0 <TIMER1_VidInit>
		/* For TEMP SENSOR INTRUPPT */
		TIMER2_VidInitialize();
    3df0:	0e 94 50 30 	call	0x60a0	; 0x60a0 <TIMER2_VidInitialize>



		/* decleration of external interrupt to exist room */
	    GIE_VidEnable();
    3df4:	0e 94 0b 24 	call	0x4816	; 0x4816 <GIE_VidEnable>
	    EX_INT_VidINIT();
    3df8:	0e 94 21 1c 	call	0x3842	; 0x3842 <EX_INT_VidINIT>
		EX_PIE_VidEnable(INT_NUM);
    3dfc:	80 e0       	ldi	r24, 0x00	; 0
    3dfe:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <EX_PIE_VidEnable>
		EX_INT_VidSetCallBack(INT_NUM,FUNC);
    3e02:	29 ed       	ldi	r18, 0xD9	; 217
    3e04:	3e e1       	ldi	r19, 0x1E	; 30
    3e06:	80 e0       	ldi	r24, 0x00	; 0
    3e08:	b9 01       	movw	r22, r18
    3e0a:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <EX_INT_VidSetCallBack>
		EX_INT_VidSetEdge(INT_NUM,FALLING);
    3e0e:	80 e0       	ldi	r24, 0x00	; 0
    3e10:	61 e0       	ldi	r22, 0x01	; 1
    3e12:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <EX_INT_VidSetEdge>


		DIO_VidSetPinDirection(BUZZER_PORT,BUZZER_PIN,HIGH);  //define buzzer pin direction
    3e16:	80 e0       	ldi	r24, 0x00	; 0
    3e18:	66 e0       	ldi	r22, 0x06	; 6
    3e1a:	41 e0       	ldi	r20, 0x01	; 1
    3e1c:	0e 94 67 18 	call	0x30ce	; 0x30ce <DIO_VidSetPinDirection>
		DIO_VidSetPinValue(BUZZER_PORT,BUZZER_PIN,LOW);       //define initial value for buzzer
    3e20:	80 e0       	ldi	r24, 0x00	; 0
    3e22:	66 e0       	ldi	r22, 0x06	; 6
    3e24:	40 e0       	ldi	r20, 0x00	; 0
    3e26:	0e 94 a8 19 	call	0x3350	; 0x3350 <DIO_VidSetPinValue>

		DIO_VidSetPinDirection(SWITCH_PORT,SWITCH_PIN,LOW);   //define Switch as an input pin direction
    3e2a:	83 e0       	ldi	r24, 0x03	; 3
    3e2c:	62 e0       	ldi	r22, 0x02	; 2
    3e2e:	40 e0       	ldi	r20, 0x00	; 0
    3e30:	0e 94 67 18 	call	0x30ce	; 0x30ce <DIO_VidSetPinDirection>
		DIO_VidSetPinValue(SWITCH_PORT,SWITCH_PIN,HIGH);      //Pull up switch
    3e34:	83 e0       	ldi	r24, 0x03	; 3
    3e36:	62 e0       	ldi	r22, 0x02	; 2
    3e38:	41 e0       	ldi	r20, 0x01	; 1
    3e3a:	0e 94 a8 19 	call	0x3350	; 0x3350 <DIO_VidSetPinValue>
		
		DIO_VidSetPinDirection(SERVO_PORT,SERVO_PIN,HIGH);			  //define Servo pin direction
    3e3e:	83 e0       	ldi	r24, 0x03	; 3
    3e40:	65 e0       	ldi	r22, 0x05	; 5
    3e42:	41 e0       	ldi	r20, 0x01	; 1
    3e44:	0e 94 67 18 	call	0x30ce	; 0x30ce <DIO_VidSetPinDirection>

		DIO_VidSetPinDirection(PORT_LED,LED_PIN,HIGH);        //led input
    3e48:	83 e0       	ldi	r24, 0x03	; 3
    3e4a:	63 e0       	ldi	r22, 0x03	; 3
    3e4c:	41 e0       	ldi	r20, 0x01	; 1
    3e4e:	0e 94 67 18 	call	0x30ce	; 0x30ce <DIO_VidSetPinDirection>
		
			LCD_VidPosCur(0,0);                                   //to print helping massage
    3e52:	80 e0       	ldi	r24, 0x00	; 0
    3e54:	60 e0       	ldi	r22, 0x00	; 0
    3e56:	0e 94 1a 2f 	call	0x5e34	; 0x5e34 <LCD_VidPosCur>
			LCD_VidSendString(" Enter your ID ");
    3e5a:	80 e6       	ldi	r24, 0x60	; 96
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	0e 94 4d 2b 	call	0x569a	; 0x569a <LCD_VidSendString>
			 /* Check Temp Every 0.1 Sec */
			TIMER_VidSetCallBack(2,&RoomTemp); 
    3e62:	27 ee       	ldi	r18, 0xE7	; 231
    3e64:	33 e2       	ldi	r19, 0x23	; 35
    3e66:	82 e0       	ldi	r24, 0x02	; 2
    3e68:	b9 01       	movw	r22, r18
    3e6a:	0e 94 a6 2f 	call	0x5f4c	; 0x5f4c <TIMER_VidSetCallBack>
			TIMER2_Set_Time_mS(100);            
    3e6e:	84 e6       	ldi	r24, 0x64	; 100
    3e70:	90 e0       	ldi	r25, 0x00	; 0
    3e72:	0e 94 31 34 	call	0x6862	; 0x6862 <TIMER2_Set_Time_mS>
}
    3e76:	cf 91       	pop	r28
    3e78:	df 91       	pop	r29
    3e7a:	08 95       	ret

00003e7c <LM35_U16_ReadTemp>:
 Input       : void
 Output      : u16
 Description : to read temperature by LM35
*/
u16 LM35_U16_ReadTemp()
{
    3e7c:	df 93       	push	r29
    3e7e:	cf 93       	push	r28
    3e80:	cd b7       	in	r28, 0x3d	; 61
    3e82:	de b7       	in	r29, 0x3e	; 62
	return ADC_VidReadChannel(7)/10 ;
    3e84:	87 e0       	ldi	r24, 0x07	; 7
    3e86:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <ADC_VidReadChannel>
    3e8a:	2a e0       	ldi	r18, 0x0A	; 10
    3e8c:	30 e0       	ldi	r19, 0x00	; 0
    3e8e:	b9 01       	movw	r22, r18
    3e90:	0e 94 19 3a 	call	0x7432	; 0x7432 <__udivmodhi4>
    3e94:	cb 01       	movw	r24, r22
}
    3e96:	cf 91       	pop	r28
    3e98:	df 91       	pop	r29
    3e9a:	08 95       	ret

00003e9c <Emergency_state>:
 Input       : void
 Output      : void
 Description : to put project in emergency state when temperature more than 40'C
               1)warning massage  2)open servo 90 degree   3)open buzzer
*/
void Emergency_state (void){
    3e9c:	df 93       	push	r29
    3e9e:	cf 93       	push	r28
    3ea0:	cd b7       	in	r28, 0x3d	; 61
    3ea2:	de b7       	in	r29, 0x3e	; 62
	LCD_VidPosCur(0,0);
    3ea4:	80 e0       	ldi	r24, 0x00	; 0
    3ea6:	60 e0       	ldi	r22, 0x00	; 0
    3ea8:	0e 94 1a 2f 	call	0x5e34	; 0x5e34 <LCD_VidPosCur>
	LCD_VidSendString("TEMP more than 38 C");
    3eac:	80 e7       	ldi	r24, 0x70	; 112
    3eae:	90 e0       	ldi	r25, 0x00	; 0
    3eb0:	0e 94 4d 2b 	call	0x569a	; 0x569a <LCD_VidSendString>
	Duty_Fan = FULL_DUTY ;
    3eb4:	84 e6       	ldi	r24, 0x64	; 100
    3eb6:	80 93 69 02 	sts	0x0269, r24
	DcMotor_VidRotate(CLK_WISE);
    3eba:	81 e0       	ldi	r24, 0x01	; 1
    3ebc:	0e 94 27 18 	call	0x304e	; 0x304e <DcMotor_VidRotate>
	Timer0_VidSETDUTY(Duty_Fan);
    3ec0:	80 91 69 02 	lds	r24, 0x0269
    3ec4:	0e 94 2a 30 	call	0x6054	; 0x6054 <Timer0_VidSETDUTY>
	DIO_VidSetPinValue(BUZZER_PORT,BUZZER_PIN,HIGH);
    3ec8:	80 e0       	ldi	r24, 0x00	; 0
    3eca:	66 e0       	ldi	r22, 0x06	; 6
    3ecc:	41 e0       	ldi	r20, 0x01	; 1
    3ece:	0e 94 a8 19 	call	0x3350	; 0x3350 <DIO_VidSetPinValue>
	SetDoorAngle(GET_OUT_FIRE);
    3ed2:	83 e0       	ldi	r24, 0x03	; 3
    3ed4:	0e 94 2b 20 	call	0x4056	; 0x4056 <SetDoorAngle>
}//end FUNC
    3ed8:	cf 91       	pop	r28
    3eda:	df 91       	pop	r29
    3edc:	08 95       	ret

00003ede <normal_state>:
 Name        : normal_state
 Input       : void
 Output      : void
 Description : stop DC motor "fan" - close buzzer - begin question on password and clear warning massage
*/
void normal_state(void){
    3ede:	df 93       	push	r29
    3ee0:	cf 93       	push	r28
    3ee2:	0f 92       	push	r0
    3ee4:	cd b7       	in	r28, 0x3d	; 61
    3ee6:	de b7       	in	r29, 0x3e	; 62
	u8 Duty_Fan =0 ;
    3ee8:	19 82       	std	Y+1, r1	; 0x01
	DcMotor_VidRotate(STOP);
    3eea:	80 e0       	ldi	r24, 0x00	; 0
    3eec:	0e 94 27 18 	call	0x304e	; 0x304e <DcMotor_VidRotate>
	Timer0_VidSETDUTY(Duty_Fan);
    3ef0:	89 81       	ldd	r24, Y+1	; 0x01
    3ef2:	0e 94 2a 30 	call	0x6054	; 0x6054 <Timer0_VidSETDUTY>
	DIO_VidSetPinValue(BUZZER_PORT,BUZZER_PIN,LOW);
    3ef6:	80 e0       	ldi	r24, 0x00	; 0
    3ef8:	66 e0       	ldi	r22, 0x06	; 6
    3efa:	40 e0       	ldi	r20, 0x00	; 0
    3efc:	0e 94 a8 19 	call	0x3350	; 0x3350 <DIO_VidSetPinValue>
	LCD_VidPosCur(0,0);
    3f00:	80 e0       	ldi	r24, 0x00	; 0
    3f02:	60 e0       	ldi	r22, 0x00	; 0
    3f04:	0e 94 1a 2f 	call	0x5e34	; 0x5e34 <LCD_VidPosCur>
	LCD_VidSendString("Enter your ID ");
    3f08:	84 e8       	ldi	r24, 0x84	; 132
    3f0a:	90 e0       	ldi	r25, 0x00	; 0
    3f0c:	0e 94 4d 2b 	call	0x569a	; 0x569a <LCD_VidSendString>
	LCD_VidPosCur(1,0);
    3f10:	81 e0       	ldi	r24, 0x01	; 1
    3f12:	60 e0       	ldi	r22, 0x00	; 0
    3f14:	0e 94 1a 2f 	call	0x5e34	; 0x5e34 <LCD_VidPosCur>
	LCD_VidSendString("               ");
    3f18:	83 e9       	ldi	r24, 0x93	; 147
    3f1a:	90 e0       	ldi	r25, 0x00	; 0
    3f1c:	0e 94 4d 2b 	call	0x569a	; 0x569a <LCD_VidSendString>
}
    3f20:	0f 90       	pop	r0
    3f22:	cf 91       	pop	r28
    3f24:	df 91       	pop	r29
    3f26:	08 95       	ret

00003f28 <StateBeforeCheck>:
 Name        : StateBeforeCheck
 Input       : u8
 Output      : void
 Description : To check on the state of the home while you entering password or you aren't in home
*/
void StateBeforeCheck(u8 Copy_U8Temp){
    3f28:	df 93       	push	r29
    3f2a:	cf 93       	push	r28
    3f2c:	0f 92       	push	r0
    3f2e:	cd b7       	in	r28, 0x3d	; 61
    3f30:	de b7       	in	r29, 0x3e	; 62
    3f32:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_U8Temp > MAX_TEMP ){
    3f34:	89 81       	ldd	r24, Y+1	; 0x01
    3f36:	87 32       	cpi	r24, 0x27	; 39
    3f38:	30 f0       	brcs	.+12     	; 0x3f46 <StateBeforeCheck+0x1e>
		Emergency_state();
    3f3a:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <Emergency_state>
		normal_flag = EMERGENCY_STATE ;
    3f3e:	81 e0       	ldi	r24, 0x01	; 1
    3f40:	80 93 10 02 	sts	0x0210, r24
    3f44:	09 c0       	rjmp	.+18     	; 0x3f58 <StateBeforeCheck+0x30>
	}//end if
	else {
	    if (normal_flag == EMERGENCY_STATE ){
    3f46:	80 91 10 02 	lds	r24, 0x0210
    3f4a:	81 30       	cpi	r24, 0x01	; 1
    3f4c:	29 f4       	brne	.+10     	; 0x3f58 <StateBeforeCheck+0x30>
			normal_state();
    3f4e:	0e 94 6f 1f 	call	0x3ede	; 0x3ede <normal_state>
			normal_flag = NORMAL_STATE ;
    3f52:	82 e0       	ldi	r24, 0x02	; 2
    3f54:	80 93 10 02 	sts	0x0210, r24
	    }//end if
	}//end else
}
    3f58:	0f 90       	pop	r0
    3f5a:	cf 91       	pop	r28
    3f5c:	df 91       	pop	r29
    3f5e:	08 95       	ret

00003f60 <StateOfFunAndBuzzer>:
 Name        : StateOfFunAndBuzzer
 Input       : u8
 Output      : void
 Description : to set the duty of fan and state of buzzer
*/
void StateOfFunAndBuzzer(u8 Copy_U8Temp){
    3f60:	df 93       	push	r29
    3f62:	cf 93       	push	r28
    3f64:	00 d0       	rcall	.+0      	; 0x3f66 <StateOfFunAndBuzzer+0x6>
    3f66:	cd b7       	in	r28, 0x3d	; 61
    3f68:	de b7       	in	r29, 0x3e	; 62
    3f6a:	8a 83       	std	Y+2, r24	; 0x02
	/*
	in temp below than 20 :
	  1)STOP Fan
	  2)close buzzer
	*/
	if (Copy_U8Temp < MIN_TEMP ){
    3f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f6e:	84 31       	cpi	r24, 0x14	; 20
    3f70:	78 f4       	brcc	.+30     	; 0x3f90 <StateOfFunAndBuzzer+0x30>
		Duty_Fan = ZERO_DUTY ;
    3f72:	10 92 69 02 	sts	0x0269, r1
		DcMotor_VidRotate(STOP);
    3f76:	80 e0       	ldi	r24, 0x00	; 0
    3f78:	0e 94 27 18 	call	0x304e	; 0x304e <DcMotor_VidRotate>
		Timer0_VidSETDUTY(Duty_Fan);
    3f7c:	80 91 69 02 	lds	r24, 0x0269
    3f80:	0e 94 2a 30 	call	0x6054	; 0x6054 <Timer0_VidSETDUTY>
		DIO_VidSetPinValue(BUZZER_PORT,BUZZER_PIN,LOW);
    3f84:	80 e0       	ldi	r24, 0x00	; 0
    3f86:	66 e0       	ldi	r22, 0x06	; 6
    3f88:	40 e0       	ldi	r20, 0x00	; 0
    3f8a:	0e 94 a8 19 	call	0x3350	; 0x3350 <DIO_VidSetPinValue>
    3f8e:	33 c0       	rjmp	.+102    	; 0x3ff6 <StateOfFunAndBuzzer+0x96>
	/*
	in temp below between 20 : 40 :-
	  1)rotate  Fan with the needed voltage
	  2)close buzzer
	*/
	else if (Copy_U8Temp >= MIN_TEMP && Copy_U8Temp < MAX_TEMP ){
    3f90:	8a 81       	ldd	r24, Y+2	; 0x02
    3f92:	84 31       	cpi	r24, 0x14	; 20
    3f94:	80 f1       	brcs	.+96     	; 0x3ff6 <StateOfFunAndBuzzer+0x96>
    3f96:	8a 81       	ldd	r24, Y+2	; 0x02
    3f98:	86 32       	cpi	r24, 0x26	; 38
    3f9a:	68 f5       	brcc	.+90     	; 0x3ff6 <StateOfFunAndBuzzer+0x96>

		//to make discrete duty of fan
		if (Copy_U8Temp >= MIN_TEMP && Copy_U8Temp < MIN_TEMP+5 ){
    3f9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f9e:	84 31       	cpi	r24, 0x14	; 20
    3fa0:	38 f0       	brcs	.+14     	; 0x3fb0 <StateOfFunAndBuzzer+0x50>
    3fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    3fa4:	89 31       	cpi	r24, 0x19	; 25
    3fa6:	20 f4       	brcc	.+8      	; 0x3fb0 <StateOfFunAndBuzzer+0x50>
			Duty_Fan = QUATER_DUTY ;
    3fa8:	89 e1       	ldi	r24, 0x19	; 25
    3faa:	80 93 69 02 	sts	0x0269, r24
    3fae:	17 c0       	rjmp	.+46     	; 0x3fde <StateOfFunAndBuzzer+0x7e>
		}
		else if (Copy_U8Temp >= MIN_TEMP+5 && Copy_U8Temp < MID_TEMP ){
    3fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    3fb2:	89 31       	cpi	r24, 0x19	; 25
    3fb4:	38 f0       	brcs	.+14     	; 0x3fc4 <StateOfFunAndBuzzer+0x64>
    3fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    3fb8:	8c 31       	cpi	r24, 0x1C	; 28
    3fba:	20 f4       	brcc	.+8      	; 0x3fc4 <StateOfFunAndBuzzer+0x64>
			Duty_Fan = MID_DUTY ;
    3fbc:	82 e3       	ldi	r24, 0x32	; 50
    3fbe:	80 93 69 02 	sts	0x0269, r24
    3fc2:	0d c0       	rjmp	.+26     	; 0x3fde <StateOfFunAndBuzzer+0x7e>
		}
		else if (Copy_U8Temp >= MID_TEMP && Copy_U8Temp < MID_TEMP+5 ){
    3fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    3fc6:	8c 31       	cpi	r24, 0x1C	; 28
    3fc8:	38 f0       	brcs	.+14     	; 0x3fd8 <StateOfFunAndBuzzer+0x78>
    3fca:	8a 81       	ldd	r24, Y+2	; 0x02
    3fcc:	81 32       	cpi	r24, 0x21	; 33
    3fce:	20 f4       	brcc	.+8      	; 0x3fd8 <StateOfFunAndBuzzer+0x78>
			Duty_Fan = THREE_QUATER ;
    3fd0:	8b e4       	ldi	r24, 0x4B	; 75
    3fd2:	80 93 69 02 	sts	0x0269, r24
    3fd6:	03 c0       	rjmp	.+6      	; 0x3fde <StateOfFunAndBuzzer+0x7e>
		}
		else {
			Duty_Fan = FULL_DUTY ;
    3fd8:	84 e6       	ldi	r24, 0x64	; 100
    3fda:	80 93 69 02 	sts	0x0269, r24
		}

		DcMotor_VidRotate(CLK_WISE);
    3fde:	81 e0       	ldi	r24, 0x01	; 1
    3fe0:	0e 94 27 18 	call	0x304e	; 0x304e <DcMotor_VidRotate>
		Timer0_VidSETDUTY(Duty_Fan);
    3fe4:	80 91 69 02 	lds	r24, 0x0269
    3fe8:	0e 94 2a 30 	call	0x6054	; 0x6054 <Timer0_VidSETDUTY>
		DIO_VidSetPinValue(BUZZER_PORT,BUZZER_PIN,LOW);
    3fec:	80 e0       	ldi	r24, 0x00	; 0
    3fee:	66 e0       	ldi	r22, 0x06	; 6
    3ff0:	40 e0       	ldi	r20, 0x00	; 0
    3ff2:	0e 94 a8 19 	call	0x3350	; 0x3350 <DIO_VidSetPinValue>
	/*
	in temp below more than 38 :-
	  1)rotate  Fan with the max voltage
	  2)open buzzer
	*/
	u8 OPEN_ONCE=1;
    3ff6:	81 e0       	ldi	r24, 0x01	; 1
    3ff8:	89 83       	std	Y+1, r24	; 0x01
    3ffa:	1d c0       	rjmp	.+58     	; 0x4036 <StateOfFunAndBuzzer+0xd6>
	while (Copy_U8Temp >= MAX_TEMP ){
		/*to check on temperature*/
		Copy_U8Temp = LM35_U16_ReadTemp() ;
    3ffc:	0e 94 3e 1f 	call	0x3e7c	; 0x3e7c <LM35_U16_ReadTemp>
    4000:	8a 83       	std	Y+2, r24	; 0x02
		DisplayTempOnLCD(Copy_U8Temp);
    4002:	8a 81       	ldd	r24, Y+2	; 0x02
    4004:	0e 94 41 21 	call	0x4282	; 0x4282 <DisplayTempOnLCD>
		Duty_Fan = FULL_DUTY ;
    4008:	84 e6       	ldi	r24, 0x64	; 100
    400a:	80 93 69 02 	sts	0x0269, r24
		DcMotor_VidRotate(CLK_WISE);
    400e:	81 e0       	ldi	r24, 0x01	; 1
    4010:	0e 94 27 18 	call	0x304e	; 0x304e <DcMotor_VidRotate>
		Timer0_VidSETDUTY(Duty_Fan);
    4014:	80 91 69 02 	lds	r24, 0x0269
    4018:	0e 94 2a 30 	call	0x6054	; 0x6054 <Timer0_VidSETDUTY>
		DIO_VidSetPinValue(BUZZER_PORT,BUZZER_PIN,HIGH);
    401c:	80 e0       	ldi	r24, 0x00	; 0
    401e:	66 e0       	ldi	r22, 0x06	; 6
    4020:	41 e0       	ldi	r20, 0x01	; 1
    4022:	0e 94 a8 19 	call	0x3350	; 0x3350 <DIO_VidSetPinValue>
		if (OPEN_ONCE==1){SetDoorAngle(GET_OUT_FIRE);OPEN_ONCE=2;}
    4026:	89 81       	ldd	r24, Y+1	; 0x01
    4028:	81 30       	cpi	r24, 0x01	; 1
    402a:	29 f4       	brne	.+10     	; 0x4036 <StateOfFunAndBuzzer+0xd6>
    402c:	83 e0       	ldi	r24, 0x03	; 3
    402e:	0e 94 2b 20 	call	0x4056	; 0x4056 <SetDoorAngle>
    4032:	82 e0       	ldi	r24, 0x02	; 2
    4034:	89 83       	std	Y+1, r24	; 0x01
	in temp below more than 38 :-
	  1)rotate  Fan with the max voltage
	  2)open buzzer
	*/
	u8 OPEN_ONCE=1;
	while (Copy_U8Temp >= MAX_TEMP ){
    4036:	8a 81       	ldd	r24, Y+2	; 0x02
    4038:	86 32       	cpi	r24, 0x26	; 38
    403a:	00 f7       	brcc	.-64     	; 0x3ffc <StateOfFunAndBuzzer+0x9c>
		DcMotor_VidRotate(CLK_WISE);
		Timer0_VidSETDUTY(Duty_Fan);
		DIO_VidSetPinValue(BUZZER_PORT,BUZZER_PIN,HIGH);
		if (OPEN_ONCE==1){SetDoorAngle(GET_OUT_FIRE);OPEN_ONCE=2;}
	   }//end while
	 if (OPEN_ONCE==2){SetDoorAngle(GET_OUT);OPEN_ONCE=1;}
    403c:	89 81       	ldd	r24, Y+1	; 0x01
    403e:	82 30       	cpi	r24, 0x02	; 2
    4040:	29 f4       	brne	.+10     	; 0x404c <StateOfFunAndBuzzer+0xec>
    4042:	82 e0       	ldi	r24, 0x02	; 2
    4044:	0e 94 2b 20 	call	0x4056	; 0x4056 <SetDoorAngle>
    4048:	81 e0       	ldi	r24, 0x01	; 1
    404a:	89 83       	std	Y+1, r24	; 0x01
}//end Func
    404c:	0f 90       	pop	r0
    404e:	0f 90       	pop	r0
    4050:	cf 91       	pop	r28
    4052:	df 91       	pop	r29
    4054:	08 95       	ret

00004056 <SetDoorAngle>:
 Name        : SetDoorAngle
 Input       : void
 Output      : void
 Description : to set the duty of fan and state of buzzer
*/
void SetDoorAngle(u8 Copy_U8Angel) {
    4056:	df 93       	push	r29
    4058:	cf 93       	push	r28
    405a:	cd b7       	in	r28, 0x3d	; 61
    405c:	de b7       	in	r29, 0x3e	; 62
    405e:	6d 97       	sbiw	r28, 0x1d	; 29
    4060:	0f b6       	in	r0, 0x3f	; 63
    4062:	f8 94       	cli
    4064:	de bf       	out	0x3e, r29	; 62
    4066:	0f be       	out	0x3f, r0	; 63
    4068:	cd bf       	out	0x3d, r28	; 61
    406a:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Set the direction of the servo motor to 90 degrees, and make the OC1A PIN as a PWM to the servo*/
	if(Copy_U8Angel==GET_IN){
    406c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    406e:	81 30       	cpi	r24, 0x01	; 1
    4070:	09 f0       	breq	.+2      	; 0x4074 <SetDoorAngle+0x1e>
    4072:	7b c0       	rjmp	.+246    	; 0x416a <SetDoorAngle+0x114>
	/*i.e Open the door*/
	//SERVOMOTOR_VidSetDirection(90,OC1A_PIN);
	SERVOMOTOR_VidSetDirection(0,OC1A_PIN);
    4074:	80 e0       	ldi	r24, 0x00	; 0
    4076:	65 e0       	ldi	r22, 0x05	; 5
    4078:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <SERVOMOTOR_VidSetDirection>
    407c:	80 e0       	ldi	r24, 0x00	; 0
    407e:	90 e0       	ldi	r25, 0x00	; 0
    4080:	aa ef       	ldi	r26, 0xFA	; 250
    4082:	b4 e4       	ldi	r27, 0x44	; 68
    4084:	89 8f       	std	Y+25, r24	; 0x19
    4086:	9a 8f       	std	Y+26, r25	; 0x1a
    4088:	ab 8f       	std	Y+27, r26	; 0x1b
    408a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    408c:	69 8d       	ldd	r22, Y+25	; 0x19
    408e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4090:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4092:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4094:	20 e0       	ldi	r18, 0x00	; 0
    4096:	30 e0       	ldi	r19, 0x00	; 0
    4098:	4a ef       	ldi	r20, 0xFA	; 250
    409a:	54 e4       	ldi	r21, 0x44	; 68
    409c:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    40a0:	dc 01       	movw	r26, r24
    40a2:	cb 01       	movw	r24, r22
    40a4:	8d 8b       	std	Y+21, r24	; 0x15
    40a6:	9e 8b       	std	Y+22, r25	; 0x16
    40a8:	af 8b       	std	Y+23, r26	; 0x17
    40aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    40ac:	6d 89       	ldd	r22, Y+21	; 0x15
    40ae:	7e 89       	ldd	r23, Y+22	; 0x16
    40b0:	8f 89       	ldd	r24, Y+23	; 0x17
    40b2:	98 8d       	ldd	r25, Y+24	; 0x18
    40b4:	20 e0       	ldi	r18, 0x00	; 0
    40b6:	30 e0       	ldi	r19, 0x00	; 0
    40b8:	40 e8       	ldi	r20, 0x80	; 128
    40ba:	5f e3       	ldi	r21, 0x3F	; 63
    40bc:	0e 94 60 13 	call	0x26c0	; 0x26c0 <__ltsf2>
    40c0:	88 23       	and	r24, r24
    40c2:	2c f4       	brge	.+10     	; 0x40ce <SetDoorAngle+0x78>
		__ticks = 1;
    40c4:	81 e0       	ldi	r24, 0x01	; 1
    40c6:	90 e0       	ldi	r25, 0x00	; 0
    40c8:	9c 8b       	std	Y+20, r25	; 0x14
    40ca:	8b 8b       	std	Y+19, r24	; 0x13
    40cc:	3f c0       	rjmp	.+126    	; 0x414c <SetDoorAngle+0xf6>
	else if (__tmp > 65535)
    40ce:	6d 89       	ldd	r22, Y+21	; 0x15
    40d0:	7e 89       	ldd	r23, Y+22	; 0x16
    40d2:	8f 89       	ldd	r24, Y+23	; 0x17
    40d4:	98 8d       	ldd	r25, Y+24	; 0x18
    40d6:	20 e0       	ldi	r18, 0x00	; 0
    40d8:	3f ef       	ldi	r19, 0xFF	; 255
    40da:	4f e7       	ldi	r20, 0x7F	; 127
    40dc:	57 e4       	ldi	r21, 0x47	; 71
    40de:	0e 94 00 13 	call	0x2600	; 0x2600 <__gtsf2>
    40e2:	18 16       	cp	r1, r24
    40e4:	4c f5       	brge	.+82     	; 0x4138 <SetDoorAngle+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40e6:	69 8d       	ldd	r22, Y+25	; 0x19
    40e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    40ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    40ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    40ee:	20 e0       	ldi	r18, 0x00	; 0
    40f0:	30 e0       	ldi	r19, 0x00	; 0
    40f2:	40 e2       	ldi	r20, 0x20	; 32
    40f4:	51 e4       	ldi	r21, 0x41	; 65
    40f6:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    40fa:	dc 01       	movw	r26, r24
    40fc:	cb 01       	movw	r24, r22
    40fe:	bc 01       	movw	r22, r24
    4100:	cd 01       	movw	r24, r26
    4102:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    4106:	dc 01       	movw	r26, r24
    4108:	cb 01       	movw	r24, r22
    410a:	9c 8b       	std	Y+20, r25	; 0x14
    410c:	8b 8b       	std	Y+19, r24	; 0x13
    410e:	0f c0       	rjmp	.+30     	; 0x412e <SetDoorAngle+0xd8>
    4110:	88 ec       	ldi	r24, 0xC8	; 200
    4112:	90 e0       	ldi	r25, 0x00	; 0
    4114:	9a 8b       	std	Y+18, r25	; 0x12
    4116:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4118:	89 89       	ldd	r24, Y+17	; 0x11
    411a:	9a 89       	ldd	r25, Y+18	; 0x12
    411c:	01 97       	sbiw	r24, 0x01	; 1
    411e:	f1 f7       	brne	.-4      	; 0x411c <SetDoorAngle+0xc6>
    4120:	9a 8b       	std	Y+18, r25	; 0x12
    4122:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4124:	8b 89       	ldd	r24, Y+19	; 0x13
    4126:	9c 89       	ldd	r25, Y+20	; 0x14
    4128:	01 97       	sbiw	r24, 0x01	; 1
    412a:	9c 8b       	std	Y+20, r25	; 0x14
    412c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    412e:	8b 89       	ldd	r24, Y+19	; 0x13
    4130:	9c 89       	ldd	r25, Y+20	; 0x14
    4132:	00 97       	sbiw	r24, 0x00	; 0
    4134:	69 f7       	brne	.-38     	; 0x4110 <SetDoorAngle+0xba>
    4136:	14 c0       	rjmp	.+40     	; 0x4160 <SetDoorAngle+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4138:	6d 89       	ldd	r22, Y+21	; 0x15
    413a:	7e 89       	ldd	r23, Y+22	; 0x16
    413c:	8f 89       	ldd	r24, Y+23	; 0x17
    413e:	98 8d       	ldd	r25, Y+24	; 0x18
    4140:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    4144:	dc 01       	movw	r26, r24
    4146:	cb 01       	movw	r24, r22
    4148:	9c 8b       	std	Y+20, r25	; 0x14
    414a:	8b 8b       	std	Y+19, r24	; 0x13
    414c:	8b 89       	ldd	r24, Y+19	; 0x13
    414e:	9c 89       	ldd	r25, Y+20	; 0x14
    4150:	98 8b       	std	Y+16, r25	; 0x10
    4152:	8f 87       	std	Y+15, r24	; 0x0f
    4154:	8f 85       	ldd	r24, Y+15	; 0x0f
    4156:	98 89       	ldd	r25, Y+16	; 0x10
    4158:	01 97       	sbiw	r24, 0x01	; 1
    415a:	f1 f7       	brne	.-4      	; 0x4158 <SetDoorAngle+0x102>
    415c:	98 8b       	std	Y+16, r25	; 0x10
    415e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2000);
	/*Set the direction of the servo motor to 0 degrees, and make the OC1A PIN as a PWM to the servo*/
	/*i.e Close the door*/
	//SERVOMOTOR_VidSetDirection(0,OC1A_PIN);
	SERVOMOTOR_VidSetDirection(90,OC1A_PIN);
    4160:	8a e5       	ldi	r24, 0x5A	; 90
    4162:	65 e0       	ldi	r22, 0x05	; 5
    4164:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <SERVOMOTOR_VidSetDirection>
    4168:	83 c0       	rjmp	.+262    	; 0x4270 <SetDoorAngle+0x21a>
	}
	else if(Copy_U8Angel==GET_OUT){
    416a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    416c:	82 30       	cpi	r24, 0x02	; 2
    416e:	09 f0       	breq	.+2      	; 0x4172 <SetDoorAngle+0x11c>
    4170:	7b c0       	rjmp	.+246    	; 0x4268 <SetDoorAngle+0x212>
			/*i.e Open the door*/
			SERVOMOTOR_VidSetDirection(180,OC1A_PIN);
    4172:	84 eb       	ldi	r24, 0xB4	; 180
    4174:	65 e0       	ldi	r22, 0x05	; 5
    4176:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <SERVOMOTOR_VidSetDirection>
    417a:	80 e0       	ldi	r24, 0x00	; 0
    417c:	90 e8       	ldi	r25, 0x80	; 128
    417e:	ab e3       	ldi	r26, 0x3B	; 59
    4180:	b5 e4       	ldi	r27, 0x45	; 69
    4182:	8b 87       	std	Y+11, r24	; 0x0b
    4184:	9c 87       	std	Y+12, r25	; 0x0c
    4186:	ad 87       	std	Y+13, r26	; 0x0d
    4188:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    418a:	6b 85       	ldd	r22, Y+11	; 0x0b
    418c:	7c 85       	ldd	r23, Y+12	; 0x0c
    418e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4190:	9e 85       	ldd	r25, Y+14	; 0x0e
    4192:	20 e0       	ldi	r18, 0x00	; 0
    4194:	30 e0       	ldi	r19, 0x00	; 0
    4196:	4a ef       	ldi	r20, 0xFA	; 250
    4198:	54 e4       	ldi	r21, 0x44	; 68
    419a:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    419e:	dc 01       	movw	r26, r24
    41a0:	cb 01       	movw	r24, r22
    41a2:	8f 83       	std	Y+7, r24	; 0x07
    41a4:	98 87       	std	Y+8, r25	; 0x08
    41a6:	a9 87       	std	Y+9, r26	; 0x09
    41a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    41aa:	6f 81       	ldd	r22, Y+7	; 0x07
    41ac:	78 85       	ldd	r23, Y+8	; 0x08
    41ae:	89 85       	ldd	r24, Y+9	; 0x09
    41b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    41b2:	20 e0       	ldi	r18, 0x00	; 0
    41b4:	30 e0       	ldi	r19, 0x00	; 0
    41b6:	40 e8       	ldi	r20, 0x80	; 128
    41b8:	5f e3       	ldi	r21, 0x3F	; 63
    41ba:	0e 94 60 13 	call	0x26c0	; 0x26c0 <__ltsf2>
    41be:	88 23       	and	r24, r24
    41c0:	2c f4       	brge	.+10     	; 0x41cc <SetDoorAngle+0x176>
		__ticks = 1;
    41c2:	81 e0       	ldi	r24, 0x01	; 1
    41c4:	90 e0       	ldi	r25, 0x00	; 0
    41c6:	9e 83       	std	Y+6, r25	; 0x06
    41c8:	8d 83       	std	Y+5, r24	; 0x05
    41ca:	3f c0       	rjmp	.+126    	; 0x424a <SetDoorAngle+0x1f4>
	else if (__tmp > 65535)
    41cc:	6f 81       	ldd	r22, Y+7	; 0x07
    41ce:	78 85       	ldd	r23, Y+8	; 0x08
    41d0:	89 85       	ldd	r24, Y+9	; 0x09
    41d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    41d4:	20 e0       	ldi	r18, 0x00	; 0
    41d6:	3f ef       	ldi	r19, 0xFF	; 255
    41d8:	4f e7       	ldi	r20, 0x7F	; 127
    41da:	57 e4       	ldi	r21, 0x47	; 71
    41dc:	0e 94 00 13 	call	0x2600	; 0x2600 <__gtsf2>
    41e0:	18 16       	cp	r1, r24
    41e2:	4c f5       	brge	.+82     	; 0x4236 <SetDoorAngle+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    41e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    41e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    41ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    41ec:	20 e0       	ldi	r18, 0x00	; 0
    41ee:	30 e0       	ldi	r19, 0x00	; 0
    41f0:	40 e2       	ldi	r20, 0x20	; 32
    41f2:	51 e4       	ldi	r21, 0x41	; 65
    41f4:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    41f8:	dc 01       	movw	r26, r24
    41fa:	cb 01       	movw	r24, r22
    41fc:	bc 01       	movw	r22, r24
    41fe:	cd 01       	movw	r24, r26
    4200:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    4204:	dc 01       	movw	r26, r24
    4206:	cb 01       	movw	r24, r22
    4208:	9e 83       	std	Y+6, r25	; 0x06
    420a:	8d 83       	std	Y+5, r24	; 0x05
    420c:	0f c0       	rjmp	.+30     	; 0x422c <SetDoorAngle+0x1d6>
    420e:	88 ec       	ldi	r24, 0xC8	; 200
    4210:	90 e0       	ldi	r25, 0x00	; 0
    4212:	9c 83       	std	Y+4, r25	; 0x04
    4214:	8b 83       	std	Y+3, r24	; 0x03
    4216:	8b 81       	ldd	r24, Y+3	; 0x03
    4218:	9c 81       	ldd	r25, Y+4	; 0x04
    421a:	01 97       	sbiw	r24, 0x01	; 1
    421c:	f1 f7       	brne	.-4      	; 0x421a <SetDoorAngle+0x1c4>
    421e:	9c 83       	std	Y+4, r25	; 0x04
    4220:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4222:	8d 81       	ldd	r24, Y+5	; 0x05
    4224:	9e 81       	ldd	r25, Y+6	; 0x06
    4226:	01 97       	sbiw	r24, 0x01	; 1
    4228:	9e 83       	std	Y+6, r25	; 0x06
    422a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    422c:	8d 81       	ldd	r24, Y+5	; 0x05
    422e:	9e 81       	ldd	r25, Y+6	; 0x06
    4230:	00 97       	sbiw	r24, 0x00	; 0
    4232:	69 f7       	brne	.-38     	; 0x420e <SetDoorAngle+0x1b8>
    4234:	14 c0       	rjmp	.+40     	; 0x425e <SetDoorAngle+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4236:	6f 81       	ldd	r22, Y+7	; 0x07
    4238:	78 85       	ldd	r23, Y+8	; 0x08
    423a:	89 85       	ldd	r24, Y+9	; 0x09
    423c:	9a 85       	ldd	r25, Y+10	; 0x0a
    423e:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    4242:	dc 01       	movw	r26, r24
    4244:	cb 01       	movw	r24, r22
    4246:	9e 83       	std	Y+6, r25	; 0x06
    4248:	8d 83       	std	Y+5, r24	; 0x05
    424a:	8d 81       	ldd	r24, Y+5	; 0x05
    424c:	9e 81       	ldd	r25, Y+6	; 0x06
    424e:	9a 83       	std	Y+2, r25	; 0x02
    4250:	89 83       	std	Y+1, r24	; 0x01
    4252:	89 81       	ldd	r24, Y+1	; 0x01
    4254:	9a 81       	ldd	r25, Y+2	; 0x02
    4256:	01 97       	sbiw	r24, 0x01	; 1
    4258:	f1 f7       	brne	.-4      	; 0x4256 <SetDoorAngle+0x200>
    425a:	9a 83       	std	Y+2, r25	; 0x02
    425c:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(3000);
			/*i.e Close the door*/
			SERVOMOTOR_VidSetDirection(90,OC1A_PIN);
    425e:	8a e5       	ldi	r24, 0x5A	; 90
    4260:	65 e0       	ldi	r22, 0x05	; 5
    4262:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <SERVOMOTOR_VidSetDirection>
    4266:	04 c0       	rjmp	.+8      	; 0x4270 <SetDoorAngle+0x21a>
	}
	else{SERVOMOTOR_VidSetDirection(180,OC1A_PIN);}
    4268:	84 eb       	ldi	r24, 0xB4	; 180
    426a:	65 e0       	ldi	r22, 0x05	; 5
    426c:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <SERVOMOTOR_VidSetDirection>


		
	}
    4270:	6d 96       	adiw	r28, 0x1d	; 29
    4272:	0f b6       	in	r0, 0x3f	; 63
    4274:	f8 94       	cli
    4276:	de bf       	out	0x3e, r29	; 62
    4278:	0f be       	out	0x3f, r0	; 63
    427a:	cd bf       	out	0x3d, r28	; 61
    427c:	cf 91       	pop	r28
    427e:	df 91       	pop	r29
    4280:	08 95       	ret

00004282 <DisplayTempOnLCD>:
 Name        : DisplayTempOnLCD
 Input       : U8
 Output      : void
 Description : to Display Temperture on LCD
*/
void DisplayTempOnLCD(u8 Copy_U8Temp){
    4282:	af 92       	push	r10
    4284:	bf 92       	push	r11
    4286:	cf 92       	push	r12
    4288:	df 92       	push	r13
    428a:	ef 92       	push	r14
    428c:	ff 92       	push	r15
    428e:	0f 93       	push	r16
    4290:	1f 93       	push	r17
    4292:	df 93       	push	r29
    4294:	cf 93       	push	r28
    4296:	0f 92       	push	r0
    4298:	cd b7       	in	r28, 0x3d	; 61
    429a:	de b7       	in	r29, 0x3e	; 62
    429c:	89 83       	std	Y+1, r24	; 0x01
	LCD_VidPosCur(0,0);
    429e:	80 e0       	ldi	r24, 0x00	; 0
    42a0:	60 e0       	ldi	r22, 0x00	; 0
    42a2:	0e 94 1a 2f 	call	0x5e34	; 0x5e34 <LCD_VidPosCur>
	LCD_VidSendString("TEMPERATURE : ");
    42a6:	83 ea       	ldi	r24, 0xA3	; 163
    42a8:	90 e0       	ldi	r25, 0x00	; 0
    42aa:	0e 94 4d 2b 	call	0x569a	; 0x569a <LCD_VidSendString>
	LCD_VidPrintVar(Copy_U8Temp);
    42ae:	89 81       	ldd	r24, Y+1	; 0x01
    42b0:	a8 2e       	mov	r10, r24
    42b2:	bb 24       	eor	r11, r11
    42b4:	cc 24       	eor	r12, r12
    42b6:	dd 24       	eor	r13, r13
    42b8:	ee 24       	eor	r14, r14
    42ba:	ff 24       	eor	r15, r15
    42bc:	87 01       	movw	r16, r14
    42be:	2a 2d       	mov	r18, r10
    42c0:	3b 2d       	mov	r19, r11
    42c2:	4c 2d       	mov	r20, r12
    42c4:	5d 2d       	mov	r21, r13
    42c6:	6e 2d       	mov	r22, r14
    42c8:	7f 2d       	mov	r23, r15
    42ca:	80 2f       	mov	r24, r16
    42cc:	91 2f       	mov	r25, r17
    42ce:	0e 94 7c 2c 	call	0x58f8	; 0x58f8 <LCD_VidPrintVar>
	LCD_VidSendChar('C');
    42d2:	83 e4       	ldi	r24, 0x43	; 67
    42d4:	0e 94 42 2a 	call	0x5484	; 0x5484 <LCD_VidSendChar>
	LCD_VidSendChar(' ');
    42d8:	80 e2       	ldi	r24, 0x20	; 32
    42da:	0e 94 42 2a 	call	0x5484	; 0x5484 <LCD_VidSendChar>
}
    42de:	0f 90       	pop	r0
    42e0:	cf 91       	pop	r28
    42e2:	df 91       	pop	r29
    42e4:	1f 91       	pop	r17
    42e6:	0f 91       	pop	r16
    42e8:	ff 90       	pop	r15
    42ea:	ef 90       	pop	r14
    42ec:	df 90       	pop	r13
    42ee:	cf 90       	pop	r12
    42f0:	bf 90       	pop	r11
    42f2:	af 90       	pop	r10
    42f4:	08 95       	ret

000042f6 <EnteringUrID>:
 Name        : EnteringUrID
 Input       : U8
 Output      : void
 Description : to Enter the ID num in Global array to check on the permission
*/
void EnteringUrID(u8 Copy_U8IDNum){
    42f6:	df 93       	push	r29
    42f8:	cf 93       	push	r28
    42fa:	0f 92       	push	r0
    42fc:	cd b7       	in	r28, 0x3d	; 61
    42fe:	de b7       	in	r29, 0x3e	; 62
    4300:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_U8IDNum != NO_INPUT_NUM ){
    4302:	89 81       	ldd	r24, Y+1	; 0x01
    4304:	88 23       	and	r24, r24
    4306:	b9 f0       	breq	.+46     	; 0x4336 <EnteringUrID+0x40>
		ID_compare[ID_index] = Copy_U8IDNum ;
    4308:	80 91 16 02 	lds	r24, 0x0216
    430c:	88 2f       	mov	r24, r24
    430e:	90 e0       	ldi	r25, 0x00	; 0
    4310:	fc 01       	movw	r30, r24
    4312:	ef 5e       	subi	r30, 0xEF	; 239
    4314:	fd 4f       	sbci	r31, 0xFD	; 253
    4316:	89 81       	ldd	r24, Y+1	; 0x01
    4318:	80 83       	st	Z, r24
		LCD_VidPosCur(1,ID_index);
    431a:	90 91 16 02 	lds	r25, 0x0216
    431e:	81 e0       	ldi	r24, 0x01	; 1
    4320:	69 2f       	mov	r22, r25
    4322:	0e 94 1a 2f 	call	0x5e34	; 0x5e34 <LCD_VidPosCur>
		LCD_VidSendChar('*') ;
    4326:	8a e2       	ldi	r24, 0x2A	; 42
    4328:	0e 94 42 2a 	call	0x5484	; 0x5484 <LCD_VidSendChar>
		//LCD_VidSendChar(Copy_U8IDNum) ;

		ID_index++ ;
    432c:	80 91 16 02 	lds	r24, 0x0216
    4330:	8f 5f       	subi	r24, 0xFF	; 255
    4332:	80 93 16 02 	sts	0x0216, r24
	}//end if
}
    4336:	0f 90       	pop	r0
    4338:	cf 91       	pop	r28
    433a:	df 91       	pop	r29
    433c:	08 95       	ret

0000433e <CheckOnPassword>:
 Input       : void
 Output      : u8
 Description : to check on password which in ID_compare and rising flag to detect on the
               validability on password
*/
u8 CheckOnPassword(void){
    433e:	df 93       	push	r29
    4340:	cf 93       	push	r28
    4342:	cd b7       	in	r28, 0x3d	; 61
    4344:	de b7       	in	r29, 0x3e	; 62
    4346:	61 97       	sbiw	r28, 0x11	; 17
    4348:	0f b6       	in	r0, 0x3f	; 63
    434a:	f8 94       	cli
    434c:	de bf       	out	0x3e, r29	; 62
    434e:	0f be       	out	0x3f, r0	; 63
    4350:	cd bf       	out	0x3d, r28	; 61
	ID_flag==RISE_FLAG;
	u8 counterIDIndex= 0 ;
    4352:	18 8a       	std	Y+16, r1	; 0x10
	u8 countRightMatch =0;
    4354:	1f 86       	std	Y+15, r1	; 0x0f
	if ( ID_index == NUM_OF_ELEMENT_IN_PASS ){
    4356:	80 91 16 02 	lds	r24, 0x0216
    435a:	85 30       	cpi	r24, 0x05	; 5
    435c:	d1 f4       	brne	.+52     	; 0x4392 <CheckOnPassword+0x54>
    435e:	16 c0       	rjmp	.+44     	; 0x438c <CheckOnPassword+0x4e>
		while (counterIDIndex < NUM_OF_ELEMENT_IN_PASS){		
			if (ID[counterIDIndex] == ID_compare[counterIDIndex] ){
    4360:	88 89       	ldd	r24, Y+16	; 0x10
    4362:	88 2f       	mov	r24, r24
    4364:	90 e0       	ldi	r25, 0x00	; 0
    4366:	fc 01       	movw	r30, r24
    4368:	ef 5f       	subi	r30, 0xFF	; 255
    436a:	fd 4f       	sbci	r31, 0xFD	; 253
    436c:	20 81       	ld	r18, Z
    436e:	88 89       	ldd	r24, Y+16	; 0x10
    4370:	88 2f       	mov	r24, r24
    4372:	90 e0       	ldi	r25, 0x00	; 0
    4374:	fc 01       	movw	r30, r24
    4376:	ef 5e       	subi	r30, 0xEF	; 239
    4378:	fd 4f       	sbci	r31, 0xFD	; 253
    437a:	80 81       	ld	r24, Z
    437c:	28 17       	cp	r18, r24
    437e:	19 f4       	brne	.+6      	; 0x4386 <CheckOnPassword+0x48>
				//ID_flag = RISE_FLAG ;			
				countRightMatch++;			
    4380:	8f 85       	ldd	r24, Y+15	; 0x0f
    4382:	8f 5f       	subi	r24, 0xFF	; 255
    4384:	8f 87       	std	Y+15, r24	; 0x0f
			}//end if
			counterIDIndex++;
    4386:	88 89       	ldd	r24, Y+16	; 0x10
    4388:	8f 5f       	subi	r24, 0xFF	; 255
    438a:	88 8b       	std	Y+16, r24	; 0x10
u8 CheckOnPassword(void){
	ID_flag==RISE_FLAG;
	u8 counterIDIndex= 0 ;
	u8 countRightMatch =0;
	if ( ID_index == NUM_OF_ELEMENT_IN_PASS ){
		while (counterIDIndex < NUM_OF_ELEMENT_IN_PASS){		
    438c:	88 89       	ldd	r24, Y+16	; 0x10
    438e:	85 30       	cpi	r24, 0x05	; 5
    4390:	38 f3       	brcs	.-50     	; 0x4360 <CheckOnPassword+0x22>
	}//end if check

	/*to begin in core programme with needed orders
	  1)welcome massage   2)begin home working
	 */
	if (countRightMatch==5 ){
    4392:	8f 85       	ldd	r24, Y+15	; 0x0f
    4394:	85 30       	cpi	r24, 0x05	; 5
    4396:	09 f0       	breq	.+2      	; 0x439a <CheckOnPassword+0x5c>
    4398:	96 c0       	rjmp	.+300    	; 0x44c6 <CheckOnPassword+0x188>
	    LCD_VidClear();
    439a:	0e 94 3e 2f 	call	0x5e7c	; 0x5e7c <LCD_VidClear>
		LCD_VidPosCur(0,0);
    439e:	80 e0       	ldi	r24, 0x00	; 0
    43a0:	60 e0       	ldi	r22, 0x00	; 0
    43a2:	0e 94 1a 2f 	call	0x5e34	; 0x5e34 <LCD_VidPosCur>
		LCD_VidSendString("correct ID");
    43a6:	82 eb       	ldi	r24, 0xB2	; 178
    43a8:	90 e0       	ldi	r25, 0x00	; 0
    43aa:	0e 94 4d 2b 	call	0x569a	; 0x569a <LCD_VidSendString>
		LCD_VidPosCur(1,0);
    43ae:	81 e0       	ldi	r24, 0x01	; 1
    43b0:	60 e0       	ldi	r22, 0x00	; 0
    43b2:	0e 94 1a 2f 	call	0x5e34	; 0x5e34 <LCD_VidPosCur>
		LCD_VidSendString("   WELCOME");
    43b6:	8d eb       	ldi	r24, 0xBD	; 189
    43b8:	90 e0       	ldi	r25, 0x00	; 0
    43ba:	0e 94 4d 2b 	call	0x569a	; 0x569a <LCD_VidSendString>
		Wrong_inputs=0;
    43be:	10 92 19 02 	sts	0x0219, r1
    43c2:	80 e0       	ldi	r24, 0x00	; 0
    43c4:	90 e0       	ldi	r25, 0x00	; 0
    43c6:	aa e7       	ldi	r26, 0x7A	; 122
    43c8:	b4 e4       	ldi	r27, 0x44	; 68
    43ca:	8b 87       	std	Y+11, r24	; 0x0b
    43cc:	9c 87       	std	Y+12, r25	; 0x0c
    43ce:	ad 87       	std	Y+13, r26	; 0x0d
    43d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    43d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    43d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    43d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    43da:	20 e0       	ldi	r18, 0x00	; 0
    43dc:	30 e0       	ldi	r19, 0x00	; 0
    43de:	4a ef       	ldi	r20, 0xFA	; 250
    43e0:	54 e4       	ldi	r21, 0x44	; 68
    43e2:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    43e6:	dc 01       	movw	r26, r24
    43e8:	cb 01       	movw	r24, r22
    43ea:	8f 83       	std	Y+7, r24	; 0x07
    43ec:	98 87       	std	Y+8, r25	; 0x08
    43ee:	a9 87       	std	Y+9, r26	; 0x09
    43f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    43f2:	6f 81       	ldd	r22, Y+7	; 0x07
    43f4:	78 85       	ldd	r23, Y+8	; 0x08
    43f6:	89 85       	ldd	r24, Y+9	; 0x09
    43f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    43fa:	20 e0       	ldi	r18, 0x00	; 0
    43fc:	30 e0       	ldi	r19, 0x00	; 0
    43fe:	40 e8       	ldi	r20, 0x80	; 128
    4400:	5f e3       	ldi	r21, 0x3F	; 63
    4402:	0e 94 60 13 	call	0x26c0	; 0x26c0 <__ltsf2>
    4406:	88 23       	and	r24, r24
    4408:	2c f4       	brge	.+10     	; 0x4414 <CheckOnPassword+0xd6>
		__ticks = 1;
    440a:	81 e0       	ldi	r24, 0x01	; 1
    440c:	90 e0       	ldi	r25, 0x00	; 0
    440e:	9e 83       	std	Y+6, r25	; 0x06
    4410:	8d 83       	std	Y+5, r24	; 0x05
    4412:	3f c0       	rjmp	.+126    	; 0x4492 <CheckOnPassword+0x154>
	else if (__tmp > 65535)
    4414:	6f 81       	ldd	r22, Y+7	; 0x07
    4416:	78 85       	ldd	r23, Y+8	; 0x08
    4418:	89 85       	ldd	r24, Y+9	; 0x09
    441a:	9a 85       	ldd	r25, Y+10	; 0x0a
    441c:	20 e0       	ldi	r18, 0x00	; 0
    441e:	3f ef       	ldi	r19, 0xFF	; 255
    4420:	4f e7       	ldi	r20, 0x7F	; 127
    4422:	57 e4       	ldi	r21, 0x47	; 71
    4424:	0e 94 00 13 	call	0x2600	; 0x2600 <__gtsf2>
    4428:	18 16       	cp	r1, r24
    442a:	4c f5       	brge	.+82     	; 0x447e <CheckOnPassword+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    442c:	6b 85       	ldd	r22, Y+11	; 0x0b
    442e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4430:	8d 85       	ldd	r24, Y+13	; 0x0d
    4432:	9e 85       	ldd	r25, Y+14	; 0x0e
    4434:	20 e0       	ldi	r18, 0x00	; 0
    4436:	30 e0       	ldi	r19, 0x00	; 0
    4438:	40 e2       	ldi	r20, 0x20	; 32
    443a:	51 e4       	ldi	r21, 0x41	; 65
    443c:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    4440:	dc 01       	movw	r26, r24
    4442:	cb 01       	movw	r24, r22
    4444:	bc 01       	movw	r22, r24
    4446:	cd 01       	movw	r24, r26
    4448:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    444c:	dc 01       	movw	r26, r24
    444e:	cb 01       	movw	r24, r22
    4450:	9e 83       	std	Y+6, r25	; 0x06
    4452:	8d 83       	std	Y+5, r24	; 0x05
    4454:	0f c0       	rjmp	.+30     	; 0x4474 <CheckOnPassword+0x136>
    4456:	88 ec       	ldi	r24, 0xC8	; 200
    4458:	90 e0       	ldi	r25, 0x00	; 0
    445a:	9c 83       	std	Y+4, r25	; 0x04
    445c:	8b 83       	std	Y+3, r24	; 0x03
    445e:	8b 81       	ldd	r24, Y+3	; 0x03
    4460:	9c 81       	ldd	r25, Y+4	; 0x04
    4462:	01 97       	sbiw	r24, 0x01	; 1
    4464:	f1 f7       	brne	.-4      	; 0x4462 <CheckOnPassword+0x124>
    4466:	9c 83       	std	Y+4, r25	; 0x04
    4468:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    446a:	8d 81       	ldd	r24, Y+5	; 0x05
    446c:	9e 81       	ldd	r25, Y+6	; 0x06
    446e:	01 97       	sbiw	r24, 0x01	; 1
    4470:	9e 83       	std	Y+6, r25	; 0x06
    4472:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4474:	8d 81       	ldd	r24, Y+5	; 0x05
    4476:	9e 81       	ldd	r25, Y+6	; 0x06
    4478:	00 97       	sbiw	r24, 0x00	; 0
    447a:	69 f7       	brne	.-38     	; 0x4456 <CheckOnPassword+0x118>
    447c:	14 c0       	rjmp	.+40     	; 0x44a6 <CheckOnPassword+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    447e:	6f 81       	ldd	r22, Y+7	; 0x07
    4480:	78 85       	ldd	r23, Y+8	; 0x08
    4482:	89 85       	ldd	r24, Y+9	; 0x09
    4484:	9a 85       	ldd	r25, Y+10	; 0x0a
    4486:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    448a:	dc 01       	movw	r26, r24
    448c:	cb 01       	movw	r24, r22
    448e:	9e 83       	std	Y+6, r25	; 0x06
    4490:	8d 83       	std	Y+5, r24	; 0x05
    4492:	8d 81       	ldd	r24, Y+5	; 0x05
    4494:	9e 81       	ldd	r25, Y+6	; 0x06
    4496:	9a 83       	std	Y+2, r25	; 0x02
    4498:	89 83       	std	Y+1, r24	; 0x01
    449a:	89 81       	ldd	r24, Y+1	; 0x01
    449c:	9a 81       	ldd	r25, Y+2	; 0x02
    449e:	01 97       	sbiw	r24, 0x01	; 1
    44a0:	f1 f7       	brne	.-4      	; 0x449e <CheckOnPassword+0x160>
    44a2:	9a 83       	std	Y+2, r25	; 0x02
    44a4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
	    LCD_VidClear();
    44a6:	0e 94 3e 2f 	call	0x5e7c	; 0x5e7c <LCD_VidClear>
		ID_index = 0 ;
    44aa:	10 92 16 02 	sts	0x0216, r1
		countRightMatch=0;
    44ae:	1f 86       	std	Y+15, r1	; 0x0f

		/* to count num of human entering room */
		counter_enter++;
    44b0:	80 91 1c 02 	lds	r24, 0x021C
    44b4:	8f 5f       	subi	r24, 0xFF	; 255
    44b6:	80 93 1c 02 	sts	0x021C, r24

		/* To make angle of door while entering */
		SetDoorAngle(GET_IN);
    44ba:	81 e0       	ldi	r24, 0x01	; 1
    44bc:	0e 94 2b 20 	call	0x4056	; 0x4056 <SetDoorAngle>
		ID_flag==LOW_FLAG;
	    return RISE_FLAG ;
    44c0:	81 e0       	ldi	r24, 0x01	; 1
    44c2:	89 8b       	std	Y+17, r24	; 0x11
    44c4:	01 c0       	rjmp	.+2      	; 0x44c8 <CheckOnPassword+0x18a>
	}//end if
	
	
	return LOW_FLAG ;
    44c6:	19 8a       	std	Y+17, r1	; 0x11
    44c8:	89 89       	ldd	r24, Y+17	; 0x11
	
}//end FUNC
    44ca:	61 96       	adiw	r28, 0x11	; 17
    44cc:	0f b6       	in	r0, 0x3f	; 63
    44ce:	f8 94       	cli
    44d0:	de bf       	out	0x3e, r29	; 62
    44d2:	0f be       	out	0x3f, r0	; 63
    44d4:	cd bf       	out	0x3d, r28	; 61
    44d6:	cf 91       	pop	r28
    44d8:	df 91       	pop	r29
    44da:	08 95       	ret

000044dc <IsPasswordFalse>:
 Input       : void
 Output      : void
 Description : to make some orders on false password like display statement on LCD and and check on max numbers
               of iterations
*/
void IsPasswordFalse(void){
    44dc:	df 93       	push	r29
    44de:	cf 93       	push	r28
    44e0:	cd b7       	in	r28, 0x3d	; 61
    44e2:	de b7       	in	r29, 0x3e	; 62
    44e4:	6c 97       	sbiw	r28, 0x1c	; 28
    44e6:	0f b6       	in	r0, 0x3f	; 63
    44e8:	f8 94       	cli
    44ea:	de bf       	out	0x3e, r29	; 62
    44ec:	0f be       	out	0x3f, r0	; 63
    44ee:	cd bf       	out	0x3d, r28	; 61
	//if (ID_flag==1){
	    LCD_VidClear();
    44f0:	0e 94 3e 2f 	call	0x5e7c	; 0x5e7c <LCD_VidClear>
		LCD_VidPosCur(0,0);
    44f4:	80 e0       	ldi	r24, 0x00	; 0
    44f6:	60 e0       	ldi	r22, 0x00	; 0
    44f8:	0e 94 1a 2f 	call	0x5e34	; 0x5e34 <LCD_VidPosCur>
		LCD_VidSendString("incorrect ID");
    44fc:	88 ec       	ldi	r24, 0xC8	; 200
    44fe:	90 e0       	ldi	r25, 0x00	; 0
    4500:	0e 94 4d 2b 	call	0x569a	; 0x569a <LCD_VidSendString>
		Wrong_inputs++;
    4504:	80 91 19 02 	lds	r24, 0x0219
    4508:	8f 5f       	subi	r24, 0xFF	; 255
    450a:	80 93 19 02 	sts	0x0219, r24
    450e:	80 e0       	ldi	r24, 0x00	; 0
    4510:	90 e0       	ldi	r25, 0x00	; 0
    4512:	aa e7       	ldi	r26, 0x7A	; 122
    4514:	b4 e4       	ldi	r27, 0x44	; 68
    4516:	89 8f       	std	Y+25, r24	; 0x19
    4518:	9a 8f       	std	Y+26, r25	; 0x1a
    451a:	ab 8f       	std	Y+27, r26	; 0x1b
    451c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    451e:	69 8d       	ldd	r22, Y+25	; 0x19
    4520:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4522:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4524:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4526:	20 e0       	ldi	r18, 0x00	; 0
    4528:	30 e0       	ldi	r19, 0x00	; 0
    452a:	4a ef       	ldi	r20, 0xFA	; 250
    452c:	54 e4       	ldi	r21, 0x44	; 68
    452e:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    4532:	dc 01       	movw	r26, r24
    4534:	cb 01       	movw	r24, r22
    4536:	8d 8b       	std	Y+21, r24	; 0x15
    4538:	9e 8b       	std	Y+22, r25	; 0x16
    453a:	af 8b       	std	Y+23, r26	; 0x17
    453c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    453e:	6d 89       	ldd	r22, Y+21	; 0x15
    4540:	7e 89       	ldd	r23, Y+22	; 0x16
    4542:	8f 89       	ldd	r24, Y+23	; 0x17
    4544:	98 8d       	ldd	r25, Y+24	; 0x18
    4546:	20 e0       	ldi	r18, 0x00	; 0
    4548:	30 e0       	ldi	r19, 0x00	; 0
    454a:	40 e8       	ldi	r20, 0x80	; 128
    454c:	5f e3       	ldi	r21, 0x3F	; 63
    454e:	0e 94 60 13 	call	0x26c0	; 0x26c0 <__ltsf2>
    4552:	88 23       	and	r24, r24
    4554:	2c f4       	brge	.+10     	; 0x4560 <IsPasswordFalse+0x84>
		__ticks = 1;
    4556:	81 e0       	ldi	r24, 0x01	; 1
    4558:	90 e0       	ldi	r25, 0x00	; 0
    455a:	9c 8b       	std	Y+20, r25	; 0x14
    455c:	8b 8b       	std	Y+19, r24	; 0x13
    455e:	3f c0       	rjmp	.+126    	; 0x45de <IsPasswordFalse+0x102>
	else if (__tmp > 65535)
    4560:	6d 89       	ldd	r22, Y+21	; 0x15
    4562:	7e 89       	ldd	r23, Y+22	; 0x16
    4564:	8f 89       	ldd	r24, Y+23	; 0x17
    4566:	98 8d       	ldd	r25, Y+24	; 0x18
    4568:	20 e0       	ldi	r18, 0x00	; 0
    456a:	3f ef       	ldi	r19, 0xFF	; 255
    456c:	4f e7       	ldi	r20, 0x7F	; 127
    456e:	57 e4       	ldi	r21, 0x47	; 71
    4570:	0e 94 00 13 	call	0x2600	; 0x2600 <__gtsf2>
    4574:	18 16       	cp	r1, r24
    4576:	4c f5       	brge	.+82     	; 0x45ca <IsPasswordFalse+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4578:	69 8d       	ldd	r22, Y+25	; 0x19
    457a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    457c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    457e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4580:	20 e0       	ldi	r18, 0x00	; 0
    4582:	30 e0       	ldi	r19, 0x00	; 0
    4584:	40 e2       	ldi	r20, 0x20	; 32
    4586:	51 e4       	ldi	r21, 0x41	; 65
    4588:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    458c:	dc 01       	movw	r26, r24
    458e:	cb 01       	movw	r24, r22
    4590:	bc 01       	movw	r22, r24
    4592:	cd 01       	movw	r24, r26
    4594:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    4598:	dc 01       	movw	r26, r24
    459a:	cb 01       	movw	r24, r22
    459c:	9c 8b       	std	Y+20, r25	; 0x14
    459e:	8b 8b       	std	Y+19, r24	; 0x13
    45a0:	0f c0       	rjmp	.+30     	; 0x45c0 <IsPasswordFalse+0xe4>
    45a2:	88 ec       	ldi	r24, 0xC8	; 200
    45a4:	90 e0       	ldi	r25, 0x00	; 0
    45a6:	9a 8b       	std	Y+18, r25	; 0x12
    45a8:	89 8b       	std	Y+17, r24	; 0x11
    45aa:	89 89       	ldd	r24, Y+17	; 0x11
    45ac:	9a 89       	ldd	r25, Y+18	; 0x12
    45ae:	01 97       	sbiw	r24, 0x01	; 1
    45b0:	f1 f7       	brne	.-4      	; 0x45ae <IsPasswordFalse+0xd2>
    45b2:	9a 8b       	std	Y+18, r25	; 0x12
    45b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45b6:	8b 89       	ldd	r24, Y+19	; 0x13
    45b8:	9c 89       	ldd	r25, Y+20	; 0x14
    45ba:	01 97       	sbiw	r24, 0x01	; 1
    45bc:	9c 8b       	std	Y+20, r25	; 0x14
    45be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45c0:	8b 89       	ldd	r24, Y+19	; 0x13
    45c2:	9c 89       	ldd	r25, Y+20	; 0x14
    45c4:	00 97       	sbiw	r24, 0x00	; 0
    45c6:	69 f7       	brne	.-38     	; 0x45a2 <IsPasswordFalse+0xc6>
    45c8:	14 c0       	rjmp	.+40     	; 0x45f2 <IsPasswordFalse+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45ca:	6d 89       	ldd	r22, Y+21	; 0x15
    45cc:	7e 89       	ldd	r23, Y+22	; 0x16
    45ce:	8f 89       	ldd	r24, Y+23	; 0x17
    45d0:	98 8d       	ldd	r25, Y+24	; 0x18
    45d2:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    45d6:	dc 01       	movw	r26, r24
    45d8:	cb 01       	movw	r24, r22
    45da:	9c 8b       	std	Y+20, r25	; 0x14
    45dc:	8b 8b       	std	Y+19, r24	; 0x13
    45de:	8b 89       	ldd	r24, Y+19	; 0x13
    45e0:	9c 89       	ldd	r25, Y+20	; 0x14
    45e2:	98 8b       	std	Y+16, r25	; 0x10
    45e4:	8f 87       	std	Y+15, r24	; 0x0f
    45e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    45e8:	98 89       	ldd	r25, Y+16	; 0x10
    45ea:	01 97       	sbiw	r24, 0x01	; 1
    45ec:	f1 f7       	brne	.-4      	; 0x45ea <IsPasswordFalse+0x10e>
    45ee:	98 8b       	std	Y+16, r25	; 0x10
    45f0:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
	if ( Wrong_inputs == 3 ){
    45f2:	80 91 19 02 	lds	r24, 0x0219
    45f6:	83 30       	cpi	r24, 0x03	; 3
    45f8:	09 f0       	breq	.+2      	; 0x45fc <IsPasswordFalse+0x120>
    45fa:	7e c0       	rjmp	.+252    	; 0x46f8 <IsPasswordFalse+0x21c>
		LCD_VidClear();
    45fc:	0e 94 3e 2f 	call	0x5e7c	; 0x5e7c <LCD_VidClear>
		LCD_VidPosCur(0,0);
    4600:	80 e0       	ldi	r24, 0x00	; 0
    4602:	60 e0       	ldi	r22, 0x00	; 0
    4604:	0e 94 1a 2f 	call	0x5e34	; 0x5e34 <LCD_VidPosCur>
		LCD_VidSendString("WAIT 3 SECONDS");
    4608:	85 ed       	ldi	r24, 0xD5	; 213
    460a:	90 e0       	ldi	r25, 0x00	; 0
    460c:	0e 94 4d 2b 	call	0x569a	; 0x569a <LCD_VidSendString>
    4610:	80 e0       	ldi	r24, 0x00	; 0
    4612:	90 e8       	ldi	r25, 0x80	; 128
    4614:	ab e3       	ldi	r26, 0x3B	; 59
    4616:	b5 e4       	ldi	r27, 0x45	; 69
    4618:	8b 87       	std	Y+11, r24	; 0x0b
    461a:	9c 87       	std	Y+12, r25	; 0x0c
    461c:	ad 87       	std	Y+13, r26	; 0x0d
    461e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4620:	6b 85       	ldd	r22, Y+11	; 0x0b
    4622:	7c 85       	ldd	r23, Y+12	; 0x0c
    4624:	8d 85       	ldd	r24, Y+13	; 0x0d
    4626:	9e 85       	ldd	r25, Y+14	; 0x0e
    4628:	20 e0       	ldi	r18, 0x00	; 0
    462a:	30 e0       	ldi	r19, 0x00	; 0
    462c:	4a ef       	ldi	r20, 0xFA	; 250
    462e:	54 e4       	ldi	r21, 0x44	; 68
    4630:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    4634:	dc 01       	movw	r26, r24
    4636:	cb 01       	movw	r24, r22
    4638:	8f 83       	std	Y+7, r24	; 0x07
    463a:	98 87       	std	Y+8, r25	; 0x08
    463c:	a9 87       	std	Y+9, r26	; 0x09
    463e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4640:	6f 81       	ldd	r22, Y+7	; 0x07
    4642:	78 85       	ldd	r23, Y+8	; 0x08
    4644:	89 85       	ldd	r24, Y+9	; 0x09
    4646:	9a 85       	ldd	r25, Y+10	; 0x0a
    4648:	20 e0       	ldi	r18, 0x00	; 0
    464a:	30 e0       	ldi	r19, 0x00	; 0
    464c:	40 e8       	ldi	r20, 0x80	; 128
    464e:	5f e3       	ldi	r21, 0x3F	; 63
    4650:	0e 94 60 13 	call	0x26c0	; 0x26c0 <__ltsf2>
    4654:	88 23       	and	r24, r24
    4656:	2c f4       	brge	.+10     	; 0x4662 <IsPasswordFalse+0x186>
		__ticks = 1;
    4658:	81 e0       	ldi	r24, 0x01	; 1
    465a:	90 e0       	ldi	r25, 0x00	; 0
    465c:	9e 83       	std	Y+6, r25	; 0x06
    465e:	8d 83       	std	Y+5, r24	; 0x05
    4660:	3f c0       	rjmp	.+126    	; 0x46e0 <IsPasswordFalse+0x204>
	else if (__tmp > 65535)
    4662:	6f 81       	ldd	r22, Y+7	; 0x07
    4664:	78 85       	ldd	r23, Y+8	; 0x08
    4666:	89 85       	ldd	r24, Y+9	; 0x09
    4668:	9a 85       	ldd	r25, Y+10	; 0x0a
    466a:	20 e0       	ldi	r18, 0x00	; 0
    466c:	3f ef       	ldi	r19, 0xFF	; 255
    466e:	4f e7       	ldi	r20, 0x7F	; 127
    4670:	57 e4       	ldi	r21, 0x47	; 71
    4672:	0e 94 00 13 	call	0x2600	; 0x2600 <__gtsf2>
    4676:	18 16       	cp	r1, r24
    4678:	4c f5       	brge	.+82     	; 0x46cc <IsPasswordFalse+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    467a:	6b 85       	ldd	r22, Y+11	; 0x0b
    467c:	7c 85       	ldd	r23, Y+12	; 0x0c
    467e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4680:	9e 85       	ldd	r25, Y+14	; 0x0e
    4682:	20 e0       	ldi	r18, 0x00	; 0
    4684:	30 e0       	ldi	r19, 0x00	; 0
    4686:	40 e2       	ldi	r20, 0x20	; 32
    4688:	51 e4       	ldi	r21, 0x41	; 65
    468a:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    468e:	dc 01       	movw	r26, r24
    4690:	cb 01       	movw	r24, r22
    4692:	bc 01       	movw	r22, r24
    4694:	cd 01       	movw	r24, r26
    4696:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    469a:	dc 01       	movw	r26, r24
    469c:	cb 01       	movw	r24, r22
    469e:	9e 83       	std	Y+6, r25	; 0x06
    46a0:	8d 83       	std	Y+5, r24	; 0x05
    46a2:	0f c0       	rjmp	.+30     	; 0x46c2 <IsPasswordFalse+0x1e6>
    46a4:	88 ec       	ldi	r24, 0xC8	; 200
    46a6:	90 e0       	ldi	r25, 0x00	; 0
    46a8:	9c 83       	std	Y+4, r25	; 0x04
    46aa:	8b 83       	std	Y+3, r24	; 0x03
    46ac:	8b 81       	ldd	r24, Y+3	; 0x03
    46ae:	9c 81       	ldd	r25, Y+4	; 0x04
    46b0:	01 97       	sbiw	r24, 0x01	; 1
    46b2:	f1 f7       	brne	.-4      	; 0x46b0 <IsPasswordFalse+0x1d4>
    46b4:	9c 83       	std	Y+4, r25	; 0x04
    46b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46b8:	8d 81       	ldd	r24, Y+5	; 0x05
    46ba:	9e 81       	ldd	r25, Y+6	; 0x06
    46bc:	01 97       	sbiw	r24, 0x01	; 1
    46be:	9e 83       	std	Y+6, r25	; 0x06
    46c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46c2:	8d 81       	ldd	r24, Y+5	; 0x05
    46c4:	9e 81       	ldd	r25, Y+6	; 0x06
    46c6:	00 97       	sbiw	r24, 0x00	; 0
    46c8:	69 f7       	brne	.-38     	; 0x46a4 <IsPasswordFalse+0x1c8>
    46ca:	14 c0       	rjmp	.+40     	; 0x46f4 <IsPasswordFalse+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46cc:	6f 81       	ldd	r22, Y+7	; 0x07
    46ce:	78 85       	ldd	r23, Y+8	; 0x08
    46d0:	89 85       	ldd	r24, Y+9	; 0x09
    46d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    46d4:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    46d8:	dc 01       	movw	r26, r24
    46da:	cb 01       	movw	r24, r22
    46dc:	9e 83       	std	Y+6, r25	; 0x06
    46de:	8d 83       	std	Y+5, r24	; 0x05
    46e0:	8d 81       	ldd	r24, Y+5	; 0x05
    46e2:	9e 81       	ldd	r25, Y+6	; 0x06
    46e4:	9a 83       	std	Y+2, r25	; 0x02
    46e6:	89 83       	std	Y+1, r24	; 0x01
    46e8:	89 81       	ldd	r24, Y+1	; 0x01
    46ea:	9a 81       	ldd	r25, Y+2	; 0x02
    46ec:	01 97       	sbiw	r24, 0x01	; 1
    46ee:	f1 f7       	brne	.-4      	; 0x46ec <IsPasswordFalse+0x210>
    46f0:	9a 83       	std	Y+2, r25	; 0x02
    46f2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(3000);
		Wrong_inputs=0;
    46f4:	10 92 19 02 	sts	0x0219, r1
	}//end if
	LCD_VidClear();
    46f8:	0e 94 3e 2f 	call	0x5e7c	; 0x5e7c <LCD_VidClear>
	LCD_VidPosCur(0,0);
    46fc:	80 e0       	ldi	r24, 0x00	; 0
    46fe:	60 e0       	ldi	r22, 0x00	; 0
    4700:	0e 94 1a 2f 	call	0x5e34	; 0x5e34 <LCD_VidPosCur>
	LCD_VidSendString("Enter your ID    ");
    4704:	84 ee       	ldi	r24, 0xE4	; 228
    4706:	90 e0       	ldi	r25, 0x00	; 0
    4708:	0e 94 4d 2b 	call	0x569a	; 0x569a <LCD_VidSendString>
	ID_index = 0 ;
    470c:	10 92 16 02 	sts	0x0216, r1
	ID_flag = LOW_FLAG ;
    4710:	10 92 17 02 	sts	0x0217, r1
	//end if check on password if it's not correct to do needed orders
//to begin in core programme if pass is true
}
    4714:	6c 96       	adiw	r28, 0x1c	; 28
    4716:	0f b6       	in	r0, 0x3f	; 63
    4718:	f8 94       	cli
    471a:	de bf       	out	0x3e, r29	; 62
    471c:	0f be       	out	0x3f, r0	; 63
    471e:	cd bf       	out	0x3d, r28	; 61
    4720:	cf 91       	pop	r28
    4722:	df 91       	pop	r29
    4724:	08 95       	ret

00004726 <NumOfHumansInRoom>:
 Name        : NumOfHumansInRoom
 Input       : void
 Output      : u8
 Description : to count number of humans in room
*/
u8 NumOfHumansInRoom(void){
    4726:	df 93       	push	r29
    4728:	cf 93       	push	r28
    472a:	cd b7       	in	r28, 0x3d	; 61
    472c:	de b7       	in	r29, 0x3e	; 62
    return	 (counter_enter-counter_exsit) ;
    472e:	90 91 1c 02 	lds	r25, 0x021C
    4732:	80 91 1b 02 	lds	r24, 0x021B
    4736:	29 2f       	mov	r18, r25
    4738:	28 1b       	sub	r18, r24
    473a:	82 2f       	mov	r24, r18
}
    473c:	cf 91       	pop	r28
    473e:	df 91       	pop	r29
    4740:	08 95       	ret

00004742 <EnterID>:
 Input       : void
 Output      : u8
 Description : to read ID by UART
*/

u8 EnterID(void){
    4742:	0f 93       	push	r16
    4744:	1f 93       	push	r17
    4746:	df 93       	push	r29
    4748:	cf 93       	push	r28
    474a:	00 d0       	rcall	.+0      	; 0x474c <EnterID+0xa>
    474c:	cd b7       	in	r28, 0x3d	; 61
    474e:	de b7       	in	r29, 0x3e	; 62

for (u8 i=0;i<5;i++)
    4750:	19 82       	std	Y+1, r1	; 0x01
    4752:	33 c0       	rjmp	.+102    	; 0x47ba <EnterID+0x78>
{
	IDCode[i]=keypad_U8GetPressed();
    4754:	89 81       	ldd	r24, Y+1	; 0x01
    4756:	08 2f       	mov	r16, r24
    4758:	10 e0       	ldi	r17, 0x00	; 0
    475a:	0e 94 27 24 	call	0x484e	; 0x484e <keypad_U8GetPressed>
    475e:	f8 01       	movw	r30, r16
    4760:	e3 5e       	subi	r30, 0xE3	; 227
    4762:	fd 4f       	sbci	r31, 0xFD	; 253
    4764:	80 83       	st	Z, r24
    4766:	14 c0       	rjmp	.+40     	; 0x4790 <EnterID+0x4e>
	while(IDCode[i]==50){
	IDCode[i]=keypad_U8GetPressed();
    4768:	89 81       	ldd	r24, Y+1	; 0x01
    476a:	08 2f       	mov	r16, r24
    476c:	10 e0       	ldi	r17, 0x00	; 0
    476e:	0e 94 27 24 	call	0x484e	; 0x484e <keypad_U8GetPressed>
    4772:	f8 01       	movw	r30, r16
    4774:	e3 5e       	subi	r30, 0xE3	; 227
    4776:	fd 4f       	sbci	r31, 0xFD	; 253
    4778:	80 83       	st	Z, r24

	count++;
    477a:	80 91 18 02 	lds	r24, 0x0218
    477e:	8f 5f       	subi	r24, 0xFF	; 255
    4780:	80 93 18 02 	sts	0x0218, r24
	if(count==0)RoomTemp();  /* Sync on temperature  */
    4784:	80 91 18 02 	lds	r24, 0x0218
    4788:	88 23       	and	r24, r24
    478a:	11 f4       	brne	.+4      	; 0x4790 <EnterID+0x4e>
    478c:	0e 94 e7 23 	call	0x47ce	; 0x47ce <RoomTemp>
u8 EnterID(void){

for (u8 i=0;i<5;i++)
{
	IDCode[i]=keypad_U8GetPressed();
	while(IDCode[i]==50){
    4790:	89 81       	ldd	r24, Y+1	; 0x01
    4792:	88 2f       	mov	r24, r24
    4794:	90 e0       	ldi	r25, 0x00	; 0
    4796:	fc 01       	movw	r30, r24
    4798:	e3 5e       	subi	r30, 0xE3	; 227
    479a:	fd 4f       	sbci	r31, 0xFD	; 253
    479c:	80 81       	ld	r24, Z
    479e:	82 33       	cpi	r24, 0x32	; 50
    47a0:	19 f3       	breq	.-58     	; 0x4768 <EnterID+0x26>
	}
	//IDCode[i]=UART_U8GetChar();
	//UART_U8SendChar(IDCode[i]);
	//ID_input_num = 10 * ID_input_num + IDCode[i];
	
	EnteringUrID(IDCode[i]);
    47a2:	89 81       	ldd	r24, Y+1	; 0x01
    47a4:	88 2f       	mov	r24, r24
    47a6:	90 e0       	ldi	r25, 0x00	; 0
    47a8:	fc 01       	movw	r30, r24
    47aa:	e3 5e       	subi	r30, 0xE3	; 227
    47ac:	fd 4f       	sbci	r31, 0xFD	; 253
    47ae:	80 81       	ld	r24, Z
    47b0:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <EnteringUrID>
 Description : to read ID by UART
*/

u8 EnterID(void){

for (u8 i=0;i<5;i++)
    47b4:	89 81       	ldd	r24, Y+1	; 0x01
    47b6:	8f 5f       	subi	r24, 0xFF	; 255
    47b8:	89 83       	std	Y+1, r24	; 0x01
    47ba:	89 81       	ldd	r24, Y+1	; 0x01
    47bc:	85 30       	cpi	r24, 0x05	; 5
    47be:	50 f2       	brcs	.-108    	; 0x4754 <EnterID+0x12>
	//UART_U8SendChar(IDCode[i]);
	//ID_input_num = 10 * ID_input_num + IDCode[i];
	
	EnteringUrID(IDCode[i]);
}
}
    47c0:	0f 90       	pop	r0
    47c2:	0f 90       	pop	r0
    47c4:	cf 91       	pop	r28
    47c6:	df 91       	pop	r29
    47c8:	1f 91       	pop	r17
    47ca:	0f 91       	pop	r16
    47cc:	08 95       	ret

000047ce <RoomTemp>:
 Input       : void
 Output      : void
 Description : to read Temp in Room
*/

void RoomTemp(void){
    47ce:	df 93       	push	r29
    47d0:	cf 93       	push	r28
    47d2:	cd b7       	in	r28, 0x3d	; 61
    47d4:	de b7       	in	r29, 0x3e	; 62
	
	if (Home_work || ExistHuman ){
    47d6:	80 91 67 02 	lds	r24, 0x0267
    47da:	88 23       	and	r24, r24
    47dc:	21 f4       	brne	.+8      	; 0x47e6 <RoomTemp+0x18>
    47de:	80 91 68 02 	lds	r24, 0x0268
    47e2:	88 23       	and	r24, r24
    47e4:	a9 f0       	breq	.+42     	; 0x4810 <RoomTemp+0x42>
		temp = LM35_U16_ReadTemp() ;
    47e6:	0e 94 3e 1f 	call	0x3e7c	; 0x3e7c <LM35_U16_ReadTemp>
    47ea:	80 93 66 02 	sts	0x0266, r24
		/* To determine speed of fun and Buzzer situation */
		StateOfFunAndBuzzer(temp);
    47ee:	80 91 66 02 	lds	r24, 0x0266
    47f2:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <StateOfFunAndBuzzer>
		StateBeforeCheck(temp);
    47f6:	80 91 66 02 	lds	r24, 0x0266
    47fa:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <StateBeforeCheck>

		/* to display temperture on LCD */
		DisplayTempOnLCD(temp);
    47fe:	80 91 66 02 	lds	r24, 0x0266
    4802:	0e 94 41 21 	call	0x4282	; 0x4282 <DisplayTempOnLCD>

		/* lighten led */
		DIO_VidSetPinValue(PORT_LED,LED_PIN,HIGH);
    4806:	83 e0       	ldi	r24, 0x03	; 3
    4808:	63 e0       	ldi	r22, 0x03	; 3
    480a:	41 e0       	ldi	r20, 0x01	; 1
    480c:	0e 94 a8 19 	call	0x3350	; 0x3350 <DIO_VidSetPinValue>
	}//end if home work
}
    4810:	cf 91       	pop	r28
    4812:	df 91       	pop	r29
    4814:	08 95       	ret

00004816 <GIE_VidEnable>:
#include"BIT_MATH.h"
#include "DIO_interface.h"
#include "INTERRUPT_Interface.h"
#include "INTERRUPT_private.h"

void GIE_VidEnable (void){
    4816:	df 93       	push	r29
    4818:	cf 93       	push	r28
    481a:	cd b7       	in	r28, 0x3d	; 61
    481c:	de b7       	in	r29, 0x3e	; 62
	//to enable general interrupt
	SET_BIT(SREG,I_BIT);
    481e:	af e5       	ldi	r26, 0x5F	; 95
    4820:	b0 e0       	ldi	r27, 0x00	; 0
    4822:	ef e5       	ldi	r30, 0x5F	; 95
    4824:	f0 e0       	ldi	r31, 0x00	; 0
    4826:	80 81       	ld	r24, Z
    4828:	80 68       	ori	r24, 0x80	; 128
    482a:	8c 93       	st	X, r24
}
    482c:	cf 91       	pop	r28
    482e:	df 91       	pop	r29
    4830:	08 95       	ret

00004832 <GIE_VidDisable>:

void GIE_VidDisable (void){
    4832:	df 93       	push	r29
    4834:	cf 93       	push	r28
    4836:	cd b7       	in	r28, 0x3d	; 61
    4838:	de b7       	in	r29, 0x3e	; 62
	//to disable general interrupt
	CLR_BIT(SREG,I_BIT);
    483a:	af e5       	ldi	r26, 0x5F	; 95
    483c:	b0 e0       	ldi	r27, 0x00	; 0
    483e:	ef e5       	ldi	r30, 0x5F	; 95
    4840:	f0 e0       	ldi	r31, 0x00	; 0
    4842:	80 81       	ld	r24, Z
    4844:	8f 77       	andi	r24, 0x7F	; 127
    4846:	8c 93       	st	X, r24
}
    4848:	cf 91       	pop	r28
    484a:	df 91       	pop	r29
    484c:	08 95       	ret

0000484e <keypad_U8GetPressed>:
#define KPD_PORT_0_4 0
#define KPD_PORT_5_8 1


u8 keypad_U8GetPressed()
{
    484e:	df 93       	push	r29
    4850:	cf 93       	push	r28
    4852:	cd b7       	in	r28, 0x3d	; 61
    4854:	de b7       	in	r29, 0x3e	; 62
    4856:	62 97       	sbiw	r28, 0x12	; 18
    4858:	0f b6       	in	r0, 0x3f	; 63
    485a:	f8 94       	cli
    485c:	de bf       	out	0x3e, r29	; 62
    485e:	0f be       	out	0x3f, r0	; 63
    4860:	cd bf       	out	0x3d, r28	; 61
	u8 key = 50;
    4862:	82 e3       	ldi	r24, 0x32	; 50
    4864:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Pressed;
	for(u8 c=4; c<8; c++)
    4866:	84 e0       	ldi	r24, 0x04	; 4
    4868:	88 8b       	std	Y+16, r24	; 0x10
    486a:	a8 c0       	rjmp	.+336    	; 0x49bc <keypad_U8GetPressed+0x16e>
	{
		DIO_VidSetPinValue(KPD_PORT_5_8,c,LOW);
    486c:	81 e0       	ldi	r24, 0x01	; 1
    486e:	68 89       	ldd	r22, Y+16	; 0x10
    4870:	40 e0       	ldi	r20, 0x00	; 0
    4872:	0e 94 a8 19 	call	0x3350	; 0x3350 <DIO_VidSetPinValue>
		for(u8 Row =2; Row<6; Row++)
    4876:	82 e0       	ldi	r24, 0x02	; 2
    4878:	8f 87       	std	Y+15, r24	; 0x0f
    487a:	94 c0       	rjmp	.+296    	; 0x49a4 <keypad_U8GetPressed+0x156>
		{
			Pressed = DIO_U8GetPinValue(KPD_PORT_0_4,Row);
    487c:	80 e0       	ldi	r24, 0x00	; 0
    487e:	6f 85       	ldd	r22, Y+15	; 0x0f
    4880:	0e 94 66 1b 	call	0x36cc	; 0x36cc <DIO_U8GetPinValue>
    4884:	89 8b       	std	Y+17, r24	; 0x11
			if(LOW == Pressed)
    4886:	89 89       	ldd	r24, Y+17	; 0x11
    4888:	88 23       	and	r24, r24
    488a:	09 f0       	breq	.+2      	; 0x488e <keypad_U8GetPressed+0x40>
    488c:	88 c0       	rjmp	.+272    	; 0x499e <keypad_U8GetPressed+0x150>
			{
				key = ((Row-2) * 4) + (c-3);
    488e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4890:	88 2f       	mov	r24, r24
    4892:	90 e0       	ldi	r25, 0x00	; 0
    4894:	02 97       	sbiw	r24, 0x02	; 2
    4896:	88 0f       	add	r24, r24
    4898:	99 1f       	adc	r25, r25
    489a:	88 0f       	add	r24, r24
    489c:	99 1f       	adc	r25, r25
    489e:	98 2f       	mov	r25, r24
    48a0:	88 89       	ldd	r24, Y+16	; 0x10
    48a2:	89 0f       	add	r24, r25
    48a4:	83 50       	subi	r24, 0x03	; 3
    48a6:	8a 8b       	std	Y+18, r24	; 0x12
    48a8:	05 c0       	rjmp	.+10     	; 0x48b4 <keypad_U8GetPressed+0x66>
				while(LOW == Pressed)
				{
					Pressed =  DIO_U8GetPinValue(KPD_PORT_0_4,Row);
    48aa:	80 e0       	ldi	r24, 0x00	; 0
    48ac:	6f 85       	ldd	r22, Y+15	; 0x0f
    48ae:	0e 94 66 1b 	call	0x36cc	; 0x36cc <DIO_U8GetPinValue>
    48b2:	89 8b       	std	Y+17, r24	; 0x11
		{
			Pressed = DIO_U8GetPinValue(KPD_PORT_0_4,Row);
			if(LOW == Pressed)
			{
				key = ((Row-2) * 4) + (c-3);
				while(LOW == Pressed)
    48b4:	89 89       	ldd	r24, Y+17	; 0x11
    48b6:	88 23       	and	r24, r24
    48b8:	c1 f3       	breq	.-16     	; 0x48aa <keypad_U8GetPressed+0x5c>
    48ba:	80 e0       	ldi	r24, 0x00	; 0
    48bc:	90 e0       	ldi	r25, 0x00	; 0
    48be:	a0 ea       	ldi	r26, 0xA0	; 160
    48c0:	b0 e4       	ldi	r27, 0x40	; 64
    48c2:	8b 87       	std	Y+11, r24	; 0x0b
    48c4:	9c 87       	std	Y+12, r25	; 0x0c
    48c6:	ad 87       	std	Y+13, r26	; 0x0d
    48c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    48cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    48ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    48d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    48d2:	20 e0       	ldi	r18, 0x00	; 0
    48d4:	30 e0       	ldi	r19, 0x00	; 0
    48d6:	4a ef       	ldi	r20, 0xFA	; 250
    48d8:	54 e4       	ldi	r21, 0x44	; 68
    48da:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    48de:	dc 01       	movw	r26, r24
    48e0:	cb 01       	movw	r24, r22
    48e2:	8f 83       	std	Y+7, r24	; 0x07
    48e4:	98 87       	std	Y+8, r25	; 0x08
    48e6:	a9 87       	std	Y+9, r26	; 0x09
    48e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    48ea:	6f 81       	ldd	r22, Y+7	; 0x07
    48ec:	78 85       	ldd	r23, Y+8	; 0x08
    48ee:	89 85       	ldd	r24, Y+9	; 0x09
    48f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    48f2:	20 e0       	ldi	r18, 0x00	; 0
    48f4:	30 e0       	ldi	r19, 0x00	; 0
    48f6:	40 e8       	ldi	r20, 0x80	; 128
    48f8:	5f e3       	ldi	r21, 0x3F	; 63
    48fa:	0e 94 60 13 	call	0x26c0	; 0x26c0 <__ltsf2>
    48fe:	88 23       	and	r24, r24
    4900:	2c f4       	brge	.+10     	; 0x490c <keypad_U8GetPressed+0xbe>
		__ticks = 1;
    4902:	81 e0       	ldi	r24, 0x01	; 1
    4904:	90 e0       	ldi	r25, 0x00	; 0
    4906:	9e 83       	std	Y+6, r25	; 0x06
    4908:	8d 83       	std	Y+5, r24	; 0x05
    490a:	3f c0       	rjmp	.+126    	; 0x498a <keypad_U8GetPressed+0x13c>
	else if (__tmp > 65535)
    490c:	6f 81       	ldd	r22, Y+7	; 0x07
    490e:	78 85       	ldd	r23, Y+8	; 0x08
    4910:	89 85       	ldd	r24, Y+9	; 0x09
    4912:	9a 85       	ldd	r25, Y+10	; 0x0a
    4914:	20 e0       	ldi	r18, 0x00	; 0
    4916:	3f ef       	ldi	r19, 0xFF	; 255
    4918:	4f e7       	ldi	r20, 0x7F	; 127
    491a:	57 e4       	ldi	r21, 0x47	; 71
    491c:	0e 94 00 13 	call	0x2600	; 0x2600 <__gtsf2>
    4920:	18 16       	cp	r1, r24
    4922:	4c f5       	brge	.+82     	; 0x4976 <keypad_U8GetPressed+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4924:	6b 85       	ldd	r22, Y+11	; 0x0b
    4926:	7c 85       	ldd	r23, Y+12	; 0x0c
    4928:	8d 85       	ldd	r24, Y+13	; 0x0d
    492a:	9e 85       	ldd	r25, Y+14	; 0x0e
    492c:	20 e0       	ldi	r18, 0x00	; 0
    492e:	30 e0       	ldi	r19, 0x00	; 0
    4930:	40 e2       	ldi	r20, 0x20	; 32
    4932:	51 e4       	ldi	r21, 0x41	; 65
    4934:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    4938:	dc 01       	movw	r26, r24
    493a:	cb 01       	movw	r24, r22
    493c:	bc 01       	movw	r22, r24
    493e:	cd 01       	movw	r24, r26
    4940:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    4944:	dc 01       	movw	r26, r24
    4946:	cb 01       	movw	r24, r22
    4948:	9e 83       	std	Y+6, r25	; 0x06
    494a:	8d 83       	std	Y+5, r24	; 0x05
    494c:	0f c0       	rjmp	.+30     	; 0x496c <keypad_U8GetPressed+0x11e>
    494e:	88 ec       	ldi	r24, 0xC8	; 200
    4950:	90 e0       	ldi	r25, 0x00	; 0
    4952:	9c 83       	std	Y+4, r25	; 0x04
    4954:	8b 83       	std	Y+3, r24	; 0x03
    4956:	8b 81       	ldd	r24, Y+3	; 0x03
    4958:	9c 81       	ldd	r25, Y+4	; 0x04
    495a:	01 97       	sbiw	r24, 0x01	; 1
    495c:	f1 f7       	brne	.-4      	; 0x495a <keypad_U8GetPressed+0x10c>
    495e:	9c 83       	std	Y+4, r25	; 0x04
    4960:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4962:	8d 81       	ldd	r24, Y+5	; 0x05
    4964:	9e 81       	ldd	r25, Y+6	; 0x06
    4966:	01 97       	sbiw	r24, 0x01	; 1
    4968:	9e 83       	std	Y+6, r25	; 0x06
    496a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    496c:	8d 81       	ldd	r24, Y+5	; 0x05
    496e:	9e 81       	ldd	r25, Y+6	; 0x06
    4970:	00 97       	sbiw	r24, 0x00	; 0
    4972:	69 f7       	brne	.-38     	; 0x494e <keypad_U8GetPressed+0x100>
    4974:	14 c0       	rjmp	.+40     	; 0x499e <keypad_U8GetPressed+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4976:	6f 81       	ldd	r22, Y+7	; 0x07
    4978:	78 85       	ldd	r23, Y+8	; 0x08
    497a:	89 85       	ldd	r24, Y+9	; 0x09
    497c:	9a 85       	ldd	r25, Y+10	; 0x0a
    497e:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    4982:	dc 01       	movw	r26, r24
    4984:	cb 01       	movw	r24, r22
    4986:	9e 83       	std	Y+6, r25	; 0x06
    4988:	8d 83       	std	Y+5, r24	; 0x05
    498a:	8d 81       	ldd	r24, Y+5	; 0x05
    498c:	9e 81       	ldd	r25, Y+6	; 0x06
    498e:	9a 83       	std	Y+2, r25	; 0x02
    4990:	89 83       	std	Y+1, r24	; 0x01
    4992:	89 81       	ldd	r24, Y+1	; 0x01
    4994:	9a 81       	ldd	r25, Y+2	; 0x02
    4996:	01 97       	sbiw	r24, 0x01	; 1
    4998:	f1 f7       	brne	.-4      	; 0x4996 <keypad_U8GetPressed+0x148>
    499a:	9a 83       	std	Y+2, r25	; 0x02
    499c:	89 83       	std	Y+1, r24	; 0x01
	u8 key = 50;
	u8 Pressed;
	for(u8 c=4; c<8; c++)
	{
		DIO_VidSetPinValue(KPD_PORT_5_8,c,LOW);
		for(u8 Row =2; Row<6; Row++)
    499e:	8f 85       	ldd	r24, Y+15	; 0x0f
    49a0:	8f 5f       	subi	r24, 0xFF	; 255
    49a2:	8f 87       	std	Y+15, r24	; 0x0f
    49a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    49a6:	86 30       	cpi	r24, 0x06	; 6
    49a8:	08 f4       	brcc	.+2      	; 0x49ac <keypad_U8GetPressed+0x15e>
    49aa:	68 cf       	rjmp	.-304    	; 0x487c <keypad_U8GetPressed+0x2e>
					Pressed =  DIO_U8GetPinValue(KPD_PORT_0_4,Row);
				}
				_delay_ms(5);
			}
		}
		DIO_VidSetPinValue(KPD_PORT_5_8,c,HIGH);
    49ac:	81 e0       	ldi	r24, 0x01	; 1
    49ae:	68 89       	ldd	r22, Y+16	; 0x10
    49b0:	41 e0       	ldi	r20, 0x01	; 1
    49b2:	0e 94 a8 19 	call	0x3350	; 0x3350 <DIO_VidSetPinValue>

u8 keypad_U8GetPressed()
{
	u8 key = 50;
	u8 Pressed;
	for(u8 c=4; c<8; c++)
    49b6:	88 89       	ldd	r24, Y+16	; 0x10
    49b8:	8f 5f       	subi	r24, 0xFF	; 255
    49ba:	88 8b       	std	Y+16, r24	; 0x10
    49bc:	88 89       	ldd	r24, Y+16	; 0x10
    49be:	88 30       	cpi	r24, 0x08	; 8
    49c0:	08 f4       	brcc	.+2      	; 0x49c4 <keypad_U8GetPressed+0x176>
    49c2:	54 cf       	rjmp	.-344    	; 0x486c <keypad_U8GetPressed+0x1e>
				_delay_ms(5);
			}
		}
		DIO_VidSetPinValue(KPD_PORT_5_8,c,HIGH);
	}
	return key;
    49c4:	8a 89       	ldd	r24, Y+18	; 0x12
}
    49c6:	62 96       	adiw	r28, 0x12	; 18
    49c8:	0f b6       	in	r0, 0x3f	; 63
    49ca:	f8 94       	cli
    49cc:	de bf       	out	0x3e, r29	; 62
    49ce:	0f be       	out	0x3f, r0	; 63
    49d0:	cd bf       	out	0x3d, r28	; 61
    49d2:	cf 91       	pop	r28
    49d4:	df 91       	pop	r29
    49d6:	08 95       	ret

000049d8 <keypad_init>:

void keypad_init()
{
    49d8:	df 93       	push	r29
    49da:	cf 93       	push	r28
    49dc:	cd b7       	in	r28, 0x3d	; 61
    49de:	de b7       	in	r29, 0x3e	; 62
		DIO_VidSetPinDirection(KPD_PORT_0_4,2,INPUT);
    49e0:	80 e0       	ldi	r24, 0x00	; 0
    49e2:	62 e0       	ldi	r22, 0x02	; 2
    49e4:	40 e0       	ldi	r20, 0x00	; 0
    49e6:	0e 94 67 18 	call	0x30ce	; 0x30ce <DIO_VidSetPinDirection>
		DIO_VidSetPinDirection(KPD_PORT_0_4,3,INPUT);
    49ea:	80 e0       	ldi	r24, 0x00	; 0
    49ec:	63 e0       	ldi	r22, 0x03	; 3
    49ee:	40 e0       	ldi	r20, 0x00	; 0
    49f0:	0e 94 67 18 	call	0x30ce	; 0x30ce <DIO_VidSetPinDirection>
		DIO_VidSetPinDirection(KPD_PORT_0_4,4,INPUT);
    49f4:	80 e0       	ldi	r24, 0x00	; 0
    49f6:	64 e0       	ldi	r22, 0x04	; 4
    49f8:	40 e0       	ldi	r20, 0x00	; 0
    49fa:	0e 94 67 18 	call	0x30ce	; 0x30ce <DIO_VidSetPinDirection>
		DIO_VidSetPinDirection(KPD_PORT_0_4,5,INPUT);
    49fe:	80 e0       	ldi	r24, 0x00	; 0
    4a00:	65 e0       	ldi	r22, 0x05	; 5
    4a02:	40 e0       	ldi	r20, 0x00	; 0
    4a04:	0e 94 67 18 	call	0x30ce	; 0x30ce <DIO_VidSetPinDirection>

		DIO_VidSetPinDirection(KPD_PORT_5_8,4,OUTPUT);
    4a08:	81 e0       	ldi	r24, 0x01	; 1
    4a0a:	64 e0       	ldi	r22, 0x04	; 4
    4a0c:	41 e0       	ldi	r20, 0x01	; 1
    4a0e:	0e 94 67 18 	call	0x30ce	; 0x30ce <DIO_VidSetPinDirection>
		DIO_VidSetPinDirection(KPD_PORT_5_8,5,OUTPUT);
    4a12:	81 e0       	ldi	r24, 0x01	; 1
    4a14:	65 e0       	ldi	r22, 0x05	; 5
    4a16:	41 e0       	ldi	r20, 0x01	; 1
    4a18:	0e 94 67 18 	call	0x30ce	; 0x30ce <DIO_VidSetPinDirection>
		DIO_VidSetPinDirection(KPD_PORT_5_8,6,OUTPUT);
    4a1c:	81 e0       	ldi	r24, 0x01	; 1
    4a1e:	66 e0       	ldi	r22, 0x06	; 6
    4a20:	41 e0       	ldi	r20, 0x01	; 1
    4a22:	0e 94 67 18 	call	0x30ce	; 0x30ce <DIO_VidSetPinDirection>
		DIO_VidSetPinDirection(KPD_PORT_5_8,7,OUTPUT);
    4a26:	81 e0       	ldi	r24, 0x01	; 1
    4a28:	67 e0       	ldi	r22, 0x07	; 7
    4a2a:	41 e0       	ldi	r20, 0x01	; 1
    4a2c:	0e 94 67 18 	call	0x30ce	; 0x30ce <DIO_VidSetPinDirection>

		DIO_VidSetPinValue(KPD_PORT_0_4,2,HIGH);
    4a30:	80 e0       	ldi	r24, 0x00	; 0
    4a32:	62 e0       	ldi	r22, 0x02	; 2
    4a34:	41 e0       	ldi	r20, 0x01	; 1
    4a36:	0e 94 a8 19 	call	0x3350	; 0x3350 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(KPD_PORT_0_4,3,HIGH);
    4a3a:	80 e0       	ldi	r24, 0x00	; 0
    4a3c:	63 e0       	ldi	r22, 0x03	; 3
    4a3e:	41 e0       	ldi	r20, 0x01	; 1
    4a40:	0e 94 a8 19 	call	0x3350	; 0x3350 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(KPD_PORT_0_4,4,HIGH);
    4a44:	80 e0       	ldi	r24, 0x00	; 0
    4a46:	64 e0       	ldi	r22, 0x04	; 4
    4a48:	41 e0       	ldi	r20, 0x01	; 1
    4a4a:	0e 94 a8 19 	call	0x3350	; 0x3350 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(KPD_PORT_0_4,5,HIGH);
    4a4e:	80 e0       	ldi	r24, 0x00	; 0
    4a50:	65 e0       	ldi	r22, 0x05	; 5
    4a52:	41 e0       	ldi	r20, 0x01	; 1
    4a54:	0e 94 a8 19 	call	0x3350	; 0x3350 <DIO_VidSetPinValue>

		DIO_VidSetPinValue(KPD_PORT_5_8,4,HIGH);
    4a58:	81 e0       	ldi	r24, 0x01	; 1
    4a5a:	64 e0       	ldi	r22, 0x04	; 4
    4a5c:	41 e0       	ldi	r20, 0x01	; 1
    4a5e:	0e 94 a8 19 	call	0x3350	; 0x3350 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(KPD_PORT_5_8,5,HIGH);
    4a62:	81 e0       	ldi	r24, 0x01	; 1
    4a64:	65 e0       	ldi	r22, 0x05	; 5
    4a66:	41 e0       	ldi	r20, 0x01	; 1
    4a68:	0e 94 a8 19 	call	0x3350	; 0x3350 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(KPD_PORT_5_8,6,HIGH);
    4a6c:	81 e0       	ldi	r24, 0x01	; 1
    4a6e:	66 e0       	ldi	r22, 0x06	; 6
    4a70:	41 e0       	ldi	r20, 0x01	; 1
    4a72:	0e 94 a8 19 	call	0x3350	; 0x3350 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(KPD_PORT_5_8,7,HIGH);
    4a76:	81 e0       	ldi	r24, 0x01	; 1
    4a78:	67 e0       	ldi	r22, 0x07	; 7
    4a7a:	41 e0       	ldi	r20, 0x01	; 1
    4a7c:	0e 94 a8 19 	call	0x3350	; 0x3350 <DIO_VidSetPinValue>


}
    4a80:	cf 91       	pop	r28
    4a82:	df 91       	pop	r29
    4a84:	08 95       	ret

00004a86 <LCD_VidSendCommend>:
#include"LCD_cfg.h"
#include"LCD_private.h" 
#include<avr/delay.h>


void LCD_VidSendCommend(u8 Copy_U8Commend){
    4a86:	df 93       	push	r29
    4a88:	cf 93       	push	r28
    4a8a:	cd b7       	in	r28, 0x3d	; 61
    4a8c:	de b7       	in	r29, 0x3e	; 62
    4a8e:	6d 97       	sbiw	r28, 0x1d	; 29
    4a90:	0f b6       	in	r0, 0x3f	; 63
    4a92:	f8 94       	cli
    4a94:	de bf       	out	0x3e, r29	; 62
    4a96:	0f be       	out	0x3f, r0	; 63
    4a98:	cd bf       	out	0x3d, r28	; 61
    4a9a:	8d 8f       	std	Y+29, r24	; 0x1d

#ifdef EIGHT_BIT

/**************to disable RS *** *********************/
	DIO_VidSetPinValue(CONTROL_PORT,RS,LOW);
    4a9c:	80 e0       	ldi	r24, 0x00	; 0
    4a9e:	60 e0       	ldi	r22, 0x00	; 0
    4aa0:	40 e0       	ldi	r20, 0x00	; 0
    4aa2:	0e 94 a8 19 	call	0x3350	; 0x3350 <DIO_VidSetPinValue>
/******to out the value of commend on data port *****/
	DIO_VidSetPortValue(DATA_PORT,Copy_U8Commend);
    4aa6:	82 e0       	ldi	r24, 0x02	; 2
    4aa8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    4aaa:	0e 94 a8 1a 	call	0x3550	; 0x3550 <DIO_VidSetPortValue>
/*************to make pulse for enable **************/
	DIO_VidSetPinValue(CONTROL_PORT,E,HIGH);
    4aae:	80 e0       	ldi	r24, 0x00	; 0
    4ab0:	61 e0       	ldi	r22, 0x01	; 1
    4ab2:	41 e0       	ldi	r20, 0x01	; 1
    4ab4:	0e 94 a8 19 	call	0x3350	; 0x3350 <DIO_VidSetPinValue>
    4ab8:	80 e0       	ldi	r24, 0x00	; 0
    4aba:	90 e0       	ldi	r25, 0x00	; 0
    4abc:	a0 e8       	ldi	r26, 0x80	; 128
    4abe:	bf e3       	ldi	r27, 0x3F	; 63
    4ac0:	89 8f       	std	Y+25, r24	; 0x19
    4ac2:	9a 8f       	std	Y+26, r25	; 0x1a
    4ac4:	ab 8f       	std	Y+27, r26	; 0x1b
    4ac6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ac8:	69 8d       	ldd	r22, Y+25	; 0x19
    4aca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4acc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ace:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ad0:	20 e0       	ldi	r18, 0x00	; 0
    4ad2:	30 e0       	ldi	r19, 0x00	; 0
    4ad4:	4a ef       	ldi	r20, 0xFA	; 250
    4ad6:	54 e4       	ldi	r21, 0x44	; 68
    4ad8:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    4adc:	dc 01       	movw	r26, r24
    4ade:	cb 01       	movw	r24, r22
    4ae0:	8d 8b       	std	Y+21, r24	; 0x15
    4ae2:	9e 8b       	std	Y+22, r25	; 0x16
    4ae4:	af 8b       	std	Y+23, r26	; 0x17
    4ae6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4ae8:	6d 89       	ldd	r22, Y+21	; 0x15
    4aea:	7e 89       	ldd	r23, Y+22	; 0x16
    4aec:	8f 89       	ldd	r24, Y+23	; 0x17
    4aee:	98 8d       	ldd	r25, Y+24	; 0x18
    4af0:	20 e0       	ldi	r18, 0x00	; 0
    4af2:	30 e0       	ldi	r19, 0x00	; 0
    4af4:	40 e8       	ldi	r20, 0x80	; 128
    4af6:	5f e3       	ldi	r21, 0x3F	; 63
    4af8:	0e 94 60 13 	call	0x26c0	; 0x26c0 <__ltsf2>
    4afc:	88 23       	and	r24, r24
    4afe:	2c f4       	brge	.+10     	; 0x4b0a <LCD_VidSendCommend+0x84>
		__ticks = 1;
    4b00:	81 e0       	ldi	r24, 0x01	; 1
    4b02:	90 e0       	ldi	r25, 0x00	; 0
    4b04:	9c 8b       	std	Y+20, r25	; 0x14
    4b06:	8b 8b       	std	Y+19, r24	; 0x13
    4b08:	3f c0       	rjmp	.+126    	; 0x4b88 <LCD_VidSendCommend+0x102>
	else if (__tmp > 65535)
    4b0a:	6d 89       	ldd	r22, Y+21	; 0x15
    4b0c:	7e 89       	ldd	r23, Y+22	; 0x16
    4b0e:	8f 89       	ldd	r24, Y+23	; 0x17
    4b10:	98 8d       	ldd	r25, Y+24	; 0x18
    4b12:	20 e0       	ldi	r18, 0x00	; 0
    4b14:	3f ef       	ldi	r19, 0xFF	; 255
    4b16:	4f e7       	ldi	r20, 0x7F	; 127
    4b18:	57 e4       	ldi	r21, 0x47	; 71
    4b1a:	0e 94 00 13 	call	0x2600	; 0x2600 <__gtsf2>
    4b1e:	18 16       	cp	r1, r24
    4b20:	4c f5       	brge	.+82     	; 0x4b74 <LCD_VidSendCommend+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b22:	69 8d       	ldd	r22, Y+25	; 0x19
    4b24:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b26:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b28:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b2a:	20 e0       	ldi	r18, 0x00	; 0
    4b2c:	30 e0       	ldi	r19, 0x00	; 0
    4b2e:	40 e2       	ldi	r20, 0x20	; 32
    4b30:	51 e4       	ldi	r21, 0x41	; 65
    4b32:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    4b36:	dc 01       	movw	r26, r24
    4b38:	cb 01       	movw	r24, r22
    4b3a:	bc 01       	movw	r22, r24
    4b3c:	cd 01       	movw	r24, r26
    4b3e:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    4b42:	dc 01       	movw	r26, r24
    4b44:	cb 01       	movw	r24, r22
    4b46:	9c 8b       	std	Y+20, r25	; 0x14
    4b48:	8b 8b       	std	Y+19, r24	; 0x13
    4b4a:	0f c0       	rjmp	.+30     	; 0x4b6a <LCD_VidSendCommend+0xe4>
    4b4c:	88 ec       	ldi	r24, 0xC8	; 200
    4b4e:	90 e0       	ldi	r25, 0x00	; 0
    4b50:	9a 8b       	std	Y+18, r25	; 0x12
    4b52:	89 8b       	std	Y+17, r24	; 0x11
    4b54:	89 89       	ldd	r24, Y+17	; 0x11
    4b56:	9a 89       	ldd	r25, Y+18	; 0x12
    4b58:	01 97       	sbiw	r24, 0x01	; 1
    4b5a:	f1 f7       	brne	.-4      	; 0x4b58 <LCD_VidSendCommend+0xd2>
    4b5c:	9a 8b       	std	Y+18, r25	; 0x12
    4b5e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b60:	8b 89       	ldd	r24, Y+19	; 0x13
    4b62:	9c 89       	ldd	r25, Y+20	; 0x14
    4b64:	01 97       	sbiw	r24, 0x01	; 1
    4b66:	9c 8b       	std	Y+20, r25	; 0x14
    4b68:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b6a:	8b 89       	ldd	r24, Y+19	; 0x13
    4b6c:	9c 89       	ldd	r25, Y+20	; 0x14
    4b6e:	00 97       	sbiw	r24, 0x00	; 0
    4b70:	69 f7       	brne	.-38     	; 0x4b4c <LCD_VidSendCommend+0xc6>
    4b72:	14 c0       	rjmp	.+40     	; 0x4b9c <LCD_VidSendCommend+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b74:	6d 89       	ldd	r22, Y+21	; 0x15
    4b76:	7e 89       	ldd	r23, Y+22	; 0x16
    4b78:	8f 89       	ldd	r24, Y+23	; 0x17
    4b7a:	98 8d       	ldd	r25, Y+24	; 0x18
    4b7c:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    4b80:	dc 01       	movw	r26, r24
    4b82:	cb 01       	movw	r24, r22
    4b84:	9c 8b       	std	Y+20, r25	; 0x14
    4b86:	8b 8b       	std	Y+19, r24	; 0x13
    4b88:	8b 89       	ldd	r24, Y+19	; 0x13
    4b8a:	9c 89       	ldd	r25, Y+20	; 0x14
    4b8c:	98 8b       	std	Y+16, r25	; 0x10
    4b8e:	8f 87       	std	Y+15, r24	; 0x0f
    4b90:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b92:	98 89       	ldd	r25, Y+16	; 0x10
    4b94:	01 97       	sbiw	r24, 0x01	; 1
    4b96:	f1 f7       	brne	.-4      	; 0x4b94 <LCD_VidSendCommend+0x10e>
    4b98:	98 8b       	std	Y+16, r25	; 0x10
    4b9a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VidSetPinValue(CONTROL_PORT,E,LOW);
    4b9c:	80 e0       	ldi	r24, 0x00	; 0
    4b9e:	61 e0       	ldi	r22, 0x01	; 1
    4ba0:	40 e0       	ldi	r20, 0x00	; 0
    4ba2:	0e 94 a8 19 	call	0x3350	; 0x3350 <DIO_VidSetPinValue>
    4ba6:	80 e0       	ldi	r24, 0x00	; 0
    4ba8:	90 e0       	ldi	r25, 0x00	; 0
    4baa:	a0 e0       	ldi	r26, 0x00	; 0
    4bac:	b0 e4       	ldi	r27, 0x40	; 64
    4bae:	8b 87       	std	Y+11, r24	; 0x0b
    4bb0:	9c 87       	std	Y+12, r25	; 0x0c
    4bb2:	ad 87       	std	Y+13, r26	; 0x0d
    4bb4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    4bb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    4bba:	8d 85       	ldd	r24, Y+13	; 0x0d
    4bbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    4bbe:	20 e0       	ldi	r18, 0x00	; 0
    4bc0:	30 e0       	ldi	r19, 0x00	; 0
    4bc2:	4a ef       	ldi	r20, 0xFA	; 250
    4bc4:	54 e4       	ldi	r21, 0x44	; 68
    4bc6:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    4bca:	dc 01       	movw	r26, r24
    4bcc:	cb 01       	movw	r24, r22
    4bce:	8f 83       	std	Y+7, r24	; 0x07
    4bd0:	98 87       	std	Y+8, r25	; 0x08
    4bd2:	a9 87       	std	Y+9, r26	; 0x09
    4bd4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4bd6:	6f 81       	ldd	r22, Y+7	; 0x07
    4bd8:	78 85       	ldd	r23, Y+8	; 0x08
    4bda:	89 85       	ldd	r24, Y+9	; 0x09
    4bdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bde:	20 e0       	ldi	r18, 0x00	; 0
    4be0:	30 e0       	ldi	r19, 0x00	; 0
    4be2:	40 e8       	ldi	r20, 0x80	; 128
    4be4:	5f e3       	ldi	r21, 0x3F	; 63
    4be6:	0e 94 60 13 	call	0x26c0	; 0x26c0 <__ltsf2>
    4bea:	88 23       	and	r24, r24
    4bec:	2c f4       	brge	.+10     	; 0x4bf8 <LCD_VidSendCommend+0x172>
		__ticks = 1;
    4bee:	81 e0       	ldi	r24, 0x01	; 1
    4bf0:	90 e0       	ldi	r25, 0x00	; 0
    4bf2:	9e 83       	std	Y+6, r25	; 0x06
    4bf4:	8d 83       	std	Y+5, r24	; 0x05
    4bf6:	3f c0       	rjmp	.+126    	; 0x4c76 <LCD_VidSendCommend+0x1f0>
	else if (__tmp > 65535)
    4bf8:	6f 81       	ldd	r22, Y+7	; 0x07
    4bfa:	78 85       	ldd	r23, Y+8	; 0x08
    4bfc:	89 85       	ldd	r24, Y+9	; 0x09
    4bfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c00:	20 e0       	ldi	r18, 0x00	; 0
    4c02:	3f ef       	ldi	r19, 0xFF	; 255
    4c04:	4f e7       	ldi	r20, 0x7F	; 127
    4c06:	57 e4       	ldi	r21, 0x47	; 71
    4c08:	0e 94 00 13 	call	0x2600	; 0x2600 <__gtsf2>
    4c0c:	18 16       	cp	r1, r24
    4c0e:	4c f5       	brge	.+82     	; 0x4c62 <LCD_VidSendCommend+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c10:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c12:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c14:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c16:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c18:	20 e0       	ldi	r18, 0x00	; 0
    4c1a:	30 e0       	ldi	r19, 0x00	; 0
    4c1c:	40 e2       	ldi	r20, 0x20	; 32
    4c1e:	51 e4       	ldi	r21, 0x41	; 65
    4c20:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    4c24:	dc 01       	movw	r26, r24
    4c26:	cb 01       	movw	r24, r22
    4c28:	bc 01       	movw	r22, r24
    4c2a:	cd 01       	movw	r24, r26
    4c2c:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    4c30:	dc 01       	movw	r26, r24
    4c32:	cb 01       	movw	r24, r22
    4c34:	9e 83       	std	Y+6, r25	; 0x06
    4c36:	8d 83       	std	Y+5, r24	; 0x05
    4c38:	0f c0       	rjmp	.+30     	; 0x4c58 <LCD_VidSendCommend+0x1d2>
    4c3a:	88 ec       	ldi	r24, 0xC8	; 200
    4c3c:	90 e0       	ldi	r25, 0x00	; 0
    4c3e:	9c 83       	std	Y+4, r25	; 0x04
    4c40:	8b 83       	std	Y+3, r24	; 0x03
    4c42:	8b 81       	ldd	r24, Y+3	; 0x03
    4c44:	9c 81       	ldd	r25, Y+4	; 0x04
    4c46:	01 97       	sbiw	r24, 0x01	; 1
    4c48:	f1 f7       	brne	.-4      	; 0x4c46 <LCD_VidSendCommend+0x1c0>
    4c4a:	9c 83       	std	Y+4, r25	; 0x04
    4c4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c4e:	8d 81       	ldd	r24, Y+5	; 0x05
    4c50:	9e 81       	ldd	r25, Y+6	; 0x06
    4c52:	01 97       	sbiw	r24, 0x01	; 1
    4c54:	9e 83       	std	Y+6, r25	; 0x06
    4c56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c58:	8d 81       	ldd	r24, Y+5	; 0x05
    4c5a:	9e 81       	ldd	r25, Y+6	; 0x06
    4c5c:	00 97       	sbiw	r24, 0x00	; 0
    4c5e:	69 f7       	brne	.-38     	; 0x4c3a <LCD_VidSendCommend+0x1b4>
    4c60:	14 c0       	rjmp	.+40     	; 0x4c8a <LCD_VidSendCommend+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c62:	6f 81       	ldd	r22, Y+7	; 0x07
    4c64:	78 85       	ldd	r23, Y+8	; 0x08
    4c66:	89 85       	ldd	r24, Y+9	; 0x09
    4c68:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c6a:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    4c6e:	dc 01       	movw	r26, r24
    4c70:	cb 01       	movw	r24, r22
    4c72:	9e 83       	std	Y+6, r25	; 0x06
    4c74:	8d 83       	std	Y+5, r24	; 0x05
    4c76:	8d 81       	ldd	r24, Y+5	; 0x05
    4c78:	9e 81       	ldd	r25, Y+6	; 0x06
    4c7a:	9a 83       	std	Y+2, r25	; 0x02
    4c7c:	89 83       	std	Y+1, r24	; 0x01
    4c7e:	89 81       	ldd	r24, Y+1	; 0x01
    4c80:	9a 81       	ldd	r25, Y+2	; 0x02
    4c82:	01 97       	sbiw	r24, 0x01	; 1
    4c84:	f1 f7       	brne	.-4      	; 0x4c82 <LCD_VidSendCommend+0x1fc>
    4c86:	9a 83       	std	Y+2, r25	; 0x02
    4c88:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_VidSetPinValue(CONTROL_PORT,E,LOW);
	_delay_ms(2);

#endif
}
    4c8a:	6d 96       	adiw	r28, 0x1d	; 29
    4c8c:	0f b6       	in	r0, 0x3f	; 63
    4c8e:	f8 94       	cli
    4c90:	de bf       	out	0x3e, r29	; 62
    4c92:	0f be       	out	0x3f, r0	; 63
    4c94:	cd bf       	out	0x3d, r28	; 61
    4c96:	cf 91       	pop	r28
    4c98:	df 91       	pop	r29
    4c9a:	08 95       	ret

00004c9c <LCD_VidInit>:



void LCD_VidInit (void) {
    4c9c:	0f 93       	push	r16
    4c9e:	1f 93       	push	r17
    4ca0:	df 93       	push	r29
    4ca2:	cf 93       	push	r28
    4ca4:	cd b7       	in	r28, 0x3d	; 61
    4ca6:	de b7       	in	r29, 0x3e	; 62
    4ca8:	c4 56       	subi	r28, 0x64	; 100
    4caa:	d0 40       	sbci	r29, 0x00	; 0
    4cac:	0f b6       	in	r0, 0x3f	; 63
    4cae:	f8 94       	cli
    4cb0:	de bf       	out	0x3e, r29	; 62
    4cb2:	0f be       	out	0x3f, r0	; 63
    4cb4:	cd bf       	out	0x3d, r28	; 61

#ifdef EIGHT_BIT

/****to define CONTROL PORT as OUTPUT PINS******/
	DIO_VidSetPinDirection(CONTROL_PORT,RS,HIGH);
    4cb6:	80 e0       	ldi	r24, 0x00	; 0
    4cb8:	60 e0       	ldi	r22, 0x00	; 0
    4cba:	41 e0       	ldi	r20, 0x01	; 1
    4cbc:	0e 94 67 18 	call	0x30ce	; 0x30ce <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(CONTROL_PORT,E,HIGH);
    4cc0:	80 e0       	ldi	r24, 0x00	; 0
    4cc2:	61 e0       	ldi	r22, 0x01	; 1
    4cc4:	41 e0       	ldi	r20, 0x01	; 1
    4cc6:	0e 94 67 18 	call	0x30ce	; 0x30ce <DIO_VidSetPinDirection>
/****to define DATA PORT as OUTPUT PINS********/
	DIO_VidSetPortDirection(DATA_PORT,0xff);
    4cca:	82 e0       	ldi	r24, 0x02	; 2
    4ccc:	6f ef       	ldi	r22, 0xFF	; 255
    4cce:	0e 94 67 19 	call	0x32ce	; 0x32ce <DIO_VidSetPortDirection>
    4cd2:	fe 01       	movw	r30, r28
    4cd4:	ef 59       	subi	r30, 0x9F	; 159
    4cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4cd8:	80 e0       	ldi	r24, 0x00	; 0
    4cda:	90 e0       	ldi	r25, 0x00	; 0
    4cdc:	a0 e2       	ldi	r26, 0x20	; 32
    4cde:	b2 e4       	ldi	r27, 0x42	; 66
    4ce0:	80 83       	st	Z, r24
    4ce2:	91 83       	std	Z+1, r25	; 0x01
    4ce4:	a2 83       	std	Z+2, r26	; 0x02
    4ce6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ce8:	8e 01       	movw	r16, r28
    4cea:	03 5a       	subi	r16, 0xA3	; 163
    4cec:	1f 4f       	sbci	r17, 0xFF	; 255
    4cee:	fe 01       	movw	r30, r28
    4cf0:	ef 59       	subi	r30, 0x9F	; 159
    4cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    4cf4:	60 81       	ld	r22, Z
    4cf6:	71 81       	ldd	r23, Z+1	; 0x01
    4cf8:	82 81       	ldd	r24, Z+2	; 0x02
    4cfa:	93 81       	ldd	r25, Z+3	; 0x03
    4cfc:	20 e0       	ldi	r18, 0x00	; 0
    4cfe:	30 e0       	ldi	r19, 0x00	; 0
    4d00:	4a ef       	ldi	r20, 0xFA	; 250
    4d02:	54 e4       	ldi	r21, 0x44	; 68
    4d04:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    4d08:	dc 01       	movw	r26, r24
    4d0a:	cb 01       	movw	r24, r22
    4d0c:	f8 01       	movw	r30, r16
    4d0e:	80 83       	st	Z, r24
    4d10:	91 83       	std	Z+1, r25	; 0x01
    4d12:	a2 83       	std	Z+2, r26	; 0x02
    4d14:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4d16:	fe 01       	movw	r30, r28
    4d18:	e3 5a       	subi	r30, 0xA3	; 163
    4d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d1c:	60 81       	ld	r22, Z
    4d1e:	71 81       	ldd	r23, Z+1	; 0x01
    4d20:	82 81       	ldd	r24, Z+2	; 0x02
    4d22:	93 81       	ldd	r25, Z+3	; 0x03
    4d24:	20 e0       	ldi	r18, 0x00	; 0
    4d26:	30 e0       	ldi	r19, 0x00	; 0
    4d28:	40 e8       	ldi	r20, 0x80	; 128
    4d2a:	5f e3       	ldi	r21, 0x3F	; 63
    4d2c:	0e 94 60 13 	call	0x26c0	; 0x26c0 <__ltsf2>
    4d30:	88 23       	and	r24, r24
    4d32:	44 f4       	brge	.+16     	; 0x4d44 <LCD_VidInit+0xa8>
		__ticks = 1;
    4d34:	fe 01       	movw	r30, r28
    4d36:	e5 5a       	subi	r30, 0xA5	; 165
    4d38:	ff 4f       	sbci	r31, 0xFF	; 255
    4d3a:	81 e0       	ldi	r24, 0x01	; 1
    4d3c:	90 e0       	ldi	r25, 0x00	; 0
    4d3e:	91 83       	std	Z+1, r25	; 0x01
    4d40:	80 83       	st	Z, r24
    4d42:	64 c0       	rjmp	.+200    	; 0x4e0c <LCD_VidInit+0x170>
	else if (__tmp > 65535)
    4d44:	fe 01       	movw	r30, r28
    4d46:	e3 5a       	subi	r30, 0xA3	; 163
    4d48:	ff 4f       	sbci	r31, 0xFF	; 255
    4d4a:	60 81       	ld	r22, Z
    4d4c:	71 81       	ldd	r23, Z+1	; 0x01
    4d4e:	82 81       	ldd	r24, Z+2	; 0x02
    4d50:	93 81       	ldd	r25, Z+3	; 0x03
    4d52:	20 e0       	ldi	r18, 0x00	; 0
    4d54:	3f ef       	ldi	r19, 0xFF	; 255
    4d56:	4f e7       	ldi	r20, 0x7F	; 127
    4d58:	57 e4       	ldi	r21, 0x47	; 71
    4d5a:	0e 94 00 13 	call	0x2600	; 0x2600 <__gtsf2>
    4d5e:	18 16       	cp	r1, r24
    4d60:	0c f0       	brlt	.+2      	; 0x4d64 <LCD_VidInit+0xc8>
    4d62:	43 c0       	rjmp	.+134    	; 0x4dea <LCD_VidInit+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d64:	fe 01       	movw	r30, r28
    4d66:	ef 59       	subi	r30, 0x9F	; 159
    4d68:	ff 4f       	sbci	r31, 0xFF	; 255
    4d6a:	60 81       	ld	r22, Z
    4d6c:	71 81       	ldd	r23, Z+1	; 0x01
    4d6e:	82 81       	ldd	r24, Z+2	; 0x02
    4d70:	93 81       	ldd	r25, Z+3	; 0x03
    4d72:	20 e0       	ldi	r18, 0x00	; 0
    4d74:	30 e0       	ldi	r19, 0x00	; 0
    4d76:	40 e2       	ldi	r20, 0x20	; 32
    4d78:	51 e4       	ldi	r21, 0x41	; 65
    4d7a:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    4d7e:	dc 01       	movw	r26, r24
    4d80:	cb 01       	movw	r24, r22
    4d82:	8e 01       	movw	r16, r28
    4d84:	05 5a       	subi	r16, 0xA5	; 165
    4d86:	1f 4f       	sbci	r17, 0xFF	; 255
    4d88:	bc 01       	movw	r22, r24
    4d8a:	cd 01       	movw	r24, r26
    4d8c:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    4d90:	dc 01       	movw	r26, r24
    4d92:	cb 01       	movw	r24, r22
    4d94:	f8 01       	movw	r30, r16
    4d96:	91 83       	std	Z+1, r25	; 0x01
    4d98:	80 83       	st	Z, r24
    4d9a:	1f c0       	rjmp	.+62     	; 0x4dda <LCD_VidInit+0x13e>
    4d9c:	fe 01       	movw	r30, r28
    4d9e:	e7 5a       	subi	r30, 0xA7	; 167
    4da0:	ff 4f       	sbci	r31, 0xFF	; 255
    4da2:	88 ec       	ldi	r24, 0xC8	; 200
    4da4:	90 e0       	ldi	r25, 0x00	; 0
    4da6:	91 83       	std	Z+1, r25	; 0x01
    4da8:	80 83       	st	Z, r24
    4daa:	fe 01       	movw	r30, r28
    4dac:	e7 5a       	subi	r30, 0xA7	; 167
    4dae:	ff 4f       	sbci	r31, 0xFF	; 255
    4db0:	80 81       	ld	r24, Z
    4db2:	91 81       	ldd	r25, Z+1	; 0x01
    4db4:	01 97       	sbiw	r24, 0x01	; 1
    4db6:	f1 f7       	brne	.-4      	; 0x4db4 <LCD_VidInit+0x118>
    4db8:	fe 01       	movw	r30, r28
    4dba:	e7 5a       	subi	r30, 0xA7	; 167
    4dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    4dbe:	91 83       	std	Z+1, r25	; 0x01
    4dc0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dc2:	de 01       	movw	r26, r28
    4dc4:	a5 5a       	subi	r26, 0xA5	; 165
    4dc6:	bf 4f       	sbci	r27, 0xFF	; 255
    4dc8:	fe 01       	movw	r30, r28
    4dca:	e5 5a       	subi	r30, 0xA5	; 165
    4dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    4dce:	80 81       	ld	r24, Z
    4dd0:	91 81       	ldd	r25, Z+1	; 0x01
    4dd2:	01 97       	sbiw	r24, 0x01	; 1
    4dd4:	11 96       	adiw	r26, 0x01	; 1
    4dd6:	9c 93       	st	X, r25
    4dd8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dda:	fe 01       	movw	r30, r28
    4ddc:	e5 5a       	subi	r30, 0xA5	; 165
    4dde:	ff 4f       	sbci	r31, 0xFF	; 255
    4de0:	80 81       	ld	r24, Z
    4de2:	91 81       	ldd	r25, Z+1	; 0x01
    4de4:	00 97       	sbiw	r24, 0x00	; 0
    4de6:	d1 f6       	brne	.-76     	; 0x4d9c <LCD_VidInit+0x100>
    4de8:	27 c0       	rjmp	.+78     	; 0x4e38 <LCD_VidInit+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dea:	8e 01       	movw	r16, r28
    4dec:	05 5a       	subi	r16, 0xA5	; 165
    4dee:	1f 4f       	sbci	r17, 0xFF	; 255
    4df0:	fe 01       	movw	r30, r28
    4df2:	e3 5a       	subi	r30, 0xA3	; 163
    4df4:	ff 4f       	sbci	r31, 0xFF	; 255
    4df6:	60 81       	ld	r22, Z
    4df8:	71 81       	ldd	r23, Z+1	; 0x01
    4dfa:	82 81       	ldd	r24, Z+2	; 0x02
    4dfc:	93 81       	ldd	r25, Z+3	; 0x03
    4dfe:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    4e02:	dc 01       	movw	r26, r24
    4e04:	cb 01       	movw	r24, r22
    4e06:	f8 01       	movw	r30, r16
    4e08:	91 83       	std	Z+1, r25	; 0x01
    4e0a:	80 83       	st	Z, r24
    4e0c:	de 01       	movw	r26, r28
    4e0e:	a9 5a       	subi	r26, 0xA9	; 169
    4e10:	bf 4f       	sbci	r27, 0xFF	; 255
    4e12:	fe 01       	movw	r30, r28
    4e14:	e5 5a       	subi	r30, 0xA5	; 165
    4e16:	ff 4f       	sbci	r31, 0xFF	; 255
    4e18:	80 81       	ld	r24, Z
    4e1a:	91 81       	ldd	r25, Z+1	; 0x01
    4e1c:	8d 93       	st	X+, r24
    4e1e:	9c 93       	st	X, r25
    4e20:	fe 01       	movw	r30, r28
    4e22:	e9 5a       	subi	r30, 0xA9	; 169
    4e24:	ff 4f       	sbci	r31, 0xFF	; 255
    4e26:	80 81       	ld	r24, Z
    4e28:	91 81       	ldd	r25, Z+1	; 0x01
    4e2a:	01 97       	sbiw	r24, 0x01	; 1
    4e2c:	f1 f7       	brne	.-4      	; 0x4e2a <LCD_VidInit+0x18e>
    4e2e:	fe 01       	movw	r30, r28
    4e30:	e9 5a       	subi	r30, 0xA9	; 169
    4e32:	ff 4f       	sbci	r31, 0xFF	; 255
    4e34:	91 83       	std	Z+1, r25	; 0x01
    4e36:	80 83       	st	Z, r24
/******to initialize LCD after power***********/
	_delay_ms(40);
	//send function set commend
	LCD_VidSendCommend (FUNC_SET);
    4e38:	8c e3       	ldi	r24, 0x3C	; 60
    4e3a:	0e 94 43 25 	call	0x4a86	; 0x4a86 <LCD_VidSendCommend>
    4e3e:	fe 01       	movw	r30, r28
    4e40:	ed 5a       	subi	r30, 0xAD	; 173
    4e42:	ff 4f       	sbci	r31, 0xFF	; 255
    4e44:	80 e0       	ldi	r24, 0x00	; 0
    4e46:	90 e0       	ldi	r25, 0x00	; 0
    4e48:	a0 e2       	ldi	r26, 0x20	; 32
    4e4a:	b2 e4       	ldi	r27, 0x42	; 66
    4e4c:	80 83       	st	Z, r24
    4e4e:	91 83       	std	Z+1, r25	; 0x01
    4e50:	a2 83       	std	Z+2, r26	; 0x02
    4e52:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4e54:	8e 01       	movw	r16, r28
    4e56:	01 5b       	subi	r16, 0xB1	; 177
    4e58:	1f 4f       	sbci	r17, 0xFF	; 255
    4e5a:	fe 01       	movw	r30, r28
    4e5c:	ed 5a       	subi	r30, 0xAD	; 173
    4e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e60:	60 81       	ld	r22, Z
    4e62:	71 81       	ldd	r23, Z+1	; 0x01
    4e64:	82 81       	ldd	r24, Z+2	; 0x02
    4e66:	93 81       	ldd	r25, Z+3	; 0x03
    4e68:	2b ea       	ldi	r18, 0xAB	; 171
    4e6a:	3a ea       	ldi	r19, 0xAA	; 170
    4e6c:	4a e2       	ldi	r20, 0x2A	; 42
    4e6e:	50 e4       	ldi	r21, 0x40	; 64
    4e70:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    4e74:	dc 01       	movw	r26, r24
    4e76:	cb 01       	movw	r24, r22
    4e78:	f8 01       	movw	r30, r16
    4e7a:	80 83       	st	Z, r24
    4e7c:	91 83       	std	Z+1, r25	; 0x01
    4e7e:	a2 83       	std	Z+2, r26	; 0x02
    4e80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4e82:	fe 01       	movw	r30, r28
    4e84:	e1 5b       	subi	r30, 0xB1	; 177
    4e86:	ff 4f       	sbci	r31, 0xFF	; 255
    4e88:	60 81       	ld	r22, Z
    4e8a:	71 81       	ldd	r23, Z+1	; 0x01
    4e8c:	82 81       	ldd	r24, Z+2	; 0x02
    4e8e:	93 81       	ldd	r25, Z+3	; 0x03
    4e90:	20 e0       	ldi	r18, 0x00	; 0
    4e92:	30 e0       	ldi	r19, 0x00	; 0
    4e94:	40 e8       	ldi	r20, 0x80	; 128
    4e96:	5f e3       	ldi	r21, 0x3F	; 63
    4e98:	0e 94 60 13 	call	0x26c0	; 0x26c0 <__ltsf2>
    4e9c:	88 23       	and	r24, r24
    4e9e:	34 f4       	brge	.+12     	; 0x4eac <LCD_VidInit+0x210>
		__ticks = 1;
    4ea0:	fe 01       	movw	r30, r28
    4ea2:	e2 5b       	subi	r30, 0xB2	; 178
    4ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ea6:	81 e0       	ldi	r24, 0x01	; 1
    4ea8:	80 83       	st	Z, r24
    4eaa:	e0 c0       	rjmp	.+448    	; 0x506c <LCD_VidInit+0x3d0>
	else if (__tmp > 255)
    4eac:	fe 01       	movw	r30, r28
    4eae:	e1 5b       	subi	r30, 0xB1	; 177
    4eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    4eb2:	60 81       	ld	r22, Z
    4eb4:	71 81       	ldd	r23, Z+1	; 0x01
    4eb6:	82 81       	ldd	r24, Z+2	; 0x02
    4eb8:	93 81       	ldd	r25, Z+3	; 0x03
    4eba:	20 e0       	ldi	r18, 0x00	; 0
    4ebc:	30 e0       	ldi	r19, 0x00	; 0
    4ebe:	4f e7       	ldi	r20, 0x7F	; 127
    4ec0:	53 e4       	ldi	r21, 0x43	; 67
    4ec2:	0e 94 00 13 	call	0x2600	; 0x2600 <__gtsf2>
    4ec6:	18 16       	cp	r1, r24
    4ec8:	0c f0       	brlt	.+2      	; 0x4ecc <LCD_VidInit+0x230>
    4eca:	c0 c0       	rjmp	.+384    	; 0x504c <LCD_VidInit+0x3b0>
	{
		_delay_ms(__us / 1000.0);
    4ecc:	fe 01       	movw	r30, r28
    4ece:	ed 5a       	subi	r30, 0xAD	; 173
    4ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ed2:	60 81       	ld	r22, Z
    4ed4:	71 81       	ldd	r23, Z+1	; 0x01
    4ed6:	82 81       	ldd	r24, Z+2	; 0x02
    4ed8:	93 81       	ldd	r25, Z+3	; 0x03
    4eda:	20 e0       	ldi	r18, 0x00	; 0
    4edc:	30 e0       	ldi	r19, 0x00	; 0
    4ede:	4a e7       	ldi	r20, 0x7A	; 122
    4ee0:	54 e4       	ldi	r21, 0x44	; 68
    4ee2:	0e 94 54 12 	call	0x24a8	; 0x24a8 <__divsf3>
    4ee6:	dc 01       	movw	r26, r24
    4ee8:	cb 01       	movw	r24, r22
    4eea:	fe 01       	movw	r30, r28
    4eec:	e6 5b       	subi	r30, 0xB6	; 182
    4eee:	ff 4f       	sbci	r31, 0xFF	; 255
    4ef0:	80 83       	st	Z, r24
    4ef2:	91 83       	std	Z+1, r25	; 0x01
    4ef4:	a2 83       	std	Z+2, r26	; 0x02
    4ef6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ef8:	8e 01       	movw	r16, r28
    4efa:	0a 5b       	subi	r16, 0xBA	; 186
    4efc:	1f 4f       	sbci	r17, 0xFF	; 255
    4efe:	fe 01       	movw	r30, r28
    4f00:	e6 5b       	subi	r30, 0xB6	; 182
    4f02:	ff 4f       	sbci	r31, 0xFF	; 255
    4f04:	60 81       	ld	r22, Z
    4f06:	71 81       	ldd	r23, Z+1	; 0x01
    4f08:	82 81       	ldd	r24, Z+2	; 0x02
    4f0a:	93 81       	ldd	r25, Z+3	; 0x03
    4f0c:	20 e0       	ldi	r18, 0x00	; 0
    4f0e:	30 e0       	ldi	r19, 0x00	; 0
    4f10:	4a ef       	ldi	r20, 0xFA	; 250
    4f12:	54 e4       	ldi	r21, 0x44	; 68
    4f14:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    4f18:	dc 01       	movw	r26, r24
    4f1a:	cb 01       	movw	r24, r22
    4f1c:	f8 01       	movw	r30, r16
    4f1e:	80 83       	st	Z, r24
    4f20:	91 83       	std	Z+1, r25	; 0x01
    4f22:	a2 83       	std	Z+2, r26	; 0x02
    4f24:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4f26:	fe 01       	movw	r30, r28
    4f28:	ea 5b       	subi	r30, 0xBA	; 186
    4f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f2c:	60 81       	ld	r22, Z
    4f2e:	71 81       	ldd	r23, Z+1	; 0x01
    4f30:	82 81       	ldd	r24, Z+2	; 0x02
    4f32:	93 81       	ldd	r25, Z+3	; 0x03
    4f34:	20 e0       	ldi	r18, 0x00	; 0
    4f36:	30 e0       	ldi	r19, 0x00	; 0
    4f38:	40 e8       	ldi	r20, 0x80	; 128
    4f3a:	5f e3       	ldi	r21, 0x3F	; 63
    4f3c:	0e 94 60 13 	call	0x26c0	; 0x26c0 <__ltsf2>
    4f40:	88 23       	and	r24, r24
    4f42:	44 f4       	brge	.+16     	; 0x4f54 <LCD_VidInit+0x2b8>
		__ticks = 1;
    4f44:	fe 01       	movw	r30, r28
    4f46:	ec 5b       	subi	r30, 0xBC	; 188
    4f48:	ff 4f       	sbci	r31, 0xFF	; 255
    4f4a:	81 e0       	ldi	r24, 0x01	; 1
    4f4c:	90 e0       	ldi	r25, 0x00	; 0
    4f4e:	91 83       	std	Z+1, r25	; 0x01
    4f50:	80 83       	st	Z, r24
    4f52:	64 c0       	rjmp	.+200    	; 0x501c <LCD_VidInit+0x380>
	else if (__tmp > 65535)
    4f54:	fe 01       	movw	r30, r28
    4f56:	ea 5b       	subi	r30, 0xBA	; 186
    4f58:	ff 4f       	sbci	r31, 0xFF	; 255
    4f5a:	60 81       	ld	r22, Z
    4f5c:	71 81       	ldd	r23, Z+1	; 0x01
    4f5e:	82 81       	ldd	r24, Z+2	; 0x02
    4f60:	93 81       	ldd	r25, Z+3	; 0x03
    4f62:	20 e0       	ldi	r18, 0x00	; 0
    4f64:	3f ef       	ldi	r19, 0xFF	; 255
    4f66:	4f e7       	ldi	r20, 0x7F	; 127
    4f68:	57 e4       	ldi	r21, 0x47	; 71
    4f6a:	0e 94 00 13 	call	0x2600	; 0x2600 <__gtsf2>
    4f6e:	18 16       	cp	r1, r24
    4f70:	0c f0       	brlt	.+2      	; 0x4f74 <LCD_VidInit+0x2d8>
    4f72:	43 c0       	rjmp	.+134    	; 0x4ffa <LCD_VidInit+0x35e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f74:	fe 01       	movw	r30, r28
    4f76:	e6 5b       	subi	r30, 0xB6	; 182
    4f78:	ff 4f       	sbci	r31, 0xFF	; 255
    4f7a:	60 81       	ld	r22, Z
    4f7c:	71 81       	ldd	r23, Z+1	; 0x01
    4f7e:	82 81       	ldd	r24, Z+2	; 0x02
    4f80:	93 81       	ldd	r25, Z+3	; 0x03
    4f82:	20 e0       	ldi	r18, 0x00	; 0
    4f84:	30 e0       	ldi	r19, 0x00	; 0
    4f86:	40 e2       	ldi	r20, 0x20	; 32
    4f88:	51 e4       	ldi	r21, 0x41	; 65
    4f8a:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    4f8e:	dc 01       	movw	r26, r24
    4f90:	cb 01       	movw	r24, r22
    4f92:	8e 01       	movw	r16, r28
    4f94:	0c 5b       	subi	r16, 0xBC	; 188
    4f96:	1f 4f       	sbci	r17, 0xFF	; 255
    4f98:	bc 01       	movw	r22, r24
    4f9a:	cd 01       	movw	r24, r26
    4f9c:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    4fa0:	dc 01       	movw	r26, r24
    4fa2:	cb 01       	movw	r24, r22
    4fa4:	f8 01       	movw	r30, r16
    4fa6:	91 83       	std	Z+1, r25	; 0x01
    4fa8:	80 83       	st	Z, r24
    4faa:	1f c0       	rjmp	.+62     	; 0x4fea <LCD_VidInit+0x34e>
    4fac:	fe 01       	movw	r30, r28
    4fae:	ee 5b       	subi	r30, 0xBE	; 190
    4fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    4fb2:	88 ec       	ldi	r24, 0xC8	; 200
    4fb4:	90 e0       	ldi	r25, 0x00	; 0
    4fb6:	91 83       	std	Z+1, r25	; 0x01
    4fb8:	80 83       	st	Z, r24
    4fba:	fe 01       	movw	r30, r28
    4fbc:	ee 5b       	subi	r30, 0xBE	; 190
    4fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    4fc0:	80 81       	ld	r24, Z
    4fc2:	91 81       	ldd	r25, Z+1	; 0x01
    4fc4:	01 97       	sbiw	r24, 0x01	; 1
    4fc6:	f1 f7       	brne	.-4      	; 0x4fc4 <LCD_VidInit+0x328>
    4fc8:	fe 01       	movw	r30, r28
    4fca:	ee 5b       	subi	r30, 0xBE	; 190
    4fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    4fce:	91 83       	std	Z+1, r25	; 0x01
    4fd0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fd2:	de 01       	movw	r26, r28
    4fd4:	ac 5b       	subi	r26, 0xBC	; 188
    4fd6:	bf 4f       	sbci	r27, 0xFF	; 255
    4fd8:	fe 01       	movw	r30, r28
    4fda:	ec 5b       	subi	r30, 0xBC	; 188
    4fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    4fde:	80 81       	ld	r24, Z
    4fe0:	91 81       	ldd	r25, Z+1	; 0x01
    4fe2:	01 97       	sbiw	r24, 0x01	; 1
    4fe4:	11 96       	adiw	r26, 0x01	; 1
    4fe6:	9c 93       	st	X, r25
    4fe8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fea:	fe 01       	movw	r30, r28
    4fec:	ec 5b       	subi	r30, 0xBC	; 188
    4fee:	ff 4f       	sbci	r31, 0xFF	; 255
    4ff0:	80 81       	ld	r24, Z
    4ff2:	91 81       	ldd	r25, Z+1	; 0x01
    4ff4:	00 97       	sbiw	r24, 0x00	; 0
    4ff6:	d1 f6       	brne	.-76     	; 0x4fac <LCD_VidInit+0x310>
    4ff8:	42 c0       	rjmp	.+132    	; 0x507e <LCD_VidInit+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ffa:	8e 01       	movw	r16, r28
    4ffc:	0c 5b       	subi	r16, 0xBC	; 188
    4ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    5000:	fe 01       	movw	r30, r28
    5002:	ea 5b       	subi	r30, 0xBA	; 186
    5004:	ff 4f       	sbci	r31, 0xFF	; 255
    5006:	60 81       	ld	r22, Z
    5008:	71 81       	ldd	r23, Z+1	; 0x01
    500a:	82 81       	ldd	r24, Z+2	; 0x02
    500c:	93 81       	ldd	r25, Z+3	; 0x03
    500e:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    5012:	dc 01       	movw	r26, r24
    5014:	cb 01       	movw	r24, r22
    5016:	f8 01       	movw	r30, r16
    5018:	91 83       	std	Z+1, r25	; 0x01
    501a:	80 83       	st	Z, r24
    501c:	de 01       	movw	r26, r28
    501e:	a0 5c       	subi	r26, 0xC0	; 192
    5020:	bf 4f       	sbci	r27, 0xFF	; 255
    5022:	fe 01       	movw	r30, r28
    5024:	ec 5b       	subi	r30, 0xBC	; 188
    5026:	ff 4f       	sbci	r31, 0xFF	; 255
    5028:	80 81       	ld	r24, Z
    502a:	91 81       	ldd	r25, Z+1	; 0x01
    502c:	11 96       	adiw	r26, 0x01	; 1
    502e:	9c 93       	st	X, r25
    5030:	8e 93       	st	-X, r24
    5032:	fe 01       	movw	r30, r28
    5034:	e0 5c       	subi	r30, 0xC0	; 192
    5036:	ff 4f       	sbci	r31, 0xFF	; 255
    5038:	80 81       	ld	r24, Z
    503a:	91 81       	ldd	r25, Z+1	; 0x01
    503c:	01 97       	sbiw	r24, 0x01	; 1
    503e:	f1 f7       	brne	.-4      	; 0x503c <LCD_VidInit+0x3a0>
    5040:	fe 01       	movw	r30, r28
    5042:	e0 5c       	subi	r30, 0xC0	; 192
    5044:	ff 4f       	sbci	r31, 0xFF	; 255
    5046:	91 83       	std	Z+1, r25	; 0x01
    5048:	80 83       	st	Z, r24
    504a:	19 c0       	rjmp	.+50     	; 0x507e <LCD_VidInit+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    504c:	8e 01       	movw	r16, r28
    504e:	02 5b       	subi	r16, 0xB2	; 178
    5050:	1f 4f       	sbci	r17, 0xFF	; 255
    5052:	fe 01       	movw	r30, r28
    5054:	e1 5b       	subi	r30, 0xB1	; 177
    5056:	ff 4f       	sbci	r31, 0xFF	; 255
    5058:	60 81       	ld	r22, Z
    505a:	71 81       	ldd	r23, Z+1	; 0x01
    505c:	82 81       	ldd	r24, Z+2	; 0x02
    505e:	93 81       	ldd	r25, Z+3	; 0x03
    5060:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    5064:	dc 01       	movw	r26, r24
    5066:	cb 01       	movw	r24, r22
    5068:	f8 01       	movw	r30, r16
    506a:	80 83       	st	Z, r24
    506c:	fe 01       	movw	r30, r28
    506e:	e2 5b       	subi	r30, 0xB2	; 178
    5070:	ff 4f       	sbci	r31, 0xFF	; 255
    5072:	80 81       	ld	r24, Z
    5074:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5076:	8f ad       	ldd	r24, Y+63	; 0x3f
    5078:	8a 95       	dec	r24
    507a:	f1 f7       	brne	.-4      	; 0x5078 <LCD_VidInit+0x3dc>
    507c:	8f af       	std	Y+63, r24	; 0x3f
	// Delay for more than 39 us
	_delay_us(40);
	// Send Display_ON & Cursor_OFF Command
	LCD_VidSendCommend(DISPLAY_ON_CURSOR_OFF);
    507e:	8c e0       	ldi	r24, 0x0C	; 12
    5080:	0e 94 43 25 	call	0x4a86	; 0x4a86 <LCD_VidSendCommend>
    5084:	80 e0       	ldi	r24, 0x00	; 0
    5086:	90 e0       	ldi	r25, 0x00	; 0
    5088:	a0 e2       	ldi	r26, 0x20	; 32
    508a:	b2 e4       	ldi	r27, 0x42	; 66
    508c:	8b af       	std	Y+59, r24	; 0x3b
    508e:	9c af       	std	Y+60, r25	; 0x3c
    5090:	ad af       	std	Y+61, r26	; 0x3d
    5092:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5094:	6b ad       	ldd	r22, Y+59	; 0x3b
    5096:	7c ad       	ldd	r23, Y+60	; 0x3c
    5098:	8d ad       	ldd	r24, Y+61	; 0x3d
    509a:	9e ad       	ldd	r25, Y+62	; 0x3e
    509c:	2b ea       	ldi	r18, 0xAB	; 171
    509e:	3a ea       	ldi	r19, 0xAA	; 170
    50a0:	4a e2       	ldi	r20, 0x2A	; 42
    50a2:	50 e4       	ldi	r21, 0x40	; 64
    50a4:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    50a8:	dc 01       	movw	r26, r24
    50aa:	cb 01       	movw	r24, r22
    50ac:	8f ab       	std	Y+55, r24	; 0x37
    50ae:	98 af       	std	Y+56, r25	; 0x38
    50b0:	a9 af       	std	Y+57, r26	; 0x39
    50b2:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    50b4:	6f a9       	ldd	r22, Y+55	; 0x37
    50b6:	78 ad       	ldd	r23, Y+56	; 0x38
    50b8:	89 ad       	ldd	r24, Y+57	; 0x39
    50ba:	9a ad       	ldd	r25, Y+58	; 0x3a
    50bc:	20 e0       	ldi	r18, 0x00	; 0
    50be:	30 e0       	ldi	r19, 0x00	; 0
    50c0:	40 e8       	ldi	r20, 0x80	; 128
    50c2:	5f e3       	ldi	r21, 0x3F	; 63
    50c4:	0e 94 60 13 	call	0x26c0	; 0x26c0 <__ltsf2>
    50c8:	88 23       	and	r24, r24
    50ca:	1c f4       	brge	.+6      	; 0x50d2 <LCD_VidInit+0x436>
		__ticks = 1;
    50cc:	81 e0       	ldi	r24, 0x01	; 1
    50ce:	8e ab       	std	Y+54, r24	; 0x36
    50d0:	91 c0       	rjmp	.+290    	; 0x51f4 <LCD_VidInit+0x558>
	else if (__tmp > 255)
    50d2:	6f a9       	ldd	r22, Y+55	; 0x37
    50d4:	78 ad       	ldd	r23, Y+56	; 0x38
    50d6:	89 ad       	ldd	r24, Y+57	; 0x39
    50d8:	9a ad       	ldd	r25, Y+58	; 0x3a
    50da:	20 e0       	ldi	r18, 0x00	; 0
    50dc:	30 e0       	ldi	r19, 0x00	; 0
    50de:	4f e7       	ldi	r20, 0x7F	; 127
    50e0:	53 e4       	ldi	r21, 0x43	; 67
    50e2:	0e 94 00 13 	call	0x2600	; 0x2600 <__gtsf2>
    50e6:	18 16       	cp	r1, r24
    50e8:	0c f0       	brlt	.+2      	; 0x50ec <LCD_VidInit+0x450>
    50ea:	7b c0       	rjmp	.+246    	; 0x51e2 <LCD_VidInit+0x546>
	{
		_delay_ms(__us / 1000.0);
    50ec:	6b ad       	ldd	r22, Y+59	; 0x3b
    50ee:	7c ad       	ldd	r23, Y+60	; 0x3c
    50f0:	8d ad       	ldd	r24, Y+61	; 0x3d
    50f2:	9e ad       	ldd	r25, Y+62	; 0x3e
    50f4:	20 e0       	ldi	r18, 0x00	; 0
    50f6:	30 e0       	ldi	r19, 0x00	; 0
    50f8:	4a e7       	ldi	r20, 0x7A	; 122
    50fa:	54 e4       	ldi	r21, 0x44	; 68
    50fc:	0e 94 54 12 	call	0x24a8	; 0x24a8 <__divsf3>
    5100:	dc 01       	movw	r26, r24
    5102:	cb 01       	movw	r24, r22
    5104:	8a ab       	std	Y+50, r24	; 0x32
    5106:	9b ab       	std	Y+51, r25	; 0x33
    5108:	ac ab       	std	Y+52, r26	; 0x34
    510a:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    510c:	6a a9       	ldd	r22, Y+50	; 0x32
    510e:	7b a9       	ldd	r23, Y+51	; 0x33
    5110:	8c a9       	ldd	r24, Y+52	; 0x34
    5112:	9d a9       	ldd	r25, Y+53	; 0x35
    5114:	20 e0       	ldi	r18, 0x00	; 0
    5116:	30 e0       	ldi	r19, 0x00	; 0
    5118:	4a ef       	ldi	r20, 0xFA	; 250
    511a:	54 e4       	ldi	r21, 0x44	; 68
    511c:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    5120:	dc 01       	movw	r26, r24
    5122:	cb 01       	movw	r24, r22
    5124:	8e a7       	std	Y+46, r24	; 0x2e
    5126:	9f a7       	std	Y+47, r25	; 0x2f
    5128:	a8 ab       	std	Y+48, r26	; 0x30
    512a:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    512c:	6e a5       	ldd	r22, Y+46	; 0x2e
    512e:	7f a5       	ldd	r23, Y+47	; 0x2f
    5130:	88 a9       	ldd	r24, Y+48	; 0x30
    5132:	99 a9       	ldd	r25, Y+49	; 0x31
    5134:	20 e0       	ldi	r18, 0x00	; 0
    5136:	30 e0       	ldi	r19, 0x00	; 0
    5138:	40 e8       	ldi	r20, 0x80	; 128
    513a:	5f e3       	ldi	r21, 0x3F	; 63
    513c:	0e 94 60 13 	call	0x26c0	; 0x26c0 <__ltsf2>
    5140:	88 23       	and	r24, r24
    5142:	2c f4       	brge	.+10     	; 0x514e <LCD_VidInit+0x4b2>
		__ticks = 1;
    5144:	81 e0       	ldi	r24, 0x01	; 1
    5146:	90 e0       	ldi	r25, 0x00	; 0
    5148:	9d a7       	std	Y+45, r25	; 0x2d
    514a:	8c a7       	std	Y+44, r24	; 0x2c
    514c:	3f c0       	rjmp	.+126    	; 0x51cc <LCD_VidInit+0x530>
	else if (__tmp > 65535)
    514e:	6e a5       	ldd	r22, Y+46	; 0x2e
    5150:	7f a5       	ldd	r23, Y+47	; 0x2f
    5152:	88 a9       	ldd	r24, Y+48	; 0x30
    5154:	99 a9       	ldd	r25, Y+49	; 0x31
    5156:	20 e0       	ldi	r18, 0x00	; 0
    5158:	3f ef       	ldi	r19, 0xFF	; 255
    515a:	4f e7       	ldi	r20, 0x7F	; 127
    515c:	57 e4       	ldi	r21, 0x47	; 71
    515e:	0e 94 00 13 	call	0x2600	; 0x2600 <__gtsf2>
    5162:	18 16       	cp	r1, r24
    5164:	4c f5       	brge	.+82     	; 0x51b8 <LCD_VidInit+0x51c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5166:	6a a9       	ldd	r22, Y+50	; 0x32
    5168:	7b a9       	ldd	r23, Y+51	; 0x33
    516a:	8c a9       	ldd	r24, Y+52	; 0x34
    516c:	9d a9       	ldd	r25, Y+53	; 0x35
    516e:	20 e0       	ldi	r18, 0x00	; 0
    5170:	30 e0       	ldi	r19, 0x00	; 0
    5172:	40 e2       	ldi	r20, 0x20	; 32
    5174:	51 e4       	ldi	r21, 0x41	; 65
    5176:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    517a:	dc 01       	movw	r26, r24
    517c:	cb 01       	movw	r24, r22
    517e:	bc 01       	movw	r22, r24
    5180:	cd 01       	movw	r24, r26
    5182:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    5186:	dc 01       	movw	r26, r24
    5188:	cb 01       	movw	r24, r22
    518a:	9d a7       	std	Y+45, r25	; 0x2d
    518c:	8c a7       	std	Y+44, r24	; 0x2c
    518e:	0f c0       	rjmp	.+30     	; 0x51ae <LCD_VidInit+0x512>
    5190:	88 ec       	ldi	r24, 0xC8	; 200
    5192:	90 e0       	ldi	r25, 0x00	; 0
    5194:	9b a7       	std	Y+43, r25	; 0x2b
    5196:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5198:	8a a5       	ldd	r24, Y+42	; 0x2a
    519a:	9b a5       	ldd	r25, Y+43	; 0x2b
    519c:	01 97       	sbiw	r24, 0x01	; 1
    519e:	f1 f7       	brne	.-4      	; 0x519c <LCD_VidInit+0x500>
    51a0:	9b a7       	std	Y+43, r25	; 0x2b
    51a2:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51a4:	8c a5       	ldd	r24, Y+44	; 0x2c
    51a6:	9d a5       	ldd	r25, Y+45	; 0x2d
    51a8:	01 97       	sbiw	r24, 0x01	; 1
    51aa:	9d a7       	std	Y+45, r25	; 0x2d
    51ac:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51ae:	8c a5       	ldd	r24, Y+44	; 0x2c
    51b0:	9d a5       	ldd	r25, Y+45	; 0x2d
    51b2:	00 97       	sbiw	r24, 0x00	; 0
    51b4:	69 f7       	brne	.-38     	; 0x5190 <LCD_VidInit+0x4f4>
    51b6:	24 c0       	rjmp	.+72     	; 0x5200 <LCD_VidInit+0x564>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51b8:	6e a5       	ldd	r22, Y+46	; 0x2e
    51ba:	7f a5       	ldd	r23, Y+47	; 0x2f
    51bc:	88 a9       	ldd	r24, Y+48	; 0x30
    51be:	99 a9       	ldd	r25, Y+49	; 0x31
    51c0:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    51c4:	dc 01       	movw	r26, r24
    51c6:	cb 01       	movw	r24, r22
    51c8:	9d a7       	std	Y+45, r25	; 0x2d
    51ca:	8c a7       	std	Y+44, r24	; 0x2c
    51cc:	8c a5       	ldd	r24, Y+44	; 0x2c
    51ce:	9d a5       	ldd	r25, Y+45	; 0x2d
    51d0:	99 a7       	std	Y+41, r25	; 0x29
    51d2:	88 a7       	std	Y+40, r24	; 0x28
    51d4:	88 a5       	ldd	r24, Y+40	; 0x28
    51d6:	99 a5       	ldd	r25, Y+41	; 0x29
    51d8:	01 97       	sbiw	r24, 0x01	; 1
    51da:	f1 f7       	brne	.-4      	; 0x51d8 <LCD_VidInit+0x53c>
    51dc:	99 a7       	std	Y+41, r25	; 0x29
    51de:	88 a7       	std	Y+40, r24	; 0x28
    51e0:	0f c0       	rjmp	.+30     	; 0x5200 <LCD_VidInit+0x564>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    51e2:	6f a9       	ldd	r22, Y+55	; 0x37
    51e4:	78 ad       	ldd	r23, Y+56	; 0x38
    51e6:	89 ad       	ldd	r24, Y+57	; 0x39
    51e8:	9a ad       	ldd	r25, Y+58	; 0x3a
    51ea:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    51ee:	dc 01       	movw	r26, r24
    51f0:	cb 01       	movw	r24, r22
    51f2:	8e ab       	std	Y+54, r24	; 0x36
    51f4:	8e a9       	ldd	r24, Y+54	; 0x36
    51f6:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    51f8:	8f a1       	ldd	r24, Y+39	; 0x27
    51fa:	8a 95       	dec	r24
    51fc:	f1 f7       	brne	.-4      	; 0x51fa <LCD_VidInit+0x55e>
    51fe:	8f a3       	std	Y+39, r24	; 0x27
	// Delay for more than 39 us
	_delay_us(40);
	// Send Entry Mode Set Command
	LCD_VidSendCommend(ENTERY_MODE);
    5200:	86 e0       	ldi	r24, 0x06	; 6
    5202:	0e 94 43 25 	call	0x4a86	; 0x4a86 <LCD_VidSendCommend>
    5206:	80 e0       	ldi	r24, 0x00	; 0
    5208:	90 e0       	ldi	r25, 0x00	; 0
    520a:	a0 e2       	ldi	r26, 0x20	; 32
    520c:	b2 e4       	ldi	r27, 0x42	; 66
    520e:	8b a3       	std	Y+35, r24	; 0x23
    5210:	9c a3       	std	Y+36, r25	; 0x24
    5212:	ad a3       	std	Y+37, r26	; 0x25
    5214:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5216:	6b a1       	ldd	r22, Y+35	; 0x23
    5218:	7c a1       	ldd	r23, Y+36	; 0x24
    521a:	8d a1       	ldd	r24, Y+37	; 0x25
    521c:	9e a1       	ldd	r25, Y+38	; 0x26
    521e:	2b ea       	ldi	r18, 0xAB	; 171
    5220:	3a ea       	ldi	r19, 0xAA	; 170
    5222:	4a e2       	ldi	r20, 0x2A	; 42
    5224:	50 e4       	ldi	r21, 0x40	; 64
    5226:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    522a:	dc 01       	movw	r26, r24
    522c:	cb 01       	movw	r24, r22
    522e:	8f 8f       	std	Y+31, r24	; 0x1f
    5230:	98 a3       	std	Y+32, r25	; 0x20
    5232:	a9 a3       	std	Y+33, r26	; 0x21
    5234:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    5236:	6f 8d       	ldd	r22, Y+31	; 0x1f
    5238:	78 a1       	ldd	r23, Y+32	; 0x20
    523a:	89 a1       	ldd	r24, Y+33	; 0x21
    523c:	9a a1       	ldd	r25, Y+34	; 0x22
    523e:	20 e0       	ldi	r18, 0x00	; 0
    5240:	30 e0       	ldi	r19, 0x00	; 0
    5242:	40 e8       	ldi	r20, 0x80	; 128
    5244:	5f e3       	ldi	r21, 0x3F	; 63
    5246:	0e 94 60 13 	call	0x26c0	; 0x26c0 <__ltsf2>
    524a:	88 23       	and	r24, r24
    524c:	1c f4       	brge	.+6      	; 0x5254 <LCD_VidInit+0x5b8>
		__ticks = 1;
    524e:	81 e0       	ldi	r24, 0x01	; 1
    5250:	8e 8f       	std	Y+30, r24	; 0x1e
    5252:	91 c0       	rjmp	.+290    	; 0x5376 <LCD_VidInit+0x6da>
	else if (__tmp > 255)
    5254:	6f 8d       	ldd	r22, Y+31	; 0x1f
    5256:	78 a1       	ldd	r23, Y+32	; 0x20
    5258:	89 a1       	ldd	r24, Y+33	; 0x21
    525a:	9a a1       	ldd	r25, Y+34	; 0x22
    525c:	20 e0       	ldi	r18, 0x00	; 0
    525e:	30 e0       	ldi	r19, 0x00	; 0
    5260:	4f e7       	ldi	r20, 0x7F	; 127
    5262:	53 e4       	ldi	r21, 0x43	; 67
    5264:	0e 94 00 13 	call	0x2600	; 0x2600 <__gtsf2>
    5268:	18 16       	cp	r1, r24
    526a:	0c f0       	brlt	.+2      	; 0x526e <LCD_VidInit+0x5d2>
    526c:	7b c0       	rjmp	.+246    	; 0x5364 <LCD_VidInit+0x6c8>
	{
		_delay_ms(__us / 1000.0);
    526e:	6b a1       	ldd	r22, Y+35	; 0x23
    5270:	7c a1       	ldd	r23, Y+36	; 0x24
    5272:	8d a1       	ldd	r24, Y+37	; 0x25
    5274:	9e a1       	ldd	r25, Y+38	; 0x26
    5276:	20 e0       	ldi	r18, 0x00	; 0
    5278:	30 e0       	ldi	r19, 0x00	; 0
    527a:	4a e7       	ldi	r20, 0x7A	; 122
    527c:	54 e4       	ldi	r21, 0x44	; 68
    527e:	0e 94 54 12 	call	0x24a8	; 0x24a8 <__divsf3>
    5282:	dc 01       	movw	r26, r24
    5284:	cb 01       	movw	r24, r22
    5286:	8a 8f       	std	Y+26, r24	; 0x1a
    5288:	9b 8f       	std	Y+27, r25	; 0x1b
    528a:	ac 8f       	std	Y+28, r26	; 0x1c
    528c:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    528e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    5290:	7b 8d       	ldd	r23, Y+27	; 0x1b
    5292:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5294:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5296:	20 e0       	ldi	r18, 0x00	; 0
    5298:	30 e0       	ldi	r19, 0x00	; 0
    529a:	4a ef       	ldi	r20, 0xFA	; 250
    529c:	54 e4       	ldi	r21, 0x44	; 68
    529e:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    52a2:	dc 01       	movw	r26, r24
    52a4:	cb 01       	movw	r24, r22
    52a6:	8e 8b       	std	Y+22, r24	; 0x16
    52a8:	9f 8b       	std	Y+23, r25	; 0x17
    52aa:	a8 8f       	std	Y+24, r26	; 0x18
    52ac:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    52ae:	6e 89       	ldd	r22, Y+22	; 0x16
    52b0:	7f 89       	ldd	r23, Y+23	; 0x17
    52b2:	88 8d       	ldd	r24, Y+24	; 0x18
    52b4:	99 8d       	ldd	r25, Y+25	; 0x19
    52b6:	20 e0       	ldi	r18, 0x00	; 0
    52b8:	30 e0       	ldi	r19, 0x00	; 0
    52ba:	40 e8       	ldi	r20, 0x80	; 128
    52bc:	5f e3       	ldi	r21, 0x3F	; 63
    52be:	0e 94 60 13 	call	0x26c0	; 0x26c0 <__ltsf2>
    52c2:	88 23       	and	r24, r24
    52c4:	2c f4       	brge	.+10     	; 0x52d0 <LCD_VidInit+0x634>
		__ticks = 1;
    52c6:	81 e0       	ldi	r24, 0x01	; 1
    52c8:	90 e0       	ldi	r25, 0x00	; 0
    52ca:	9d 8b       	std	Y+21, r25	; 0x15
    52cc:	8c 8b       	std	Y+20, r24	; 0x14
    52ce:	3f c0       	rjmp	.+126    	; 0x534e <LCD_VidInit+0x6b2>
	else if (__tmp > 65535)
    52d0:	6e 89       	ldd	r22, Y+22	; 0x16
    52d2:	7f 89       	ldd	r23, Y+23	; 0x17
    52d4:	88 8d       	ldd	r24, Y+24	; 0x18
    52d6:	99 8d       	ldd	r25, Y+25	; 0x19
    52d8:	20 e0       	ldi	r18, 0x00	; 0
    52da:	3f ef       	ldi	r19, 0xFF	; 255
    52dc:	4f e7       	ldi	r20, 0x7F	; 127
    52de:	57 e4       	ldi	r21, 0x47	; 71
    52e0:	0e 94 00 13 	call	0x2600	; 0x2600 <__gtsf2>
    52e4:	18 16       	cp	r1, r24
    52e6:	4c f5       	brge	.+82     	; 0x533a <LCD_VidInit+0x69e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52e8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    52ea:	7b 8d       	ldd	r23, Y+27	; 0x1b
    52ec:	8c 8d       	ldd	r24, Y+28	; 0x1c
    52ee:	9d 8d       	ldd	r25, Y+29	; 0x1d
    52f0:	20 e0       	ldi	r18, 0x00	; 0
    52f2:	30 e0       	ldi	r19, 0x00	; 0
    52f4:	40 e2       	ldi	r20, 0x20	; 32
    52f6:	51 e4       	ldi	r21, 0x41	; 65
    52f8:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    52fc:	dc 01       	movw	r26, r24
    52fe:	cb 01       	movw	r24, r22
    5300:	bc 01       	movw	r22, r24
    5302:	cd 01       	movw	r24, r26
    5304:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    5308:	dc 01       	movw	r26, r24
    530a:	cb 01       	movw	r24, r22
    530c:	9d 8b       	std	Y+21, r25	; 0x15
    530e:	8c 8b       	std	Y+20, r24	; 0x14
    5310:	0f c0       	rjmp	.+30     	; 0x5330 <LCD_VidInit+0x694>
    5312:	88 ec       	ldi	r24, 0xC8	; 200
    5314:	90 e0       	ldi	r25, 0x00	; 0
    5316:	9b 8b       	std	Y+19, r25	; 0x13
    5318:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    531a:	8a 89       	ldd	r24, Y+18	; 0x12
    531c:	9b 89       	ldd	r25, Y+19	; 0x13
    531e:	01 97       	sbiw	r24, 0x01	; 1
    5320:	f1 f7       	brne	.-4      	; 0x531e <LCD_VidInit+0x682>
    5322:	9b 8b       	std	Y+19, r25	; 0x13
    5324:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5326:	8c 89       	ldd	r24, Y+20	; 0x14
    5328:	9d 89       	ldd	r25, Y+21	; 0x15
    532a:	01 97       	sbiw	r24, 0x01	; 1
    532c:	9d 8b       	std	Y+21, r25	; 0x15
    532e:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5330:	8c 89       	ldd	r24, Y+20	; 0x14
    5332:	9d 89       	ldd	r25, Y+21	; 0x15
    5334:	00 97       	sbiw	r24, 0x00	; 0
    5336:	69 f7       	brne	.-38     	; 0x5312 <LCD_VidInit+0x676>
    5338:	24 c0       	rjmp	.+72     	; 0x5382 <LCD_VidInit+0x6e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    533a:	6e 89       	ldd	r22, Y+22	; 0x16
    533c:	7f 89       	ldd	r23, Y+23	; 0x17
    533e:	88 8d       	ldd	r24, Y+24	; 0x18
    5340:	99 8d       	ldd	r25, Y+25	; 0x19
    5342:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    5346:	dc 01       	movw	r26, r24
    5348:	cb 01       	movw	r24, r22
    534a:	9d 8b       	std	Y+21, r25	; 0x15
    534c:	8c 8b       	std	Y+20, r24	; 0x14
    534e:	8c 89       	ldd	r24, Y+20	; 0x14
    5350:	9d 89       	ldd	r25, Y+21	; 0x15
    5352:	99 8b       	std	Y+17, r25	; 0x11
    5354:	88 8b       	std	Y+16, r24	; 0x10
    5356:	88 89       	ldd	r24, Y+16	; 0x10
    5358:	99 89       	ldd	r25, Y+17	; 0x11
    535a:	01 97       	sbiw	r24, 0x01	; 1
    535c:	f1 f7       	brne	.-4      	; 0x535a <LCD_VidInit+0x6be>
    535e:	99 8b       	std	Y+17, r25	; 0x11
    5360:	88 8b       	std	Y+16, r24	; 0x10
    5362:	0f c0       	rjmp	.+30     	; 0x5382 <LCD_VidInit+0x6e6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5364:	6f 8d       	ldd	r22, Y+31	; 0x1f
    5366:	78 a1       	ldd	r23, Y+32	; 0x20
    5368:	89 a1       	ldd	r24, Y+33	; 0x21
    536a:	9a a1       	ldd	r25, Y+34	; 0x22
    536c:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    5370:	dc 01       	movw	r26, r24
    5372:	cb 01       	movw	r24, r22
    5374:	8e 8f       	std	Y+30, r24	; 0x1e
    5376:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5378:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    537a:	8f 85       	ldd	r24, Y+15	; 0x0f
    537c:	8a 95       	dec	r24
    537e:	f1 f7       	brne	.-4      	; 0x537c <LCD_VidInit+0x6e0>
    5380:	8f 87       	std	Y+15, r24	; 0x0f
	// Delay for more than 39 us
	_delay_us(40);
	// Send Clear Display Command
	LCD_VidSendCommend(DISPLAY_CLEAR);
    5382:	81 e0       	ldi	r24, 0x01	; 1
    5384:	0e 94 43 25 	call	0x4a86	; 0x4a86 <LCD_VidSendCommend>
    5388:	80 e0       	ldi	r24, 0x00	; 0
    538a:	90 e0       	ldi	r25, 0x00	; 0
    538c:	a0 e0       	ldi	r26, 0x00	; 0
    538e:	b0 e4       	ldi	r27, 0x40	; 64
    5390:	8b 87       	std	Y+11, r24	; 0x0b
    5392:	9c 87       	std	Y+12, r25	; 0x0c
    5394:	ad 87       	std	Y+13, r26	; 0x0d
    5396:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5398:	6b 85       	ldd	r22, Y+11	; 0x0b
    539a:	7c 85       	ldd	r23, Y+12	; 0x0c
    539c:	8d 85       	ldd	r24, Y+13	; 0x0d
    539e:	9e 85       	ldd	r25, Y+14	; 0x0e
    53a0:	20 e0       	ldi	r18, 0x00	; 0
    53a2:	30 e0       	ldi	r19, 0x00	; 0
    53a4:	4a ef       	ldi	r20, 0xFA	; 250
    53a6:	54 e4       	ldi	r21, 0x44	; 68
    53a8:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    53ac:	dc 01       	movw	r26, r24
    53ae:	cb 01       	movw	r24, r22
    53b0:	8f 83       	std	Y+7, r24	; 0x07
    53b2:	98 87       	std	Y+8, r25	; 0x08
    53b4:	a9 87       	std	Y+9, r26	; 0x09
    53b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    53b8:	6f 81       	ldd	r22, Y+7	; 0x07
    53ba:	78 85       	ldd	r23, Y+8	; 0x08
    53bc:	89 85       	ldd	r24, Y+9	; 0x09
    53be:	9a 85       	ldd	r25, Y+10	; 0x0a
    53c0:	20 e0       	ldi	r18, 0x00	; 0
    53c2:	30 e0       	ldi	r19, 0x00	; 0
    53c4:	40 e8       	ldi	r20, 0x80	; 128
    53c6:	5f e3       	ldi	r21, 0x3F	; 63
    53c8:	0e 94 60 13 	call	0x26c0	; 0x26c0 <__ltsf2>
    53cc:	88 23       	and	r24, r24
    53ce:	2c f4       	brge	.+10     	; 0x53da <LCD_VidInit+0x73e>
		__ticks = 1;
    53d0:	81 e0       	ldi	r24, 0x01	; 1
    53d2:	90 e0       	ldi	r25, 0x00	; 0
    53d4:	9e 83       	std	Y+6, r25	; 0x06
    53d6:	8d 83       	std	Y+5, r24	; 0x05
    53d8:	3f c0       	rjmp	.+126    	; 0x5458 <LCD_VidInit+0x7bc>
	else if (__tmp > 65535)
    53da:	6f 81       	ldd	r22, Y+7	; 0x07
    53dc:	78 85       	ldd	r23, Y+8	; 0x08
    53de:	89 85       	ldd	r24, Y+9	; 0x09
    53e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    53e2:	20 e0       	ldi	r18, 0x00	; 0
    53e4:	3f ef       	ldi	r19, 0xFF	; 255
    53e6:	4f e7       	ldi	r20, 0x7F	; 127
    53e8:	57 e4       	ldi	r21, 0x47	; 71
    53ea:	0e 94 00 13 	call	0x2600	; 0x2600 <__gtsf2>
    53ee:	18 16       	cp	r1, r24
    53f0:	4c f5       	brge	.+82     	; 0x5444 <LCD_VidInit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    53f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    53f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    53f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    53fa:	20 e0       	ldi	r18, 0x00	; 0
    53fc:	30 e0       	ldi	r19, 0x00	; 0
    53fe:	40 e2       	ldi	r20, 0x20	; 32
    5400:	51 e4       	ldi	r21, 0x41	; 65
    5402:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    5406:	dc 01       	movw	r26, r24
    5408:	cb 01       	movw	r24, r22
    540a:	bc 01       	movw	r22, r24
    540c:	cd 01       	movw	r24, r26
    540e:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    5412:	dc 01       	movw	r26, r24
    5414:	cb 01       	movw	r24, r22
    5416:	9e 83       	std	Y+6, r25	; 0x06
    5418:	8d 83       	std	Y+5, r24	; 0x05
    541a:	0f c0       	rjmp	.+30     	; 0x543a <LCD_VidInit+0x79e>
    541c:	88 ec       	ldi	r24, 0xC8	; 200
    541e:	90 e0       	ldi	r25, 0x00	; 0
    5420:	9c 83       	std	Y+4, r25	; 0x04
    5422:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5424:	8b 81       	ldd	r24, Y+3	; 0x03
    5426:	9c 81       	ldd	r25, Y+4	; 0x04
    5428:	01 97       	sbiw	r24, 0x01	; 1
    542a:	f1 f7       	brne	.-4      	; 0x5428 <LCD_VidInit+0x78c>
    542c:	9c 83       	std	Y+4, r25	; 0x04
    542e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5430:	8d 81       	ldd	r24, Y+5	; 0x05
    5432:	9e 81       	ldd	r25, Y+6	; 0x06
    5434:	01 97       	sbiw	r24, 0x01	; 1
    5436:	9e 83       	std	Y+6, r25	; 0x06
    5438:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    543a:	8d 81       	ldd	r24, Y+5	; 0x05
    543c:	9e 81       	ldd	r25, Y+6	; 0x06
    543e:	00 97       	sbiw	r24, 0x00	; 0
    5440:	69 f7       	brne	.-38     	; 0x541c <LCD_VidInit+0x780>
    5442:	14 c0       	rjmp	.+40     	; 0x546c <LCD_VidInit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5444:	6f 81       	ldd	r22, Y+7	; 0x07
    5446:	78 85       	ldd	r23, Y+8	; 0x08
    5448:	89 85       	ldd	r24, Y+9	; 0x09
    544a:	9a 85       	ldd	r25, Y+10	; 0x0a
    544c:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    5450:	dc 01       	movw	r26, r24
    5452:	cb 01       	movw	r24, r22
    5454:	9e 83       	std	Y+6, r25	; 0x06
    5456:	8d 83       	std	Y+5, r24	; 0x05
    5458:	8d 81       	ldd	r24, Y+5	; 0x05
    545a:	9e 81       	ldd	r25, Y+6	; 0x06
    545c:	9a 83       	std	Y+2, r25	; 0x02
    545e:	89 83       	std	Y+1, r24	; 0x01
    5460:	89 81       	ldd	r24, Y+1	; 0x01
    5462:	9a 81       	ldd	r25, Y+2	; 0x02
    5464:	01 97       	sbiw	r24, 0x01	; 1
    5466:	f1 f7       	brne	.-4      	; 0x5464 <LCD_VidInit+0x7c8>
    5468:	9a 83       	std	Y+2, r25	; 0x02
    546a:	89 83       	std	Y+1, r24	; 0x01
	// Send Clear Display Command
	LCD_VidSendCommend(DISPLAY_CLEAR);
	// Delay for more than 1.53 ms
	_delay_ms(2);
#endif
}
    546c:	cc 59       	subi	r28, 0x9C	; 156
    546e:	df 4f       	sbci	r29, 0xFF	; 255
    5470:	0f b6       	in	r0, 0x3f	; 63
    5472:	f8 94       	cli
    5474:	de bf       	out	0x3e, r29	; 62
    5476:	0f be       	out	0x3f, r0	; 63
    5478:	cd bf       	out	0x3d, r28	; 61
    547a:	cf 91       	pop	r28
    547c:	df 91       	pop	r29
    547e:	1f 91       	pop	r17
    5480:	0f 91       	pop	r16
    5482:	08 95       	ret

00005484 <LCD_VidSendChar>:

void LCD_VidSendChar(u8 Copy_U8Char){
    5484:	df 93       	push	r29
    5486:	cf 93       	push	r28
    5488:	cd b7       	in	r28, 0x3d	; 61
    548a:	de b7       	in	r29, 0x3e	; 62
    548c:	6d 97       	sbiw	r28, 0x1d	; 29
    548e:	0f b6       	in	r0, 0x3f	; 63
    5490:	f8 94       	cli
    5492:	de bf       	out	0x3e, r29	; 62
    5494:	0f be       	out	0x3f, r0	; 63
    5496:	cd bf       	out	0x3d, r28	; 61
    5498:	8d 8f       	std	Y+29, r24	; 0x1d

#ifdef EIGHT_BIT
	/******* to define RS / RW ***********/
	DIO_VidSetPinValue(CONTROL_PORT,RS,HIGH);
    549a:	80 e0       	ldi	r24, 0x00	; 0
    549c:	60 e0       	ldi	r22, 0x00	; 0
    549e:	41 e0       	ldi	r20, 0x01	; 1
    54a0:	0e 94 a8 19 	call	0x3350	; 0x3350 <DIO_VidSetPinValue>
	/*to define value of character on port*/
	DIO_VidSetPortValue(DATA_PORT,Copy_U8Char);
    54a4:	82 e0       	ldi	r24, 0x02	; 2
    54a6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    54a8:	0e 94 a8 1a 	call	0x3550	; 0x3550 <DIO_VidSetPortValue>
	/*********to make enable pulse*********/
	DIO_VidSetPinValue(CONTROL_PORT,E,HIGH);
    54ac:	80 e0       	ldi	r24, 0x00	; 0
    54ae:	61 e0       	ldi	r22, 0x01	; 1
    54b0:	41 e0       	ldi	r20, 0x01	; 1
    54b2:	0e 94 a8 19 	call	0x3350	; 0x3350 <DIO_VidSetPinValue>
    54b6:	80 e0       	ldi	r24, 0x00	; 0
    54b8:	90 e0       	ldi	r25, 0x00	; 0
    54ba:	a0 e8       	ldi	r26, 0x80	; 128
    54bc:	bf e3       	ldi	r27, 0x3F	; 63
    54be:	89 8f       	std	Y+25, r24	; 0x19
    54c0:	9a 8f       	std	Y+26, r25	; 0x1a
    54c2:	ab 8f       	std	Y+27, r26	; 0x1b
    54c4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    54c6:	69 8d       	ldd	r22, Y+25	; 0x19
    54c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    54ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    54cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    54ce:	20 e0       	ldi	r18, 0x00	; 0
    54d0:	30 e0       	ldi	r19, 0x00	; 0
    54d2:	4a ef       	ldi	r20, 0xFA	; 250
    54d4:	54 e4       	ldi	r21, 0x44	; 68
    54d6:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    54da:	dc 01       	movw	r26, r24
    54dc:	cb 01       	movw	r24, r22
    54de:	8d 8b       	std	Y+21, r24	; 0x15
    54e0:	9e 8b       	std	Y+22, r25	; 0x16
    54e2:	af 8b       	std	Y+23, r26	; 0x17
    54e4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    54e6:	6d 89       	ldd	r22, Y+21	; 0x15
    54e8:	7e 89       	ldd	r23, Y+22	; 0x16
    54ea:	8f 89       	ldd	r24, Y+23	; 0x17
    54ec:	98 8d       	ldd	r25, Y+24	; 0x18
    54ee:	20 e0       	ldi	r18, 0x00	; 0
    54f0:	30 e0       	ldi	r19, 0x00	; 0
    54f2:	40 e8       	ldi	r20, 0x80	; 128
    54f4:	5f e3       	ldi	r21, 0x3F	; 63
    54f6:	0e 94 60 13 	call	0x26c0	; 0x26c0 <__ltsf2>
    54fa:	88 23       	and	r24, r24
    54fc:	2c f4       	brge	.+10     	; 0x5508 <LCD_VidSendChar+0x84>
		__ticks = 1;
    54fe:	81 e0       	ldi	r24, 0x01	; 1
    5500:	90 e0       	ldi	r25, 0x00	; 0
    5502:	9c 8b       	std	Y+20, r25	; 0x14
    5504:	8b 8b       	std	Y+19, r24	; 0x13
    5506:	3f c0       	rjmp	.+126    	; 0x5586 <LCD_VidSendChar+0x102>
	else if (__tmp > 65535)
    5508:	6d 89       	ldd	r22, Y+21	; 0x15
    550a:	7e 89       	ldd	r23, Y+22	; 0x16
    550c:	8f 89       	ldd	r24, Y+23	; 0x17
    550e:	98 8d       	ldd	r25, Y+24	; 0x18
    5510:	20 e0       	ldi	r18, 0x00	; 0
    5512:	3f ef       	ldi	r19, 0xFF	; 255
    5514:	4f e7       	ldi	r20, 0x7F	; 127
    5516:	57 e4       	ldi	r21, 0x47	; 71
    5518:	0e 94 00 13 	call	0x2600	; 0x2600 <__gtsf2>
    551c:	18 16       	cp	r1, r24
    551e:	4c f5       	brge	.+82     	; 0x5572 <LCD_VidSendChar+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5520:	69 8d       	ldd	r22, Y+25	; 0x19
    5522:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5524:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5526:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5528:	20 e0       	ldi	r18, 0x00	; 0
    552a:	30 e0       	ldi	r19, 0x00	; 0
    552c:	40 e2       	ldi	r20, 0x20	; 32
    552e:	51 e4       	ldi	r21, 0x41	; 65
    5530:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    5534:	dc 01       	movw	r26, r24
    5536:	cb 01       	movw	r24, r22
    5538:	bc 01       	movw	r22, r24
    553a:	cd 01       	movw	r24, r26
    553c:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    5540:	dc 01       	movw	r26, r24
    5542:	cb 01       	movw	r24, r22
    5544:	9c 8b       	std	Y+20, r25	; 0x14
    5546:	8b 8b       	std	Y+19, r24	; 0x13
    5548:	0f c0       	rjmp	.+30     	; 0x5568 <LCD_VidSendChar+0xe4>
    554a:	88 ec       	ldi	r24, 0xC8	; 200
    554c:	90 e0       	ldi	r25, 0x00	; 0
    554e:	9a 8b       	std	Y+18, r25	; 0x12
    5550:	89 8b       	std	Y+17, r24	; 0x11
    5552:	89 89       	ldd	r24, Y+17	; 0x11
    5554:	9a 89       	ldd	r25, Y+18	; 0x12
    5556:	01 97       	sbiw	r24, 0x01	; 1
    5558:	f1 f7       	brne	.-4      	; 0x5556 <LCD_VidSendChar+0xd2>
    555a:	9a 8b       	std	Y+18, r25	; 0x12
    555c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    555e:	8b 89       	ldd	r24, Y+19	; 0x13
    5560:	9c 89       	ldd	r25, Y+20	; 0x14
    5562:	01 97       	sbiw	r24, 0x01	; 1
    5564:	9c 8b       	std	Y+20, r25	; 0x14
    5566:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5568:	8b 89       	ldd	r24, Y+19	; 0x13
    556a:	9c 89       	ldd	r25, Y+20	; 0x14
    556c:	00 97       	sbiw	r24, 0x00	; 0
    556e:	69 f7       	brne	.-38     	; 0x554a <LCD_VidSendChar+0xc6>
    5570:	14 c0       	rjmp	.+40     	; 0x559a <LCD_VidSendChar+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5572:	6d 89       	ldd	r22, Y+21	; 0x15
    5574:	7e 89       	ldd	r23, Y+22	; 0x16
    5576:	8f 89       	ldd	r24, Y+23	; 0x17
    5578:	98 8d       	ldd	r25, Y+24	; 0x18
    557a:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    557e:	dc 01       	movw	r26, r24
    5580:	cb 01       	movw	r24, r22
    5582:	9c 8b       	std	Y+20, r25	; 0x14
    5584:	8b 8b       	std	Y+19, r24	; 0x13
    5586:	8b 89       	ldd	r24, Y+19	; 0x13
    5588:	9c 89       	ldd	r25, Y+20	; 0x14
    558a:	98 8b       	std	Y+16, r25	; 0x10
    558c:	8f 87       	std	Y+15, r24	; 0x0f
    558e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5590:	98 89       	ldd	r25, Y+16	; 0x10
    5592:	01 97       	sbiw	r24, 0x01	; 1
    5594:	f1 f7       	brne	.-4      	; 0x5592 <LCD_VidSendChar+0x10e>
    5596:	98 8b       	std	Y+16, r25	; 0x10
    5598:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VidSetPinValue(CONTROL_PORT,E,LOW);
    559a:	80 e0       	ldi	r24, 0x00	; 0
    559c:	61 e0       	ldi	r22, 0x01	; 1
    559e:	40 e0       	ldi	r20, 0x00	; 0
    55a0:	0e 94 a8 19 	call	0x3350	; 0x3350 <DIO_VidSetPinValue>
    55a4:	80 e0       	ldi	r24, 0x00	; 0
    55a6:	90 e0       	ldi	r25, 0x00	; 0
    55a8:	a0 e0       	ldi	r26, 0x00	; 0
    55aa:	b0 e4       	ldi	r27, 0x40	; 64
    55ac:	8b 87       	std	Y+11, r24	; 0x0b
    55ae:	9c 87       	std	Y+12, r25	; 0x0c
    55b0:	ad 87       	std	Y+13, r26	; 0x0d
    55b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    55b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    55b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    55ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    55bc:	20 e0       	ldi	r18, 0x00	; 0
    55be:	30 e0       	ldi	r19, 0x00	; 0
    55c0:	4a ef       	ldi	r20, 0xFA	; 250
    55c2:	54 e4       	ldi	r21, 0x44	; 68
    55c4:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    55c8:	dc 01       	movw	r26, r24
    55ca:	cb 01       	movw	r24, r22
    55cc:	8f 83       	std	Y+7, r24	; 0x07
    55ce:	98 87       	std	Y+8, r25	; 0x08
    55d0:	a9 87       	std	Y+9, r26	; 0x09
    55d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    55d4:	6f 81       	ldd	r22, Y+7	; 0x07
    55d6:	78 85       	ldd	r23, Y+8	; 0x08
    55d8:	89 85       	ldd	r24, Y+9	; 0x09
    55da:	9a 85       	ldd	r25, Y+10	; 0x0a
    55dc:	20 e0       	ldi	r18, 0x00	; 0
    55de:	30 e0       	ldi	r19, 0x00	; 0
    55e0:	40 e8       	ldi	r20, 0x80	; 128
    55e2:	5f e3       	ldi	r21, 0x3F	; 63
    55e4:	0e 94 60 13 	call	0x26c0	; 0x26c0 <__ltsf2>
    55e8:	88 23       	and	r24, r24
    55ea:	2c f4       	brge	.+10     	; 0x55f6 <LCD_VidSendChar+0x172>
		__ticks = 1;
    55ec:	81 e0       	ldi	r24, 0x01	; 1
    55ee:	90 e0       	ldi	r25, 0x00	; 0
    55f0:	9e 83       	std	Y+6, r25	; 0x06
    55f2:	8d 83       	std	Y+5, r24	; 0x05
    55f4:	3f c0       	rjmp	.+126    	; 0x5674 <LCD_VidSendChar+0x1f0>
	else if (__tmp > 65535)
    55f6:	6f 81       	ldd	r22, Y+7	; 0x07
    55f8:	78 85       	ldd	r23, Y+8	; 0x08
    55fa:	89 85       	ldd	r24, Y+9	; 0x09
    55fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    55fe:	20 e0       	ldi	r18, 0x00	; 0
    5600:	3f ef       	ldi	r19, 0xFF	; 255
    5602:	4f e7       	ldi	r20, 0x7F	; 127
    5604:	57 e4       	ldi	r21, 0x47	; 71
    5606:	0e 94 00 13 	call	0x2600	; 0x2600 <__gtsf2>
    560a:	18 16       	cp	r1, r24
    560c:	4c f5       	brge	.+82     	; 0x5660 <LCD_VidSendChar+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    560e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5610:	7c 85       	ldd	r23, Y+12	; 0x0c
    5612:	8d 85       	ldd	r24, Y+13	; 0x0d
    5614:	9e 85       	ldd	r25, Y+14	; 0x0e
    5616:	20 e0       	ldi	r18, 0x00	; 0
    5618:	30 e0       	ldi	r19, 0x00	; 0
    561a:	40 e2       	ldi	r20, 0x20	; 32
    561c:	51 e4       	ldi	r21, 0x41	; 65
    561e:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    5622:	dc 01       	movw	r26, r24
    5624:	cb 01       	movw	r24, r22
    5626:	bc 01       	movw	r22, r24
    5628:	cd 01       	movw	r24, r26
    562a:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    562e:	dc 01       	movw	r26, r24
    5630:	cb 01       	movw	r24, r22
    5632:	9e 83       	std	Y+6, r25	; 0x06
    5634:	8d 83       	std	Y+5, r24	; 0x05
    5636:	0f c0       	rjmp	.+30     	; 0x5656 <LCD_VidSendChar+0x1d2>
    5638:	88 ec       	ldi	r24, 0xC8	; 200
    563a:	90 e0       	ldi	r25, 0x00	; 0
    563c:	9c 83       	std	Y+4, r25	; 0x04
    563e:	8b 83       	std	Y+3, r24	; 0x03
    5640:	8b 81       	ldd	r24, Y+3	; 0x03
    5642:	9c 81       	ldd	r25, Y+4	; 0x04
    5644:	01 97       	sbiw	r24, 0x01	; 1
    5646:	f1 f7       	brne	.-4      	; 0x5644 <LCD_VidSendChar+0x1c0>
    5648:	9c 83       	std	Y+4, r25	; 0x04
    564a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    564c:	8d 81       	ldd	r24, Y+5	; 0x05
    564e:	9e 81       	ldd	r25, Y+6	; 0x06
    5650:	01 97       	sbiw	r24, 0x01	; 1
    5652:	9e 83       	std	Y+6, r25	; 0x06
    5654:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5656:	8d 81       	ldd	r24, Y+5	; 0x05
    5658:	9e 81       	ldd	r25, Y+6	; 0x06
    565a:	00 97       	sbiw	r24, 0x00	; 0
    565c:	69 f7       	brne	.-38     	; 0x5638 <LCD_VidSendChar+0x1b4>
    565e:	14 c0       	rjmp	.+40     	; 0x5688 <LCD_VidSendChar+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5660:	6f 81       	ldd	r22, Y+7	; 0x07
    5662:	78 85       	ldd	r23, Y+8	; 0x08
    5664:	89 85       	ldd	r24, Y+9	; 0x09
    5666:	9a 85       	ldd	r25, Y+10	; 0x0a
    5668:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    566c:	dc 01       	movw	r26, r24
    566e:	cb 01       	movw	r24, r22
    5670:	9e 83       	std	Y+6, r25	; 0x06
    5672:	8d 83       	std	Y+5, r24	; 0x05
    5674:	8d 81       	ldd	r24, Y+5	; 0x05
    5676:	9e 81       	ldd	r25, Y+6	; 0x06
    5678:	9a 83       	std	Y+2, r25	; 0x02
    567a:	89 83       	std	Y+1, r24	; 0x01
    567c:	89 81       	ldd	r24, Y+1	; 0x01
    567e:	9a 81       	ldd	r25, Y+2	; 0x02
    5680:	01 97       	sbiw	r24, 0x01	; 1
    5682:	f1 f7       	brne	.-4      	; 0x5680 <LCD_VidSendChar+0x1fc>
    5684:	9a 83       	std	Y+2, r25	; 0x02
    5686:	89 83       	std	Y+1, r24	; 0x01
		DIO_VidSetPinValue(CONTROL_PORT,E,LOW);
		_delay_ms(2);

#endif

}
    5688:	6d 96       	adiw	r28, 0x1d	; 29
    568a:	0f b6       	in	r0, 0x3f	; 63
    568c:	f8 94       	cli
    568e:	de bf       	out	0x3e, r29	; 62
    5690:	0f be       	out	0x3f, r0	; 63
    5692:	cd bf       	out	0x3d, r28	; 61
    5694:	cf 91       	pop	r28
    5696:	df 91       	pop	r29
    5698:	08 95       	ret

0000569a <LCD_VidSendString>:

void LCD_VidSendString(u8 Copy_U8String[] ){
    569a:	df 93       	push	r29
    569c:	cf 93       	push	r28
    569e:	cd b7       	in	r28, 0x3d	; 61
    56a0:	de b7       	in	r29, 0x3e	; 62
    56a2:	6b 97       	sbiw	r28, 0x1b	; 27
    56a4:	0f b6       	in	r0, 0x3f	; 63
    56a6:	f8 94       	cli
    56a8:	de bf       	out	0x3e, r29	; 62
    56aa:	0f be       	out	0x3f, r0	; 63
    56ac:	cd bf       	out	0x3d, r28	; 61
    56ae:	9b 8f       	std	Y+27, r25	; 0x1b
    56b0:	8a 8f       	std	Y+26, r24	; 0x1a
	u8 i=0;
    56b2:	19 8e       	std	Y+25, r1	; 0x19
    56b4:	d2 c0       	rjmp	.+420    	; 0x585a <LCD_VidSendString+0x1c0>
	while( Copy_U8String[i] != '\0' ){
		if (15 == i){
    56b6:	89 8d       	ldd	r24, Y+25	; 0x19
    56b8:	8f 30       	cpi	r24, 0x0F	; 15
    56ba:	19 f4       	brne	.+6      	; 0x56c2 <LCD_VidSendString+0x28>
			LCD_VidSendCommend(LINE_2_START);
    56bc:	80 ec       	ldi	r24, 0xC0	; 192
    56be:	0e 94 43 25 	call	0x4a86	; 0x4a86 <LCD_VidSendCommend>
		}
		LCD_VidSendChar(Copy_U8String[i]);
    56c2:	89 8d       	ldd	r24, Y+25	; 0x19
    56c4:	28 2f       	mov	r18, r24
    56c6:	30 e0       	ldi	r19, 0x00	; 0
    56c8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    56ca:	9b 8d       	ldd	r25, Y+27	; 0x1b
    56cc:	fc 01       	movw	r30, r24
    56ce:	e2 0f       	add	r30, r18
    56d0:	f3 1f       	adc	r31, r19
    56d2:	80 81       	ld	r24, Z
    56d4:	0e 94 42 2a 	call	0x5484	; 0x5484 <LCD_VidSendChar>
    56d8:	80 e0       	ldi	r24, 0x00	; 0
    56da:	90 e0       	ldi	r25, 0x00	; 0
    56dc:	a0 e8       	ldi	r26, 0x80	; 128
    56de:	bf e3       	ldi	r27, 0x3F	; 63
    56e0:	8d 8b       	std	Y+21, r24	; 0x15
    56e2:	9e 8b       	std	Y+22, r25	; 0x16
    56e4:	af 8b       	std	Y+23, r26	; 0x17
    56e6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    56e8:	6d 89       	ldd	r22, Y+21	; 0x15
    56ea:	7e 89       	ldd	r23, Y+22	; 0x16
    56ec:	8f 89       	ldd	r24, Y+23	; 0x17
    56ee:	98 8d       	ldd	r25, Y+24	; 0x18
    56f0:	2b ea       	ldi	r18, 0xAB	; 171
    56f2:	3a ea       	ldi	r19, 0xAA	; 170
    56f4:	4a e2       	ldi	r20, 0x2A	; 42
    56f6:	50 e4       	ldi	r21, 0x40	; 64
    56f8:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    56fc:	dc 01       	movw	r26, r24
    56fe:	cb 01       	movw	r24, r22
    5700:	89 8b       	std	Y+17, r24	; 0x11
    5702:	9a 8b       	std	Y+18, r25	; 0x12
    5704:	ab 8b       	std	Y+19, r26	; 0x13
    5706:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5708:	69 89       	ldd	r22, Y+17	; 0x11
    570a:	7a 89       	ldd	r23, Y+18	; 0x12
    570c:	8b 89       	ldd	r24, Y+19	; 0x13
    570e:	9c 89       	ldd	r25, Y+20	; 0x14
    5710:	20 e0       	ldi	r18, 0x00	; 0
    5712:	30 e0       	ldi	r19, 0x00	; 0
    5714:	40 e8       	ldi	r20, 0x80	; 128
    5716:	5f e3       	ldi	r21, 0x3F	; 63
    5718:	0e 94 60 13 	call	0x26c0	; 0x26c0 <__ltsf2>
    571c:	88 23       	and	r24, r24
    571e:	1c f4       	brge	.+6      	; 0x5726 <LCD_VidSendString+0x8c>
		__ticks = 1;
    5720:	81 e0       	ldi	r24, 0x01	; 1
    5722:	88 8b       	std	Y+16, r24	; 0x10
    5724:	91 c0       	rjmp	.+290    	; 0x5848 <LCD_VidSendString+0x1ae>
	else if (__tmp > 255)
    5726:	69 89       	ldd	r22, Y+17	; 0x11
    5728:	7a 89       	ldd	r23, Y+18	; 0x12
    572a:	8b 89       	ldd	r24, Y+19	; 0x13
    572c:	9c 89       	ldd	r25, Y+20	; 0x14
    572e:	20 e0       	ldi	r18, 0x00	; 0
    5730:	30 e0       	ldi	r19, 0x00	; 0
    5732:	4f e7       	ldi	r20, 0x7F	; 127
    5734:	53 e4       	ldi	r21, 0x43	; 67
    5736:	0e 94 00 13 	call	0x2600	; 0x2600 <__gtsf2>
    573a:	18 16       	cp	r1, r24
    573c:	0c f0       	brlt	.+2      	; 0x5740 <LCD_VidSendString+0xa6>
    573e:	7b c0       	rjmp	.+246    	; 0x5836 <LCD_VidSendString+0x19c>
	{
		_delay_ms(__us / 1000.0);
    5740:	6d 89       	ldd	r22, Y+21	; 0x15
    5742:	7e 89       	ldd	r23, Y+22	; 0x16
    5744:	8f 89       	ldd	r24, Y+23	; 0x17
    5746:	98 8d       	ldd	r25, Y+24	; 0x18
    5748:	20 e0       	ldi	r18, 0x00	; 0
    574a:	30 e0       	ldi	r19, 0x00	; 0
    574c:	4a e7       	ldi	r20, 0x7A	; 122
    574e:	54 e4       	ldi	r21, 0x44	; 68
    5750:	0e 94 54 12 	call	0x24a8	; 0x24a8 <__divsf3>
    5754:	dc 01       	movw	r26, r24
    5756:	cb 01       	movw	r24, r22
    5758:	8c 87       	std	Y+12, r24	; 0x0c
    575a:	9d 87       	std	Y+13, r25	; 0x0d
    575c:	ae 87       	std	Y+14, r26	; 0x0e
    575e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5760:	6c 85       	ldd	r22, Y+12	; 0x0c
    5762:	7d 85       	ldd	r23, Y+13	; 0x0d
    5764:	8e 85       	ldd	r24, Y+14	; 0x0e
    5766:	9f 85       	ldd	r25, Y+15	; 0x0f
    5768:	20 e0       	ldi	r18, 0x00	; 0
    576a:	30 e0       	ldi	r19, 0x00	; 0
    576c:	4a ef       	ldi	r20, 0xFA	; 250
    576e:	54 e4       	ldi	r21, 0x44	; 68
    5770:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    5774:	dc 01       	movw	r26, r24
    5776:	cb 01       	movw	r24, r22
    5778:	88 87       	std	Y+8, r24	; 0x08
    577a:	99 87       	std	Y+9, r25	; 0x09
    577c:	aa 87       	std	Y+10, r26	; 0x0a
    577e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    5780:	68 85       	ldd	r22, Y+8	; 0x08
    5782:	79 85       	ldd	r23, Y+9	; 0x09
    5784:	8a 85       	ldd	r24, Y+10	; 0x0a
    5786:	9b 85       	ldd	r25, Y+11	; 0x0b
    5788:	20 e0       	ldi	r18, 0x00	; 0
    578a:	30 e0       	ldi	r19, 0x00	; 0
    578c:	40 e8       	ldi	r20, 0x80	; 128
    578e:	5f e3       	ldi	r21, 0x3F	; 63
    5790:	0e 94 60 13 	call	0x26c0	; 0x26c0 <__ltsf2>
    5794:	88 23       	and	r24, r24
    5796:	2c f4       	brge	.+10     	; 0x57a2 <LCD_VidSendString+0x108>
		__ticks = 1;
    5798:	81 e0       	ldi	r24, 0x01	; 1
    579a:	90 e0       	ldi	r25, 0x00	; 0
    579c:	9f 83       	std	Y+7, r25	; 0x07
    579e:	8e 83       	std	Y+6, r24	; 0x06
    57a0:	3f c0       	rjmp	.+126    	; 0x5820 <LCD_VidSendString+0x186>
	else if (__tmp > 65535)
    57a2:	68 85       	ldd	r22, Y+8	; 0x08
    57a4:	79 85       	ldd	r23, Y+9	; 0x09
    57a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    57a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    57aa:	20 e0       	ldi	r18, 0x00	; 0
    57ac:	3f ef       	ldi	r19, 0xFF	; 255
    57ae:	4f e7       	ldi	r20, 0x7F	; 127
    57b0:	57 e4       	ldi	r21, 0x47	; 71
    57b2:	0e 94 00 13 	call	0x2600	; 0x2600 <__gtsf2>
    57b6:	18 16       	cp	r1, r24
    57b8:	4c f5       	brge	.+82     	; 0x580c <LCD_VidSendString+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57ba:	6c 85       	ldd	r22, Y+12	; 0x0c
    57bc:	7d 85       	ldd	r23, Y+13	; 0x0d
    57be:	8e 85       	ldd	r24, Y+14	; 0x0e
    57c0:	9f 85       	ldd	r25, Y+15	; 0x0f
    57c2:	20 e0       	ldi	r18, 0x00	; 0
    57c4:	30 e0       	ldi	r19, 0x00	; 0
    57c6:	40 e2       	ldi	r20, 0x20	; 32
    57c8:	51 e4       	ldi	r21, 0x41	; 65
    57ca:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    57ce:	dc 01       	movw	r26, r24
    57d0:	cb 01       	movw	r24, r22
    57d2:	bc 01       	movw	r22, r24
    57d4:	cd 01       	movw	r24, r26
    57d6:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    57da:	dc 01       	movw	r26, r24
    57dc:	cb 01       	movw	r24, r22
    57de:	9f 83       	std	Y+7, r25	; 0x07
    57e0:	8e 83       	std	Y+6, r24	; 0x06
    57e2:	0f c0       	rjmp	.+30     	; 0x5802 <LCD_VidSendString+0x168>
    57e4:	88 ec       	ldi	r24, 0xC8	; 200
    57e6:	90 e0       	ldi	r25, 0x00	; 0
    57e8:	9d 83       	std	Y+5, r25	; 0x05
    57ea:	8c 83       	std	Y+4, r24	; 0x04
    57ec:	8c 81       	ldd	r24, Y+4	; 0x04
    57ee:	9d 81       	ldd	r25, Y+5	; 0x05
    57f0:	01 97       	sbiw	r24, 0x01	; 1
    57f2:	f1 f7       	brne	.-4      	; 0x57f0 <LCD_VidSendString+0x156>
    57f4:	9d 83       	std	Y+5, r25	; 0x05
    57f6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57f8:	8e 81       	ldd	r24, Y+6	; 0x06
    57fa:	9f 81       	ldd	r25, Y+7	; 0x07
    57fc:	01 97       	sbiw	r24, 0x01	; 1
    57fe:	9f 83       	std	Y+7, r25	; 0x07
    5800:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5802:	8e 81       	ldd	r24, Y+6	; 0x06
    5804:	9f 81       	ldd	r25, Y+7	; 0x07
    5806:	00 97       	sbiw	r24, 0x00	; 0
    5808:	69 f7       	brne	.-38     	; 0x57e4 <LCD_VidSendString+0x14a>
    580a:	24 c0       	rjmp	.+72     	; 0x5854 <LCD_VidSendString+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    580c:	68 85       	ldd	r22, Y+8	; 0x08
    580e:	79 85       	ldd	r23, Y+9	; 0x09
    5810:	8a 85       	ldd	r24, Y+10	; 0x0a
    5812:	9b 85       	ldd	r25, Y+11	; 0x0b
    5814:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    5818:	dc 01       	movw	r26, r24
    581a:	cb 01       	movw	r24, r22
    581c:	9f 83       	std	Y+7, r25	; 0x07
    581e:	8e 83       	std	Y+6, r24	; 0x06
    5820:	8e 81       	ldd	r24, Y+6	; 0x06
    5822:	9f 81       	ldd	r25, Y+7	; 0x07
    5824:	9b 83       	std	Y+3, r25	; 0x03
    5826:	8a 83       	std	Y+2, r24	; 0x02
    5828:	8a 81       	ldd	r24, Y+2	; 0x02
    582a:	9b 81       	ldd	r25, Y+3	; 0x03
    582c:	01 97       	sbiw	r24, 0x01	; 1
    582e:	f1 f7       	brne	.-4      	; 0x582c <LCD_VidSendString+0x192>
    5830:	9b 83       	std	Y+3, r25	; 0x03
    5832:	8a 83       	std	Y+2, r24	; 0x02
    5834:	0f c0       	rjmp	.+30     	; 0x5854 <LCD_VidSendString+0x1ba>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5836:	69 89       	ldd	r22, Y+17	; 0x11
    5838:	7a 89       	ldd	r23, Y+18	; 0x12
    583a:	8b 89       	ldd	r24, Y+19	; 0x13
    583c:	9c 89       	ldd	r25, Y+20	; 0x14
    583e:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    5842:	dc 01       	movw	r26, r24
    5844:	cb 01       	movw	r24, r22
    5846:	88 8b       	std	Y+16, r24	; 0x10
    5848:	88 89       	ldd	r24, Y+16	; 0x10
    584a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    584c:	89 81       	ldd	r24, Y+1	; 0x01
    584e:	8a 95       	dec	r24
    5850:	f1 f7       	brne	.-4      	; 0x584e <LCD_VidSendString+0x1b4>
    5852:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(1);
		i++;
    5854:	89 8d       	ldd	r24, Y+25	; 0x19
    5856:	8f 5f       	subi	r24, 0xFF	; 255
    5858:	89 8f       	std	Y+25, r24	; 0x19

}

void LCD_VidSendString(u8 Copy_U8String[] ){
	u8 i=0;
	while( Copy_U8String[i] != '\0' ){
    585a:	89 8d       	ldd	r24, Y+25	; 0x19
    585c:	28 2f       	mov	r18, r24
    585e:	30 e0       	ldi	r19, 0x00	; 0
    5860:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5862:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5864:	fc 01       	movw	r30, r24
    5866:	e2 0f       	add	r30, r18
    5868:	f3 1f       	adc	r31, r19
    586a:	80 81       	ld	r24, Z
    586c:	88 23       	and	r24, r24
    586e:	09 f0       	breq	.+2      	; 0x5872 <LCD_VidSendString+0x1d8>
    5870:	22 cf       	rjmp	.-444    	; 0x56b6 <LCD_VidSendString+0x1c>
		}
		LCD_VidSendChar(Copy_U8String[i]);
		_delay_us(1);
		i++;
	}//end while
}//end FUNC LCD_VidSendString
    5872:	6b 96       	adiw	r28, 0x1b	; 27
    5874:	0f b6       	in	r0, 0x3f	; 63
    5876:	f8 94       	cli
    5878:	de bf       	out	0x3e, r29	; 62
    587a:	0f be       	out	0x3f, r0	; 63
    587c:	cd bf       	out	0x3d, r28	; 61
    587e:	cf 91       	pop	r28
    5880:	df 91       	pop	r29
    5882:	08 95       	ret

00005884 <LCD_U32Pow>:

u32 LCD_U32Pow(u8 Copy_U8Base , u8 Copy_U8Bow ){
    5884:	df 93       	push	r29
    5886:	cf 93       	push	r28
    5888:	00 d0       	rcall	.+0      	; 0x588a <LCD_U32Pow+0x6>
    588a:	00 d0       	rcall	.+0      	; 0x588c <LCD_U32Pow+0x8>
    588c:	00 d0       	rcall	.+0      	; 0x588e <LCD_U32Pow+0xa>
    588e:	cd b7       	in	r28, 0x3d	; 61
    5890:	de b7       	in	r29, 0x3e	; 62
    5892:	8d 83       	std	Y+5, r24	; 0x05
    5894:	6e 83       	std	Y+6, r22	; 0x06
  u32 local_res = 1 ;
    5896:	81 e0       	ldi	r24, 0x01	; 1
    5898:	90 e0       	ldi	r25, 0x00	; 0
    589a:	a0 e0       	ldi	r26, 0x00	; 0
    589c:	b0 e0       	ldi	r27, 0x00	; 0
    589e:	89 83       	std	Y+1, r24	; 0x01
    58a0:	9a 83       	std	Y+2, r25	; 0x02
    58a2:	ab 83       	std	Y+3, r26	; 0x03
    58a4:	bc 83       	std	Y+4, r27	; 0x04
    58a6:	16 c0       	rjmp	.+44     	; 0x58d4 <LCD_U32Pow+0x50>
  while (Copy_U8Bow >0 ){
	  local_res *= Copy_U8Base ;
    58a8:	8d 81       	ldd	r24, Y+5	; 0x05
    58aa:	28 2f       	mov	r18, r24
    58ac:	30 e0       	ldi	r19, 0x00	; 0
    58ae:	40 e0       	ldi	r20, 0x00	; 0
    58b0:	50 e0       	ldi	r21, 0x00	; 0
    58b2:	89 81       	ldd	r24, Y+1	; 0x01
    58b4:	9a 81       	ldd	r25, Y+2	; 0x02
    58b6:	ab 81       	ldd	r26, Y+3	; 0x03
    58b8:	bc 81       	ldd	r27, Y+4	; 0x04
    58ba:	bc 01       	movw	r22, r24
    58bc:	cd 01       	movw	r24, r26
    58be:	0e 94 fa 39 	call	0x73f4	; 0x73f4 <__mulsi3>
    58c2:	dc 01       	movw	r26, r24
    58c4:	cb 01       	movw	r24, r22
    58c6:	89 83       	std	Y+1, r24	; 0x01
    58c8:	9a 83       	std	Y+2, r25	; 0x02
    58ca:	ab 83       	std	Y+3, r26	; 0x03
    58cc:	bc 83       	std	Y+4, r27	; 0x04
	  Copy_U8Bow--;
    58ce:	8e 81       	ldd	r24, Y+6	; 0x06
    58d0:	81 50       	subi	r24, 0x01	; 1
    58d2:	8e 83       	std	Y+6, r24	; 0x06
	}//end while
}//end FUNC LCD_VidSendString

u32 LCD_U32Pow(u8 Copy_U8Base , u8 Copy_U8Bow ){
  u32 local_res = 1 ;
  while (Copy_U8Bow >0 ){
    58d4:	8e 81       	ldd	r24, Y+6	; 0x06
    58d6:	88 23       	and	r24, r24
    58d8:	39 f7       	brne	.-50     	; 0x58a8 <LCD_U32Pow+0x24>
	  local_res *= Copy_U8Base ;
	  Copy_U8Bow--;
  }
  return  local_res ;
    58da:	89 81       	ldd	r24, Y+1	; 0x01
    58dc:	9a 81       	ldd	r25, Y+2	; 0x02
    58de:	ab 81       	ldd	r26, Y+3	; 0x03
    58e0:	bc 81       	ldd	r27, Y+4	; 0x04
}
    58e2:	bc 01       	movw	r22, r24
    58e4:	cd 01       	movw	r24, r26
    58e6:	26 96       	adiw	r28, 0x06	; 6
    58e8:	0f b6       	in	r0, 0x3f	; 63
    58ea:	f8 94       	cli
    58ec:	de bf       	out	0x3e, r29	; 62
    58ee:	0f be       	out	0x3f, r0	; 63
    58f0:	cd bf       	out	0x3d, r28	; 61
    58f2:	cf 91       	pop	r28
    58f4:	df 91       	pop	r29
    58f6:	08 95       	ret

000058f8 <LCD_VidPrintVar>:

void LCD_VidPrintVar(u64 Copy_U8Var){
    58f8:	2f 92       	push	r2
    58fa:	3f 92       	push	r3
    58fc:	4f 92       	push	r4
    58fe:	5f 92       	push	r5
    5900:	6f 92       	push	r6
    5902:	7f 92       	push	r7
    5904:	8f 92       	push	r8
    5906:	9f 92       	push	r9
    5908:	af 92       	push	r10
    590a:	bf 92       	push	r11
    590c:	cf 92       	push	r12
    590e:	df 92       	push	r13
    5910:	ef 92       	push	r14
    5912:	ff 92       	push	r15
    5914:	0f 93       	push	r16
    5916:	1f 93       	push	r17
    5918:	df 93       	push	r29
    591a:	cf 93       	push	r28
    591c:	cd b7       	in	r28, 0x3d	; 61
    591e:	de b7       	in	r29, 0x3e	; 62
    5920:	c5 54       	subi	r28, 0x45	; 69
    5922:	d0 40       	sbci	r29, 0x00	; 0
    5924:	0f b6       	in	r0, 0x3f	; 63
    5926:	f8 94       	cli
    5928:	de bf       	out	0x3e, r29	; 62
    592a:	0f be       	out	0x3f, r0	; 63
    592c:	cd bf       	out	0x3d, r28	; 61
    592e:	2b 87       	std	Y+11, r18	; 0x0b
    5930:	3c 87       	std	Y+12, r19	; 0x0c
    5932:	4d 87       	std	Y+13, r20	; 0x0d
    5934:	5e 87       	std	Y+14, r21	; 0x0e
    5936:	6f 87       	std	Y+15, r22	; 0x0f
    5938:	78 8b       	std	Y+16, r23	; 0x10
    593a:	89 8b       	std	Y+17, r24	; 0x11
    593c:	9a 8b       	std	Y+18, r25	; 0x12
    u64 local_num = 0 ;
    593e:	1b 82       	std	Y+3, r1	; 0x03
    5940:	1c 82       	std	Y+4, r1	; 0x04
    5942:	1d 82       	std	Y+5, r1	; 0x05
    5944:	1e 82       	std	Y+6, r1	; 0x06
    5946:	1f 82       	std	Y+7, r1	; 0x07
    5948:	18 86       	std	Y+8, r1	; 0x08
    594a:	19 86       	std	Y+9, r1	; 0x09
    594c:	1a 86       	std	Y+10, r1	; 0x0a
    u8 i = 0 ;
    594e:	1a 82       	std	Y+2, r1	; 0x02
    // to check if it 0
	if (0 == Copy_U8Var){
    5950:	8b 85       	ldd	r24, Y+11	; 0x0b
    5952:	9c 85       	ldd	r25, Y+12	; 0x0c
    5954:	89 2b       	or	r24, r25
    5956:	9d 85       	ldd	r25, Y+13	; 0x0d
    5958:	89 2b       	or	r24, r25
    595a:	9e 85       	ldd	r25, Y+14	; 0x0e
    595c:	89 2b       	or	r24, r25
    595e:	9f 85       	ldd	r25, Y+15	; 0x0f
    5960:	89 2b       	or	r24, r25
    5962:	98 89       	ldd	r25, Y+16	; 0x10
    5964:	89 2b       	or	r24, r25
    5966:	99 89       	ldd	r25, Y+17	; 0x11
    5968:	89 2b       	or	r24, r25
    596a:	9a 89       	ldd	r25, Y+18	; 0x12
    596c:	89 2b       	or	r24, r25
    596e:	88 23       	and	r24, r24
    5970:	39 f4       	brne	.+14     	; 0x5980 <LCD_VidPrintVar+0x88>
		LCD_VidSendChar('0');
    5972:	80 e3       	ldi	r24, 0x30	; 48
    5974:	0e 94 42 2a 	call	0x5484	; 0x5484 <LCD_VidSendChar>
    5978:	43 c2       	rjmp	.+1158   	; 0x5e00 <LCD_VidPrintVar+0x508>
		return ;
	}//end if

	// to know the count of digit in the number
	while (  Copy_U8Var / (LCD_U32Pow(10,i) )  != 0 ){
		i++ ;
    597a:	8a 81       	ldd	r24, Y+2	; 0x02
    597c:	8f 5f       	subi	r24, 0xFF	; 255
    597e:	8a 83       	std	Y+2, r24	; 0x02
		LCD_VidSendChar('0');
		return ;
	}//end if

	// to know the count of digit in the number
	while (  Copy_U8Var / (LCD_U32Pow(10,i) )  != 0 ){
    5980:	8a e0       	ldi	r24, 0x0A	; 10
    5982:	6a 81       	ldd	r22, Y+2	; 0x02
    5984:	0e 94 42 2c 	call	0x5884	; 0x5884 <LCD_U32Pow>
    5988:	dc 01       	movw	r26, r24
    598a:	cb 01       	movw	r24, r22
    598c:	1c 01       	movw	r2, r24
    598e:	2d 01       	movw	r4, r26
    5990:	66 24       	eor	r6, r6
    5992:	77 24       	eor	r7, r7
    5994:	43 01       	movw	r8, r6
    5996:	2b 85       	ldd	r18, Y+11	; 0x0b
    5998:	3c 85       	ldd	r19, Y+12	; 0x0c
    599a:	4d 85       	ldd	r20, Y+13	; 0x0d
    599c:	5e 85       	ldd	r21, Y+14	; 0x0e
    599e:	6f 85       	ldd	r22, Y+15	; 0x0f
    59a0:	78 89       	ldd	r23, Y+16	; 0x10
    59a2:	89 89       	ldd	r24, Y+17	; 0x11
    59a4:	9a 89       	ldd	r25, Y+18	; 0x12
    59a6:	a2 2c       	mov	r10, r2
    59a8:	b3 2c       	mov	r11, r3
    59aa:	c4 2c       	mov	r12, r4
    59ac:	d5 2c       	mov	r13, r5
    59ae:	e6 2c       	mov	r14, r6
    59b0:	f7 2c       	mov	r15, r7
    59b2:	08 2d       	mov	r16, r8
    59b4:	19 2d       	mov	r17, r9
    59b6:	0e 94 cb 02 	call	0x596	; 0x596 <__udivdi3>
    59ba:	a2 2e       	mov	r10, r18
    59bc:	b3 2e       	mov	r11, r19
    59be:	c4 2e       	mov	r12, r20
    59c0:	d5 2e       	mov	r13, r21
    59c2:	e6 2e       	mov	r14, r22
    59c4:	f7 2e       	mov	r15, r23
    59c6:	08 2f       	mov	r16, r24
    59c8:	19 2f       	mov	r17, r25
    59ca:	2a 2d       	mov	r18, r10
    59cc:	3b 2d       	mov	r19, r11
    59ce:	4c 2d       	mov	r20, r12
    59d0:	5d 2d       	mov	r21, r13
    59d2:	6e 2d       	mov	r22, r14
    59d4:	7f 2d       	mov	r23, r15
    59d6:	80 2f       	mov	r24, r16
    59d8:	91 2f       	mov	r25, r17
    59da:	e2 2f       	mov	r30, r18
    59dc:	e3 2b       	or	r30, r19
    59de:	e4 2b       	or	r30, r20
    59e0:	e5 2b       	or	r30, r21
    59e2:	e6 2b       	or	r30, r22
    59e4:	e7 2b       	or	r30, r23
    59e6:	e8 2b       	or	r30, r24
    59e8:	e9 2b       	or	r30, r25
    59ea:	ee 23       	and	r30, r30
    59ec:	31 f6       	brne	.-116    	; 0x597a <LCD_VidPrintVar+0x82>
		i++ ;
	}

	s8 copy_i = i-1 ;
    59ee:	8a 81       	ldd	r24, Y+2	; 0x02
    59f0:	81 50       	subi	r24, 0x01	; 1
    59f2:	89 83       	std	Y+1, r24	; 0x01
    59f4:	9b c1       	rjmp	.+822    	; 0x5d2c <LCD_VidPrintVar+0x434>

	// to reverse the arrang of digits in num
	while ( copy_i >= 0 ){
		local_num += (Copy_U8Var % 10) * ( LCD_U32Pow(10,copy_i) ) ;
    59f6:	ab 84       	ldd	r10, Y+11	; 0x0b
    59f8:	bc 84       	ldd	r11, Y+12	; 0x0c
    59fa:	cd 84       	ldd	r12, Y+13	; 0x0d
    59fc:	de 84       	ldd	r13, Y+14	; 0x0e
    59fe:	ef 84       	ldd	r14, Y+15	; 0x0f
    5a00:	f8 88       	ldd	r15, Y+16	; 0x10
    5a02:	09 89       	ldd	r16, Y+17	; 0x11
    5a04:	1a 89       	ldd	r17, Y+18	; 0x12
    5a06:	2a 2d       	mov	r18, r10
    5a08:	3b 2d       	mov	r19, r11
    5a0a:	4c 2d       	mov	r20, r12
    5a0c:	5d 2d       	mov	r21, r13
    5a0e:	6e 2d       	mov	r22, r14
    5a10:	7f 2d       	mov	r23, r15
    5a12:	80 2f       	mov	r24, r16
    5a14:	91 2f       	mov	r25, r17
    5a16:	0f 2e       	mov	r0, r31
    5a18:	fa e0       	ldi	r31, 0x0A	; 10
    5a1a:	af 2e       	mov	r10, r31
    5a1c:	f0 2d       	mov	r31, r0
    5a1e:	bb 24       	eor	r11, r11
    5a20:	cc 24       	eor	r12, r12
    5a22:	dd 24       	eor	r13, r13
    5a24:	ee 24       	eor	r14, r14
    5a26:	ff 24       	eor	r15, r15
    5a28:	00 e0       	ldi	r16, 0x00	; 0
    5a2a:	10 e0       	ldi	r17, 0x00	; 0
    5a2c:	0e 94 40 09 	call	0x1280	; 0x1280 <__umoddi3>
    5a30:	a2 2e       	mov	r10, r18
    5a32:	b3 2e       	mov	r11, r19
    5a34:	c4 2e       	mov	r12, r20
    5a36:	d5 2e       	mov	r13, r21
    5a38:	e6 2e       	mov	r14, r22
    5a3a:	f7 2e       	mov	r15, r23
    5a3c:	08 2f       	mov	r16, r24
    5a3e:	19 2f       	mov	r17, r25
    5a40:	2a 2c       	mov	r2, r10
    5a42:	3b 2c       	mov	r3, r11
    5a44:	4c 2c       	mov	r4, r12
    5a46:	5d 2c       	mov	r5, r13
    5a48:	6e 2c       	mov	r6, r14
    5a4a:	7f 2c       	mov	r7, r15
    5a4c:	80 2e       	mov	r8, r16
    5a4e:	91 2e       	mov	r9, r17
    5a50:	99 81       	ldd	r25, Y+1	; 0x01
    5a52:	8a e0       	ldi	r24, 0x0A	; 10
    5a54:	69 2f       	mov	r22, r25
    5a56:	0e 94 42 2c 	call	0x5884	; 0x5884 <LCD_U32Pow>
    5a5a:	dc 01       	movw	r26, r24
    5a5c:	cb 01       	movw	r24, r22
    5a5e:	8c 01       	movw	r16, r24
    5a60:	9d 01       	movw	r18, r26
    5a62:	40 e0       	ldi	r20, 0x00	; 0
    5a64:	50 e0       	ldi	r21, 0x00	; 0
    5a66:	60 e0       	ldi	r22, 0x00	; 0
    5a68:	70 e0       	ldi	r23, 0x00	; 0
    5a6a:	0b 8f       	std	Y+27, r16	; 0x1b
    5a6c:	1c 8f       	std	Y+28, r17	; 0x1c
    5a6e:	2d 8f       	std	Y+29, r18	; 0x1d
    5a70:	3e 8f       	std	Y+30, r19	; 0x1e
    5a72:	4f 8f       	std	Y+31, r20	; 0x1f
    5a74:	58 a3       	std	Y+32, r21	; 0x20
    5a76:	69 a3       	std	Y+33, r22	; 0x21
    5a78:	7a a3       	std	Y+34, r23	; 0x22
    5a7a:	22 2d       	mov	r18, r2
    5a7c:	33 2d       	mov	r19, r3
    5a7e:	44 2d       	mov	r20, r4
    5a80:	55 2d       	mov	r21, r5
    5a82:	66 2d       	mov	r22, r6
    5a84:	77 2d       	mov	r23, r7
    5a86:	88 2d       	mov	r24, r8
    5a88:	99 2d       	mov	r25, r9
    5a8a:	ab 8c       	ldd	r10, Y+27	; 0x1b
    5a8c:	bc 8c       	ldd	r11, Y+28	; 0x1c
    5a8e:	cd 8c       	ldd	r12, Y+29	; 0x1d
    5a90:	de 8c       	ldd	r13, Y+30	; 0x1e
    5a92:	ef 8c       	ldd	r14, Y+31	; 0x1f
    5a94:	f8 a0       	ldd	r15, Y+32	; 0x20
    5a96:	09 a1       	ldd	r16, Y+33	; 0x21
    5a98:	1a a1       	ldd	r17, Y+34	; 0x22
    5a9a:	0e 94 49 00 	call	0x92	; 0x92 <__muldi3>
    5a9e:	a2 2e       	mov	r10, r18
    5aa0:	b3 2e       	mov	r11, r19
    5aa2:	c4 2e       	mov	r12, r20
    5aa4:	d5 2e       	mov	r13, r21
    5aa6:	e6 2e       	mov	r14, r22
    5aa8:	f7 2e       	mov	r15, r23
    5aaa:	08 2f       	mov	r16, r24
    5aac:	19 2f       	mov	r17, r25
    5aae:	ab 8a       	std	Y+19, r10	; 0x13
    5ab0:	bc 8a       	std	Y+20, r11	; 0x14
    5ab2:	cd 8a       	std	Y+21, r12	; 0x15
    5ab4:	de 8a       	std	Y+22, r13	; 0x16
    5ab6:	ef 8a       	std	Y+23, r14	; 0x17
    5ab8:	f8 8e       	std	Y+24, r15	; 0x18
    5aba:	09 8f       	std	Y+25, r16	; 0x19
    5abc:	1a 8f       	std	Y+26, r17	; 0x1a
    5abe:	1b 81       	ldd	r17, Y+3	; 0x03
    5ac0:	1b a3       	std	Y+35, r17	; 0x23
    5ac2:	2c 81       	ldd	r18, Y+4	; 0x04
    5ac4:	2c a3       	std	Y+36, r18	; 0x24
    5ac6:	3d 81       	ldd	r19, Y+5	; 0x05
    5ac8:	3d a3       	std	Y+37, r19	; 0x25
    5aca:	4e 81       	ldd	r20, Y+6	; 0x06
    5acc:	4e a3       	std	Y+38, r20	; 0x26
    5ace:	5f 81       	ldd	r21, Y+7	; 0x07
    5ad0:	5f a3       	std	Y+39, r21	; 0x27
    5ad2:	68 85       	ldd	r22, Y+8	; 0x08
    5ad4:	68 a7       	std	Y+40, r22	; 0x28
    5ad6:	79 85       	ldd	r23, Y+9	; 0x09
    5ad8:	79 a7       	std	Y+41, r23	; 0x29
    5ada:	8a 85       	ldd	r24, Y+10	; 0x0a
    5adc:	8a a7       	std	Y+42, r24	; 0x2a
    5ade:	9b a1       	ldd	r25, Y+35	; 0x23
    5ae0:	0b 89       	ldd	r16, Y+19	; 0x13
    5ae2:	90 0f       	add	r25, r16
    5ae4:	9b a7       	std	Y+43, r25	; 0x2b
    5ae6:	11 e0       	ldi	r17, 0x01	; 1
    5ae8:	1b ab       	std	Y+51, r17	; 0x33
    5aea:	2b a5       	ldd	r18, Y+43	; 0x2b
    5aec:	3b a1       	ldd	r19, Y+35	; 0x23
    5aee:	23 17       	cp	r18, r19
    5af0:	08 f0       	brcs	.+2      	; 0x5af4 <LCD_VidPrintVar+0x1fc>
    5af2:	1b aa       	std	Y+51, r1	; 0x33
    5af4:	4c a1       	ldd	r20, Y+36	; 0x24
    5af6:	5c 89       	ldd	r21, Y+20	; 0x14
    5af8:	45 0f       	add	r20, r21
    5afa:	4c a7       	std	Y+44, r20	; 0x2c
    5afc:	61 e0       	ldi	r22, 0x01	; 1
    5afe:	6c ab       	std	Y+52, r22	; 0x34
    5b00:	7c a5       	ldd	r23, Y+44	; 0x2c
    5b02:	8c a1       	ldd	r24, Y+36	; 0x24
    5b04:	78 17       	cp	r23, r24
    5b06:	08 f0       	brcs	.+2      	; 0x5b0a <LCD_VidPrintVar+0x212>
    5b08:	1c aa       	std	Y+52, r1	; 0x34
    5b0a:	9b a9       	ldd	r25, Y+51	; 0x33
    5b0c:	0c a5       	ldd	r16, Y+44	; 0x2c
    5b0e:	90 0f       	add	r25, r16
    5b10:	9d ab       	std	Y+53, r25	; 0x35
    5b12:	11 e0       	ldi	r17, 0x01	; 1
    5b14:	1e ab       	std	Y+54, r17	; 0x36
    5b16:	2d a9       	ldd	r18, Y+53	; 0x35
    5b18:	3c a5       	ldd	r19, Y+44	; 0x2c
    5b1a:	23 17       	cp	r18, r19
    5b1c:	08 f0       	brcs	.+2      	; 0x5b20 <LCD_VidPrintVar+0x228>
    5b1e:	1e aa       	std	Y+54, r1	; 0x36
    5b20:	4c a9       	ldd	r20, Y+52	; 0x34
    5b22:	5e a9       	ldd	r21, Y+54	; 0x36
    5b24:	45 2b       	or	r20, r21
    5b26:	4c ab       	std	Y+52, r20	; 0x34
    5b28:	6d a9       	ldd	r22, Y+53	; 0x35
    5b2a:	6c a7       	std	Y+44, r22	; 0x2c
    5b2c:	7d a1       	ldd	r23, Y+37	; 0x25
    5b2e:	8d 89       	ldd	r24, Y+21	; 0x15
    5b30:	78 0f       	add	r23, r24
    5b32:	7d a7       	std	Y+45, r23	; 0x2d
    5b34:	91 e0       	ldi	r25, 0x01	; 1
    5b36:	9f ab       	std	Y+55, r25	; 0x37
    5b38:	0d a5       	ldd	r16, Y+45	; 0x2d
    5b3a:	1d a1       	ldd	r17, Y+37	; 0x25
    5b3c:	01 17       	cp	r16, r17
    5b3e:	08 f0       	brcs	.+2      	; 0x5b42 <LCD_VidPrintVar+0x24a>
    5b40:	1f aa       	std	Y+55, r1	; 0x37
    5b42:	2c a9       	ldd	r18, Y+52	; 0x34
    5b44:	3d a5       	ldd	r19, Y+45	; 0x2d
    5b46:	23 0f       	add	r18, r19
    5b48:	28 af       	std	Y+56, r18	; 0x38
    5b4a:	41 e0       	ldi	r20, 0x01	; 1
    5b4c:	49 af       	std	Y+57, r20	; 0x39
    5b4e:	58 ad       	ldd	r21, Y+56	; 0x38
    5b50:	6d a5       	ldd	r22, Y+45	; 0x2d
    5b52:	56 17       	cp	r21, r22
    5b54:	08 f0       	brcs	.+2      	; 0x5b58 <LCD_VidPrintVar+0x260>
    5b56:	19 ae       	std	Y+57, r1	; 0x39
    5b58:	7f a9       	ldd	r23, Y+55	; 0x37
    5b5a:	89 ad       	ldd	r24, Y+57	; 0x39
    5b5c:	78 2b       	or	r23, r24
    5b5e:	7f ab       	std	Y+55, r23	; 0x37
    5b60:	98 ad       	ldd	r25, Y+56	; 0x38
    5b62:	9d a7       	std	Y+45, r25	; 0x2d
    5b64:	0e a1       	ldd	r16, Y+38	; 0x26
    5b66:	1e 89       	ldd	r17, Y+22	; 0x16
    5b68:	01 0f       	add	r16, r17
    5b6a:	0e a7       	std	Y+46, r16	; 0x2e
    5b6c:	21 e0       	ldi	r18, 0x01	; 1
    5b6e:	2a af       	std	Y+58, r18	; 0x3a
    5b70:	3e a5       	ldd	r19, Y+46	; 0x2e
    5b72:	4e a1       	ldd	r20, Y+38	; 0x26
    5b74:	34 17       	cp	r19, r20
    5b76:	08 f0       	brcs	.+2      	; 0x5b7a <LCD_VidPrintVar+0x282>
    5b78:	1a ae       	std	Y+58, r1	; 0x3a
    5b7a:	5f a9       	ldd	r21, Y+55	; 0x37
    5b7c:	6e a5       	ldd	r22, Y+46	; 0x2e
    5b7e:	56 0f       	add	r21, r22
    5b80:	5b af       	std	Y+59, r21	; 0x3b
    5b82:	71 e0       	ldi	r23, 0x01	; 1
    5b84:	7c af       	std	Y+60, r23	; 0x3c
    5b86:	8b ad       	ldd	r24, Y+59	; 0x3b
    5b88:	9e a5       	ldd	r25, Y+46	; 0x2e
    5b8a:	89 17       	cp	r24, r25
    5b8c:	08 f0       	brcs	.+2      	; 0x5b90 <LCD_VidPrintVar+0x298>
    5b8e:	1c ae       	std	Y+60, r1	; 0x3c
    5b90:	0a ad       	ldd	r16, Y+58	; 0x3a
    5b92:	1c ad       	ldd	r17, Y+60	; 0x3c
    5b94:	01 2b       	or	r16, r17
    5b96:	0a af       	std	Y+58, r16	; 0x3a
    5b98:	2b ad       	ldd	r18, Y+59	; 0x3b
    5b9a:	2e a7       	std	Y+46, r18	; 0x2e
    5b9c:	3f a1       	ldd	r19, Y+39	; 0x27
    5b9e:	4f 89       	ldd	r20, Y+23	; 0x17
    5ba0:	34 0f       	add	r19, r20
    5ba2:	3f a7       	std	Y+47, r19	; 0x2f
    5ba4:	51 e0       	ldi	r21, 0x01	; 1
    5ba6:	5d af       	std	Y+61, r21	; 0x3d
    5ba8:	6f a5       	ldd	r22, Y+47	; 0x2f
    5baa:	7f a1       	ldd	r23, Y+39	; 0x27
    5bac:	67 17       	cp	r22, r23
    5bae:	08 f0       	brcs	.+2      	; 0x5bb2 <LCD_VidPrintVar+0x2ba>
    5bb0:	1d ae       	std	Y+61, r1	; 0x3d
    5bb2:	8a ad       	ldd	r24, Y+58	; 0x3a
    5bb4:	9f a5       	ldd	r25, Y+47	; 0x2f
    5bb6:	89 0f       	add	r24, r25
    5bb8:	8e af       	std	Y+62, r24	; 0x3e
    5bba:	01 e0       	ldi	r16, 0x01	; 1
    5bbc:	0f af       	std	Y+63, r16	; 0x3f
    5bbe:	1e ad       	ldd	r17, Y+62	; 0x3e
    5bc0:	2f a5       	ldd	r18, Y+47	; 0x2f
    5bc2:	12 17       	cp	r17, r18
    5bc4:	08 f0       	brcs	.+2      	; 0x5bc8 <LCD_VidPrintVar+0x2d0>
    5bc6:	1f ae       	std	Y+63, r1	; 0x3f
    5bc8:	3d ad       	ldd	r19, Y+61	; 0x3d
    5bca:	4f ad       	ldd	r20, Y+63	; 0x3f
    5bcc:	34 2b       	or	r19, r20
    5bce:	3d af       	std	Y+61, r19	; 0x3d
    5bd0:	5e ad       	ldd	r21, Y+62	; 0x3e
    5bd2:	5f a7       	std	Y+47, r21	; 0x2f
    5bd4:	68 a5       	ldd	r22, Y+40	; 0x28
    5bd6:	78 8d       	ldd	r23, Y+24	; 0x18
    5bd8:	67 0f       	add	r22, r23
    5bda:	68 ab       	std	Y+48, r22	; 0x30
    5bdc:	81 e0       	ldi	r24, 0x01	; 1
    5bde:	21 96       	adiw	r28, 0x01	; 1
    5be0:	8f af       	std	Y+63, r24	; 0x3f
    5be2:	21 97       	sbiw	r28, 0x01	; 1
    5be4:	98 a9       	ldd	r25, Y+48	; 0x30
    5be6:	08 a5       	ldd	r16, Y+40	; 0x28
    5be8:	90 17       	cp	r25, r16
    5bea:	18 f0       	brcs	.+6      	; 0x5bf2 <LCD_VidPrintVar+0x2fa>
    5bec:	21 96       	adiw	r28, 0x01	; 1
    5bee:	1f ae       	std	Y+63, r1	; 0x3f
    5bf0:	21 97       	sbiw	r28, 0x01	; 1
    5bf2:	1d ad       	ldd	r17, Y+61	; 0x3d
    5bf4:	28 a9       	ldd	r18, Y+48	; 0x30
    5bf6:	12 0f       	add	r17, r18
    5bf8:	22 96       	adiw	r28, 0x02	; 2
    5bfa:	1f af       	std	Y+63, r17	; 0x3f
    5bfc:	22 97       	sbiw	r28, 0x02	; 2
    5bfe:	31 e0       	ldi	r19, 0x01	; 1
    5c00:	23 96       	adiw	r28, 0x03	; 3
    5c02:	3f af       	std	Y+63, r19	; 0x3f
    5c04:	23 97       	sbiw	r28, 0x03	; 3
    5c06:	22 96       	adiw	r28, 0x02	; 2
    5c08:	4f ad       	ldd	r20, Y+63	; 0x3f
    5c0a:	22 97       	sbiw	r28, 0x02	; 2
    5c0c:	58 a9       	ldd	r21, Y+48	; 0x30
    5c0e:	45 17       	cp	r20, r21
    5c10:	18 f0       	brcs	.+6      	; 0x5c18 <LCD_VidPrintVar+0x320>
    5c12:	23 96       	adiw	r28, 0x03	; 3
    5c14:	1f ae       	std	Y+63, r1	; 0x3f
    5c16:	23 97       	sbiw	r28, 0x03	; 3
    5c18:	21 96       	adiw	r28, 0x01	; 1
    5c1a:	6f ad       	ldd	r22, Y+63	; 0x3f
    5c1c:	21 97       	sbiw	r28, 0x01	; 1
    5c1e:	23 96       	adiw	r28, 0x03	; 3
    5c20:	7f ad       	ldd	r23, Y+63	; 0x3f
    5c22:	23 97       	sbiw	r28, 0x03	; 3
    5c24:	67 2b       	or	r22, r23
    5c26:	21 96       	adiw	r28, 0x01	; 1
    5c28:	6f af       	std	Y+63, r22	; 0x3f
    5c2a:	21 97       	sbiw	r28, 0x01	; 1
    5c2c:	22 96       	adiw	r28, 0x02	; 2
    5c2e:	8f ad       	ldd	r24, Y+63	; 0x3f
    5c30:	22 97       	sbiw	r28, 0x02	; 2
    5c32:	88 ab       	std	Y+48, r24	; 0x30
    5c34:	99 a5       	ldd	r25, Y+41	; 0x29
    5c36:	09 8d       	ldd	r16, Y+25	; 0x19
    5c38:	90 0f       	add	r25, r16
    5c3a:	99 ab       	std	Y+49, r25	; 0x31
    5c3c:	11 e0       	ldi	r17, 0x01	; 1
    5c3e:	24 96       	adiw	r28, 0x04	; 4
    5c40:	1f af       	std	Y+63, r17	; 0x3f
    5c42:	24 97       	sbiw	r28, 0x04	; 4
    5c44:	29 a9       	ldd	r18, Y+49	; 0x31
    5c46:	39 a5       	ldd	r19, Y+41	; 0x29
    5c48:	23 17       	cp	r18, r19
    5c4a:	18 f0       	brcs	.+6      	; 0x5c52 <LCD_VidPrintVar+0x35a>
    5c4c:	24 96       	adiw	r28, 0x04	; 4
    5c4e:	1f ae       	std	Y+63, r1	; 0x3f
    5c50:	24 97       	sbiw	r28, 0x04	; 4
    5c52:	21 96       	adiw	r28, 0x01	; 1
    5c54:	4f ad       	ldd	r20, Y+63	; 0x3f
    5c56:	21 97       	sbiw	r28, 0x01	; 1
    5c58:	59 a9       	ldd	r21, Y+49	; 0x31
    5c5a:	45 0f       	add	r20, r21
    5c5c:	25 96       	adiw	r28, 0x05	; 5
    5c5e:	4f af       	std	Y+63, r20	; 0x3f
    5c60:	25 97       	sbiw	r28, 0x05	; 5
    5c62:	61 e0       	ldi	r22, 0x01	; 1
    5c64:	26 96       	adiw	r28, 0x06	; 6
    5c66:	6f af       	std	Y+63, r22	; 0x3f
    5c68:	26 97       	sbiw	r28, 0x06	; 6
    5c6a:	25 96       	adiw	r28, 0x05	; 5
    5c6c:	7f ad       	ldd	r23, Y+63	; 0x3f
    5c6e:	25 97       	sbiw	r28, 0x05	; 5
    5c70:	89 a9       	ldd	r24, Y+49	; 0x31
    5c72:	78 17       	cp	r23, r24
    5c74:	18 f0       	brcs	.+6      	; 0x5c7c <LCD_VidPrintVar+0x384>
    5c76:	26 96       	adiw	r28, 0x06	; 6
    5c78:	1f ae       	std	Y+63, r1	; 0x3f
    5c7a:	26 97       	sbiw	r28, 0x06	; 6
    5c7c:	24 96       	adiw	r28, 0x04	; 4
    5c7e:	9f ad       	ldd	r25, Y+63	; 0x3f
    5c80:	24 97       	sbiw	r28, 0x04	; 4
    5c82:	26 96       	adiw	r28, 0x06	; 6
    5c84:	0f ad       	ldd	r16, Y+63	; 0x3f
    5c86:	26 97       	sbiw	r28, 0x06	; 6
    5c88:	90 2b       	or	r25, r16
    5c8a:	24 96       	adiw	r28, 0x04	; 4
    5c8c:	9f af       	std	Y+63, r25	; 0x3f
    5c8e:	24 97       	sbiw	r28, 0x04	; 4
    5c90:	25 96       	adiw	r28, 0x05	; 5
    5c92:	1f ad       	ldd	r17, Y+63	; 0x3f
    5c94:	25 97       	sbiw	r28, 0x05	; 5
    5c96:	19 ab       	std	Y+49, r17	; 0x31
    5c98:	2a a5       	ldd	r18, Y+42	; 0x2a
    5c9a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    5c9c:	23 0f       	add	r18, r19
    5c9e:	2a ab       	std	Y+50, r18	; 0x32
    5ca0:	24 96       	adiw	r28, 0x04	; 4
    5ca2:	8f ad       	ldd	r24, Y+63	; 0x3f
    5ca4:	24 97       	sbiw	r28, 0x04	; 4
    5ca6:	4a a9       	ldd	r20, Y+50	; 0x32
    5ca8:	84 0f       	add	r24, r20
    5caa:	8a ab       	std	Y+50, r24	; 0x32
    5cac:	5b a5       	ldd	r21, Y+43	; 0x2b
    5cae:	5b 83       	std	Y+3, r21	; 0x03
    5cb0:	6c a5       	ldd	r22, Y+44	; 0x2c
    5cb2:	6c 83       	std	Y+4, r22	; 0x04
    5cb4:	7d a5       	ldd	r23, Y+45	; 0x2d
    5cb6:	7d 83       	std	Y+5, r23	; 0x05
    5cb8:	8e a5       	ldd	r24, Y+46	; 0x2e
    5cba:	8e 83       	std	Y+6, r24	; 0x06
    5cbc:	9f a5       	ldd	r25, Y+47	; 0x2f
    5cbe:	9f 83       	std	Y+7, r25	; 0x07
    5cc0:	08 a9       	ldd	r16, Y+48	; 0x30
    5cc2:	08 87       	std	Y+8, r16	; 0x08
    5cc4:	19 a9       	ldd	r17, Y+49	; 0x31
    5cc6:	19 87       	std	Y+9, r17	; 0x09
    5cc8:	2a a9       	ldd	r18, Y+50	; 0x32
    5cca:	2a 87       	std	Y+10, r18	; 0x0a
		Copy_U8Var/=10 ;
    5ccc:	ab 84       	ldd	r10, Y+11	; 0x0b
    5cce:	bc 84       	ldd	r11, Y+12	; 0x0c
    5cd0:	cd 84       	ldd	r12, Y+13	; 0x0d
    5cd2:	de 84       	ldd	r13, Y+14	; 0x0e
    5cd4:	ef 84       	ldd	r14, Y+15	; 0x0f
    5cd6:	f8 88       	ldd	r15, Y+16	; 0x10
    5cd8:	09 89       	ldd	r16, Y+17	; 0x11
    5cda:	1a 89       	ldd	r17, Y+18	; 0x12
    5cdc:	2a 2d       	mov	r18, r10
    5cde:	3b 2d       	mov	r19, r11
    5ce0:	4c 2d       	mov	r20, r12
    5ce2:	5d 2d       	mov	r21, r13
    5ce4:	6e 2d       	mov	r22, r14
    5ce6:	7f 2d       	mov	r23, r15
    5ce8:	80 2f       	mov	r24, r16
    5cea:	91 2f       	mov	r25, r17
    5cec:	0f 2e       	mov	r0, r31
    5cee:	fa e0       	ldi	r31, 0x0A	; 10
    5cf0:	af 2e       	mov	r10, r31
    5cf2:	f0 2d       	mov	r31, r0
    5cf4:	bb 24       	eor	r11, r11
    5cf6:	cc 24       	eor	r12, r12
    5cf8:	dd 24       	eor	r13, r13
    5cfa:	ee 24       	eor	r14, r14
    5cfc:	ff 24       	eor	r15, r15
    5cfe:	00 e0       	ldi	r16, 0x00	; 0
    5d00:	10 e0       	ldi	r17, 0x00	; 0
    5d02:	0e 94 cb 02 	call	0x596	; 0x596 <__udivdi3>
    5d06:	a2 2e       	mov	r10, r18
    5d08:	b3 2e       	mov	r11, r19
    5d0a:	c4 2e       	mov	r12, r20
    5d0c:	d5 2e       	mov	r13, r21
    5d0e:	e6 2e       	mov	r14, r22
    5d10:	f7 2e       	mov	r15, r23
    5d12:	08 2f       	mov	r16, r24
    5d14:	19 2f       	mov	r17, r25
    5d16:	ab 86       	std	Y+11, r10	; 0x0b
    5d18:	bc 86       	std	Y+12, r11	; 0x0c
    5d1a:	cd 86       	std	Y+13, r12	; 0x0d
    5d1c:	de 86       	std	Y+14, r13	; 0x0e
    5d1e:	ef 86       	std	Y+15, r14	; 0x0f
    5d20:	f8 8a       	std	Y+16, r15	; 0x10
    5d22:	09 8b       	std	Y+17, r16	; 0x11
    5d24:	1a 8b       	std	Y+18, r17	; 0x12
		copy_i-- ;
    5d26:	89 81       	ldd	r24, Y+1	; 0x01
    5d28:	81 50       	subi	r24, 0x01	; 1
    5d2a:	89 83       	std	Y+1, r24	; 0x01
	}

	s8 copy_i = i-1 ;

	// to reverse the arrang of digits in num
	while ( copy_i >= 0 ){
    5d2c:	89 81       	ldd	r24, Y+1	; 0x01
    5d2e:	88 23       	and	r24, r24
    5d30:	0c f0       	brlt	.+2      	; 0x5d34 <LCD_VidPrintVar+0x43c>
    5d32:	61 ce       	rjmp	.-830    	; 0x59f6 <LCD_VidPrintVar+0xfe>
    5d34:	61 c0       	rjmp	.+194    	; 0x5df8 <LCD_VidPrintVar+0x500>
		copy_i-- ;
	}//end while

	// to print the digit in arrange
	while( i > 0 ){
		LCD_VidSendChar( (local_num % 10) +'0' ) ;
    5d36:	ab 80       	ldd	r10, Y+3	; 0x03
    5d38:	bc 80       	ldd	r11, Y+4	; 0x04
    5d3a:	cd 80       	ldd	r12, Y+5	; 0x05
    5d3c:	de 80       	ldd	r13, Y+6	; 0x06
    5d3e:	ef 80       	ldd	r14, Y+7	; 0x07
    5d40:	f8 84       	ldd	r15, Y+8	; 0x08
    5d42:	09 85       	ldd	r16, Y+9	; 0x09
    5d44:	1a 85       	ldd	r17, Y+10	; 0x0a
    5d46:	2a 2d       	mov	r18, r10
    5d48:	3b 2d       	mov	r19, r11
    5d4a:	4c 2d       	mov	r20, r12
    5d4c:	5d 2d       	mov	r21, r13
    5d4e:	6e 2d       	mov	r22, r14
    5d50:	7f 2d       	mov	r23, r15
    5d52:	80 2f       	mov	r24, r16
    5d54:	91 2f       	mov	r25, r17
    5d56:	0f 2e       	mov	r0, r31
    5d58:	fa e0       	ldi	r31, 0x0A	; 10
    5d5a:	af 2e       	mov	r10, r31
    5d5c:	f0 2d       	mov	r31, r0
    5d5e:	bb 24       	eor	r11, r11
    5d60:	cc 24       	eor	r12, r12
    5d62:	dd 24       	eor	r13, r13
    5d64:	ee 24       	eor	r14, r14
    5d66:	ff 24       	eor	r15, r15
    5d68:	00 e0       	ldi	r16, 0x00	; 0
    5d6a:	10 e0       	ldi	r17, 0x00	; 0
    5d6c:	0e 94 40 09 	call	0x1280	; 0x1280 <__umoddi3>
    5d70:	a2 2e       	mov	r10, r18
    5d72:	b3 2e       	mov	r11, r19
    5d74:	c4 2e       	mov	r12, r20
    5d76:	d5 2e       	mov	r13, r21
    5d78:	e6 2e       	mov	r14, r22
    5d7a:	f7 2e       	mov	r15, r23
    5d7c:	08 2f       	mov	r16, r24
    5d7e:	19 2f       	mov	r17, r25
    5d80:	2a 2d       	mov	r18, r10
    5d82:	3b 2d       	mov	r19, r11
    5d84:	4c 2d       	mov	r20, r12
    5d86:	5d 2d       	mov	r21, r13
    5d88:	6e 2d       	mov	r22, r14
    5d8a:	7f 2d       	mov	r23, r15
    5d8c:	80 2f       	mov	r24, r16
    5d8e:	91 2f       	mov	r25, r17
    5d90:	82 2f       	mov	r24, r18
    5d92:	80 5d       	subi	r24, 0xD0	; 208
    5d94:	0e 94 42 2a 	call	0x5484	; 0x5484 <LCD_VidSendChar>
		local_num /= 10 ;
    5d98:	ab 80       	ldd	r10, Y+3	; 0x03
    5d9a:	bc 80       	ldd	r11, Y+4	; 0x04
    5d9c:	cd 80       	ldd	r12, Y+5	; 0x05
    5d9e:	de 80       	ldd	r13, Y+6	; 0x06
    5da0:	ef 80       	ldd	r14, Y+7	; 0x07
    5da2:	f8 84       	ldd	r15, Y+8	; 0x08
    5da4:	09 85       	ldd	r16, Y+9	; 0x09
    5da6:	1a 85       	ldd	r17, Y+10	; 0x0a
    5da8:	2a 2d       	mov	r18, r10
    5daa:	3b 2d       	mov	r19, r11
    5dac:	4c 2d       	mov	r20, r12
    5dae:	5d 2d       	mov	r21, r13
    5db0:	6e 2d       	mov	r22, r14
    5db2:	7f 2d       	mov	r23, r15
    5db4:	80 2f       	mov	r24, r16
    5db6:	91 2f       	mov	r25, r17
    5db8:	0f 2e       	mov	r0, r31
    5dba:	fa e0       	ldi	r31, 0x0A	; 10
    5dbc:	af 2e       	mov	r10, r31
    5dbe:	f0 2d       	mov	r31, r0
    5dc0:	bb 24       	eor	r11, r11
    5dc2:	cc 24       	eor	r12, r12
    5dc4:	dd 24       	eor	r13, r13
    5dc6:	ee 24       	eor	r14, r14
    5dc8:	ff 24       	eor	r15, r15
    5dca:	00 e0       	ldi	r16, 0x00	; 0
    5dcc:	10 e0       	ldi	r17, 0x00	; 0
    5dce:	0e 94 cb 02 	call	0x596	; 0x596 <__udivdi3>
    5dd2:	a2 2e       	mov	r10, r18
    5dd4:	b3 2e       	mov	r11, r19
    5dd6:	c4 2e       	mov	r12, r20
    5dd8:	d5 2e       	mov	r13, r21
    5dda:	e6 2e       	mov	r14, r22
    5ddc:	f7 2e       	mov	r15, r23
    5dde:	08 2f       	mov	r16, r24
    5de0:	19 2f       	mov	r17, r25
    5de2:	ab 82       	std	Y+3, r10	; 0x03
    5de4:	bc 82       	std	Y+4, r11	; 0x04
    5de6:	cd 82       	std	Y+5, r12	; 0x05
    5de8:	de 82       	std	Y+6, r13	; 0x06
    5dea:	ef 82       	std	Y+7, r14	; 0x07
    5dec:	f8 86       	std	Y+8, r15	; 0x08
    5dee:	09 87       	std	Y+9, r16	; 0x09
    5df0:	1a 87       	std	Y+10, r17	; 0x0a
		i--;
    5df2:	8a 81       	ldd	r24, Y+2	; 0x02
    5df4:	81 50       	subi	r24, 0x01	; 1
    5df6:	8a 83       	std	Y+2, r24	; 0x02
		Copy_U8Var/=10 ;
		copy_i-- ;
	}//end while

	// to print the digit in arrange
	while( i > 0 ){
    5df8:	8a 81       	ldd	r24, Y+2	; 0x02
    5dfa:	88 23       	and	r24, r24
    5dfc:	09 f0       	breq	.+2      	; 0x5e00 <LCD_VidPrintVar+0x508>
    5dfe:	9b cf       	rjmp	.-202    	; 0x5d36 <LCD_VidPrintVar+0x43e>
		LCD_VidSendChar( (local_num % 10) +'0' ) ;
		local_num /= 10 ;
		i--;
	}//end while

}
    5e00:	cb 5b       	subi	r28, 0xBB	; 187
    5e02:	df 4f       	sbci	r29, 0xFF	; 255
    5e04:	0f b6       	in	r0, 0x3f	; 63
    5e06:	f8 94       	cli
    5e08:	de bf       	out	0x3e, r29	; 62
    5e0a:	0f be       	out	0x3f, r0	; 63
    5e0c:	cd bf       	out	0x3d, r28	; 61
    5e0e:	cf 91       	pop	r28
    5e10:	df 91       	pop	r29
    5e12:	1f 91       	pop	r17
    5e14:	0f 91       	pop	r16
    5e16:	ff 90       	pop	r15
    5e18:	ef 90       	pop	r14
    5e1a:	df 90       	pop	r13
    5e1c:	cf 90       	pop	r12
    5e1e:	bf 90       	pop	r11
    5e20:	af 90       	pop	r10
    5e22:	9f 90       	pop	r9
    5e24:	8f 90       	pop	r8
    5e26:	7f 90       	pop	r7
    5e28:	6f 90       	pop	r6
    5e2a:	5f 90       	pop	r5
    5e2c:	4f 90       	pop	r4
    5e2e:	3f 90       	pop	r3
    5e30:	2f 90       	pop	r2
    5e32:	08 95       	ret

00005e34 <LCD_VidPosCur>:
void LCD_VidPosCur(u8 Copy_U8Row , u8 Copy_U8Col ) {
    5e34:	df 93       	push	r29
    5e36:	cf 93       	push	r28
    5e38:	00 d0       	rcall	.+0      	; 0x5e3a <LCD_VidPosCur+0x6>
    5e3a:	0f 92       	push	r0
    5e3c:	cd b7       	in	r28, 0x3d	; 61
    5e3e:	de b7       	in	r29, 0x3e	; 62
    5e40:	8a 83       	std	Y+2, r24	; 0x02
    5e42:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Address = 0 ;
    5e44:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_U8Row == 0)
    5e46:	8a 81       	ldd	r24, Y+2	; 0x02
    5e48:	88 23       	and	r24, r24
    5e4a:	19 f4       	brne	.+6      	; 0x5e52 <LCD_VidPosCur+0x1e>
		Local_Address =0x80 ;
    5e4c:	80 e8       	ldi	r24, 0x80	; 128
    5e4e:	89 83       	std	Y+1, r24	; 0x01
    5e50:	05 c0       	rjmp	.+10     	; 0x5e5c <LCD_VidPosCur+0x28>
	else if (Copy_U8Row == 1)
    5e52:	8a 81       	ldd	r24, Y+2	; 0x02
    5e54:	81 30       	cpi	r24, 0x01	; 1
    5e56:	11 f4       	brne	.+4      	; 0x5e5c <LCD_VidPosCur+0x28>
		Local_Address =0xC0 ;
    5e58:	80 ec       	ldi	r24, 0xC0	; 192
    5e5a:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_U8Col < 16 )
    5e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    5e5e:	80 31       	cpi	r24, 0x10	; 16
    5e60:	20 f4       	brcc	.+8      	; 0x5e6a <LCD_VidPosCur+0x36>
		Local_Address += Copy_U8Col ;
    5e62:	89 81       	ldd	r24, Y+1	; 0x01
    5e64:	9b 81       	ldd	r25, Y+3	; 0x03
    5e66:	89 0f       	add	r24, r25
    5e68:	89 83       	std	Y+1, r24	; 0x01
	LCD_VidSendCommend ( Local_Address );
    5e6a:	89 81       	ldd	r24, Y+1	; 0x01
    5e6c:	0e 94 43 25 	call	0x4a86	; 0x4a86 <LCD_VidSendCommend>
}
    5e70:	0f 90       	pop	r0
    5e72:	0f 90       	pop	r0
    5e74:	0f 90       	pop	r0
    5e76:	cf 91       	pop	r28
    5e78:	df 91       	pop	r29
    5e7a:	08 95       	ret

00005e7c <LCD_VidClear>:
void LCD_VidClear (){
    5e7c:	df 93       	push	r29
    5e7e:	cf 93       	push	r28
    5e80:	cd b7       	in	r28, 0x3d	; 61
    5e82:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommend(DISPLAY_CLEAR) ;
    5e84:	81 e0       	ldi	r24, 0x01	; 1
    5e86:	0e 94 43 25 	call	0x4a86	; 0x4a86 <LCD_VidSendCommend>
}
    5e8a:	cf 91       	pop	r28
    5e8c:	df 91       	pop	r29
    5e8e:	08 95       	ret

00005e90 <SERVOMOTOR_VidSetDirection>:
#define OC1A_PIN 5
#define OC1B_PIN 4


void SERVOMOTOR_VidSetDirection(u8 Degree,u8 PWMPin)
{
    5e90:	df 93       	push	r29
    5e92:	cf 93       	push	r28
    5e94:	cd b7       	in	r28, 0x3d	; 61
    5e96:	de b7       	in	r29, 0x3e	; 62
    5e98:	28 97       	sbiw	r28, 0x08	; 8
    5e9a:	0f b6       	in	r0, 0x3f	; 63
    5e9c:	f8 94       	cli
    5e9e:	de bf       	out	0x3e, r29	; 62
    5ea0:	0f be       	out	0x3f, r0	; 63
    5ea2:	cd bf       	out	0x3d, r28	; 61
    5ea4:	8d 83       	std	Y+5, r24	; 0x05
    5ea6:	6e 83       	std	Y+6, r22	; 0x06
	f32 Duty=(Degree+48.75)/18.75;
    5ea8:	8d 81       	ldd	r24, Y+5	; 0x05
    5eaa:	88 2f       	mov	r24, r24
    5eac:	90 e0       	ldi	r25, 0x00	; 0
    5eae:	aa 27       	eor	r26, r26
    5eb0:	97 fd       	sbrc	r25, 7
    5eb2:	a0 95       	com	r26
    5eb4:	ba 2f       	mov	r27, r26
    5eb6:	bc 01       	movw	r22, r24
    5eb8:	cd 01       	movw	r24, r26
    5eba:	0e 94 90 13 	call	0x2720	; 0x2720 <__floatsisf>
    5ebe:	dc 01       	movw	r26, r24
    5ec0:	cb 01       	movw	r24, r22
    5ec2:	bc 01       	movw	r22, r24
    5ec4:	cd 01       	movw	r24, r26
    5ec6:	20 e0       	ldi	r18, 0x00	; 0
    5ec8:	30 e0       	ldi	r19, 0x00	; 0
    5eca:	43 e4       	ldi	r20, 0x43	; 67
    5ecc:	52 e4       	ldi	r21, 0x42	; 66
    5ece:	0e 94 2d 11 	call	0x225a	; 0x225a <__addsf3>
    5ed2:	dc 01       	movw	r26, r24
    5ed4:	cb 01       	movw	r24, r22
    5ed6:	bc 01       	movw	r22, r24
    5ed8:	cd 01       	movw	r24, r26
    5eda:	20 e0       	ldi	r18, 0x00	; 0
    5edc:	30 e0       	ldi	r19, 0x00	; 0
    5ede:	46 e9       	ldi	r20, 0x96	; 150
    5ee0:	51 e4       	ldi	r21, 0x41	; 65
    5ee2:	0e 94 54 12 	call	0x24a8	; 0x24a8 <__divsf3>
    5ee6:	dc 01       	movw	r26, r24
    5ee8:	cb 01       	movw	r24, r22
    5eea:	89 83       	std	Y+1, r24	; 0x01
    5eec:	9a 83       	std	Y+2, r25	; 0x02
    5eee:	ab 83       	std	Y+3, r26	; 0x03
    5ef0:	bc 83       	std	Y+4, r27	; 0x04
	switch(PWMPin)
    5ef2:	8e 81       	ldd	r24, Y+6	; 0x06
    5ef4:	28 2f       	mov	r18, r24
    5ef6:	30 e0       	ldi	r19, 0x00	; 0
    5ef8:	38 87       	std	Y+8, r19	; 0x08
    5efa:	2f 83       	std	Y+7, r18	; 0x07
    5efc:	8f 81       	ldd	r24, Y+7	; 0x07
    5efe:	98 85       	ldd	r25, Y+8	; 0x08
    5f00:	84 30       	cpi	r24, 0x04	; 4
    5f02:	91 05       	cpc	r25, r1
    5f04:	81 f0       	breq	.+32     	; 0x5f26 <SERVOMOTOR_VidSetDirection+0x96>
    5f06:	2f 81       	ldd	r18, Y+7	; 0x07
    5f08:	38 85       	ldd	r19, Y+8	; 0x08
    5f0a:	25 30       	cpi	r18, 0x05	; 5
    5f0c:	31 05       	cpc	r19, r1
    5f0e:	a9 f4       	brne	.+42     	; 0x5f3a <SERVOMOTOR_VidSetDirection+0xaa>
	{
	/*Generate PWM of frequency 0.050KHz of the desired Duty cycle percentage*/
	case OC1A_PIN:{TIMER1_VidPWMGenerationOC1A(0.050,Duty); break;}
    5f10:	29 81       	ldd	r18, Y+1	; 0x01
    5f12:	3a 81       	ldd	r19, Y+2	; 0x02
    5f14:	4b 81       	ldd	r20, Y+3	; 0x03
    5f16:	5c 81       	ldd	r21, Y+4	; 0x04
    5f18:	6d ec       	ldi	r22, 0xCD	; 205
    5f1a:	7c ec       	ldi	r23, 0xCC	; 204
    5f1c:	8c e4       	ldi	r24, 0x4C	; 76
    5f1e:	9d e3       	ldi	r25, 0x3D	; 61
    5f20:	0e 94 04 38 	call	0x7008	; 0x7008 <TIMER1_VidPWMGenerationOC1A>
    5f24:	0a c0       	rjmp	.+20     	; 0x5f3a <SERVOMOTOR_VidSetDirection+0xaa>
	case OC1B_PIN:{TIMER1_VidPWMGenerationOC1B(0.050,Duty); break;}
    5f26:	29 81       	ldd	r18, Y+1	; 0x01
    5f28:	3a 81       	ldd	r19, Y+2	; 0x02
    5f2a:	4b 81       	ldd	r20, Y+3	; 0x03
    5f2c:	5c 81       	ldd	r21, Y+4	; 0x04
    5f2e:	6d ec       	ldi	r22, 0xCD	; 205
    5f30:	7c ec       	ldi	r23, 0xCC	; 204
    5f32:	8c e4       	ldi	r24, 0x4C	; 76
    5f34:	9d e3       	ldi	r25, 0x3D	; 61
    5f36:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <TIMER1_VidPWMGenerationOC1B>
	}

}
    5f3a:	28 96       	adiw	r28, 0x08	; 8
    5f3c:	0f b6       	in	r0, 0x3f	; 63
    5f3e:	f8 94       	cli
    5f40:	de bf       	out	0x3e, r29	; 62
    5f42:	0f be       	out	0x3f, r0	; 63
    5f44:	cd bf       	out	0x3d, r28	; 61
    5f46:	cf 91       	pop	r28
    5f48:	df 91       	pop	r29
    5f4a:	08 95       	ret

00005f4c <TIMER_VidSetCallBack>:
static u16 PRE_SCALAR_TIMER2 ;
static f32 T_OV_TIMER2  ;
static f32 NUM_OV_TIMER2 ;
static f32 PRE_LOAD_TIMER2 ;

void TIMER_VidSetCallBack (u8 Copy_NumOfINT , void (*ptr)(void)){
    5f4c:	df 93       	push	r29
    5f4e:	cf 93       	push	r28
    5f50:	00 d0       	rcall	.+0      	; 0x5f52 <TIMER_VidSetCallBack+0x6>
    5f52:	00 d0       	rcall	.+0      	; 0x5f54 <TIMER_VidSetCallBack+0x8>
    5f54:	0f 92       	push	r0
    5f56:	cd b7       	in	r28, 0x3d	; 61
    5f58:	de b7       	in	r29, 0x3e	; 62
    5f5a:	89 83       	std	Y+1, r24	; 0x01
    5f5c:	7b 83       	std	Y+3, r23	; 0x03
    5f5e:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_NumOfINT){
    5f60:	89 81       	ldd	r24, Y+1	; 0x01
    5f62:	28 2f       	mov	r18, r24
    5f64:	30 e0       	ldi	r19, 0x00	; 0
    5f66:	3d 83       	std	Y+5, r19	; 0x05
    5f68:	2c 83       	std	Y+4, r18	; 0x04
    5f6a:	8c 81       	ldd	r24, Y+4	; 0x04
    5f6c:	9d 81       	ldd	r25, Y+5	; 0x05
    5f6e:	81 30       	cpi	r24, 0x01	; 1
    5f70:	91 05       	cpc	r25, r1
    5f72:	81 f0       	breq	.+32     	; 0x5f94 <TIMER_VidSetCallBack+0x48>
    5f74:	2c 81       	ldd	r18, Y+4	; 0x04
    5f76:	3d 81       	ldd	r19, Y+5	; 0x05
    5f78:	22 30       	cpi	r18, 0x02	; 2
    5f7a:	31 05       	cpc	r19, r1
    5f7c:	91 f0       	breq	.+36     	; 0x5fa2 <TIMER_VidSetCallBack+0x56>
    5f7e:	8c 81       	ldd	r24, Y+4	; 0x04
    5f80:	9d 81       	ldd	r25, Y+5	; 0x05
    5f82:	00 97       	sbiw	r24, 0x00	; 0
    5f84:	a1 f4       	brne	.+40     	; 0x5fae <TIMER_VidSetCallBack+0x62>
	case 0 :TIMER0_PFUNC = ptr ;             break ;
    5f86:	8a 81       	ldd	r24, Y+2	; 0x02
    5f88:	9b 81       	ldd	r25, Y+3	; 0x03
    5f8a:	90 93 23 02 	sts	0x0223, r25
    5f8e:	80 93 22 02 	sts	0x0222, r24
    5f92:	0d c0       	rjmp	.+26     	; 0x5fae <TIMER_VidSetCallBack+0x62>
	case 1 :TIMER1_PFUNC = ptr ;             break ;
    5f94:	8a 81       	ldd	r24, Y+2	; 0x02
    5f96:	9b 81       	ldd	r25, Y+3	; 0x03
    5f98:	90 93 25 02 	sts	0x0225, r25
    5f9c:	80 93 24 02 	sts	0x0224, r24
    5fa0:	06 c0       	rjmp	.+12     	; 0x5fae <TIMER_VidSetCallBack+0x62>
	case 2 :TIMER2_PFUNC = ptr ;             break ;
    5fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    5fa4:	9b 81       	ldd	r25, Y+3	; 0x03
    5fa6:	90 93 27 02 	sts	0x0227, r25
    5faa:	80 93 26 02 	sts	0x0226, r24
	}
}
    5fae:	0f 90       	pop	r0
    5fb0:	0f 90       	pop	r0
    5fb2:	0f 90       	pop	r0
    5fb4:	0f 90       	pop	r0
    5fb6:	0f 90       	pop	r0
    5fb8:	cf 91       	pop	r28
    5fba:	df 91       	pop	r29
    5fbc:	08 95       	ret

00005fbe <TIMER0_VidInitialize>:




/*******************To initialize OV or COMPARE or FAST_PWM mode***************************************/
void TIMER0_VidInitialize (void) {
    5fbe:	df 93       	push	r29
    5fc0:	cf 93       	push	r28
    5fc2:	cd b7       	in	r28, 0x3d	; 61
    5fc4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE0);
#endif

#if TIMER0_MODE == FAST_PWM
	//define pin of timer 0
	DIO_VidSetPinDirection(1,3,1);
    5fc6:	81 e0       	ldi	r24, 0x01	; 1
    5fc8:	63 e0       	ldi	r22, 0x03	; 3
    5fca:	41 e0       	ldi	r20, 0x01	; 1
    5fcc:	0e 94 67 18 	call	0x30ce	; 0x30ce <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(1,3,0);
    5fd0:	81 e0       	ldi	r24, 0x01	; 1
    5fd2:	63 e0       	ldi	r22, 0x03	; 3
    5fd4:	40 e0       	ldi	r20, 0x00	; 0
    5fd6:	0e 94 a8 19 	call	0x3350	; 0x3350 <DIO_VidSetPinValue>

	// to initialize timer0 on 0 , FOCO = 0
	TCCR0 = 0 ;
    5fda:	e3 e5       	ldi	r30, 0x53	; 83
    5fdc:	f0 e0       	ldi	r31, 0x00	; 0
    5fde:	10 82       	st	Z, r1

	// 1 1 Fast PWM
	SET_BIT(TCCR0,WGM00);
    5fe0:	a3 e5       	ldi	r26, 0x53	; 83
    5fe2:	b0 e0       	ldi	r27, 0x00	; 0
    5fe4:	e3 e5       	ldi	r30, 0x53	; 83
    5fe6:	f0 e0       	ldi	r31, 0x00	; 0
    5fe8:	80 81       	ld	r24, Z
    5fea:	80 64       	ori	r24, 0x40	; 64
    5fec:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
    5fee:	a3 e5       	ldi	r26, 0x53	; 83
    5ff0:	b0 e0       	ldi	r27, 0x00	; 0
    5ff2:	e3 e5       	ldi	r30, 0x53	; 83
    5ff4:	f0 e0       	ldi	r31, 0x00	; 0
    5ff6:	80 81       	ld	r24, Z
    5ff8:	88 60       	ori	r24, 0x08	; 8
    5ffa:	8c 93       	st	X, r24

	//1 0 Clear OC0 on compare match, set OC0 at TOP ,  NON_INVERED MODE PWM
	SET_BIT(TCCR0,COM01);
    5ffc:	a3 e5       	ldi	r26, 0x53	; 83
    5ffe:	b0 e0       	ldi	r27, 0x00	; 0
    6000:	e3 e5       	ldi	r30, 0x53	; 83
    6002:	f0 e0       	ldi	r31, 0x00	; 0
    6004:	80 81       	ld	r24, Z
    6006:	80 62       	ori	r24, 0x20	; 32
    6008:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,COM00);
    600a:	a3 e5       	ldi	r26, 0x53	; 83
    600c:	b0 e0       	ldi	r27, 0x00	; 0
    600e:	e3 e5       	ldi	r30, 0x53	; 83
    6010:	f0 e0       	ldi	r31, 0x00	; 0
    6012:	80 81       	ld	r24, Z
    6014:	8f 7e       	andi	r24, 0xEF	; 239
    6016:	8c 93       	st	X, r24
#if PRE_TYPE_TIMER0 == NO_PRE
	CLR_BIT(TCCR0,CS02);
	CLR_BIT(TCCR0,CS01);
	SET_BIT(TCCR0,CS00);
#elif PRE_TYPE_TIMER0 == PRE_8
	CLR_BIT(TCCR0,CS02);
    6018:	a3 e5       	ldi	r26, 0x53	; 83
    601a:	b0 e0       	ldi	r27, 0x00	; 0
    601c:	e3 e5       	ldi	r30, 0x53	; 83
    601e:	f0 e0       	ldi	r31, 0x00	; 0
    6020:	80 81       	ld	r24, Z
    6022:	8b 7f       	andi	r24, 0xFB	; 251
    6024:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS01);
    6026:	a3 e5       	ldi	r26, 0x53	; 83
    6028:	b0 e0       	ldi	r27, 0x00	; 0
    602a:	e3 e5       	ldi	r30, 0x53	; 83
    602c:	f0 e0       	ldi	r31, 0x00	; 0
    602e:	80 81       	ld	r24, Z
    6030:	82 60       	ori	r24, 0x02	; 2
    6032:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS00);
    6034:	a3 e5       	ldi	r26, 0x53	; 83
    6036:	b0 e0       	ldi	r27, 0x00	; 0
    6038:	e3 e5       	ldi	r30, 0x53	; 83
    603a:	f0 e0       	ldi	r31, 0x00	; 0
    603c:	80 81       	ld	r24, Z
    603e:	8e 7f       	andi	r24, 0xFE	; 254
    6040:	8c 93       	st	X, r24
	PRE_SCALAR_TIMER0 = 8 ;
    6042:	88 e0       	ldi	r24, 0x08	; 8
    6044:	90 e0       	ldi	r25, 0x00	; 0
    6046:	90 93 39 02 	sts	0x0239, r25
    604a:	80 93 38 02 	sts	0x0238, r24
	CLR_BIT(TCCR0,CS01);
	SET_BIT(TCCR0,CS00);
	PRE_SCALAR_TIMER0 = 1024 ;
#endif

}//end FUNC TIMER_VidInitialize
    604e:	cf 91       	pop	r28
    6050:	df 91       	pop	r29
    6052:	08 95       	ret

00006054 <Timer0_VidSETDUTY>:

#endif

#if TIMER0_MODE == FAST_PWM

void Timer0_VidSETDUTY (u8 duty ) {
    6054:	df 93       	push	r29
    6056:	cf 93       	push	r28
    6058:	0f 92       	push	r0
    605a:	cd b7       	in	r28, 0x3d	; 61
    605c:	de b7       	in	r29, 0x3e	; 62
    605e:	89 83       	std	Y+1, r24	; 0x01
	duty = (u8)( (u16)duty*255/100 ) ;
    6060:	89 81       	ldd	r24, Y+1	; 0x01
    6062:	48 2f       	mov	r20, r24
    6064:	50 e0       	ldi	r21, 0x00	; 0
    6066:	ca 01       	movw	r24, r20
    6068:	9c 01       	movw	r18, r24
    606a:	22 0f       	add	r18, r18
    606c:	33 1f       	adc	r19, r19
    606e:	c9 01       	movw	r24, r18
    6070:	96 95       	lsr	r25
    6072:	98 2f       	mov	r25, r24
    6074:	88 27       	eor	r24, r24
    6076:	97 95       	ror	r25
    6078:	87 95       	ror	r24
    607a:	82 1b       	sub	r24, r18
    607c:	93 0b       	sbc	r25, r19
    607e:	84 0f       	add	r24, r20
    6080:	95 1f       	adc	r25, r21
    6082:	24 e6       	ldi	r18, 0x64	; 100
    6084:	30 e0       	ldi	r19, 0x00	; 0
    6086:	b9 01       	movw	r22, r18
    6088:	0e 94 19 3a 	call	0x7432	; 0x7432 <__udivmodhi4>
    608c:	cb 01       	movw	r24, r22
    608e:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = duty ;
    6090:	ec e5       	ldi	r30, 0x5C	; 92
    6092:	f0 e0       	ldi	r31, 0x00	; 0
    6094:	89 81       	ldd	r24, Y+1	; 0x01
    6096:	80 83       	st	Z, r24
}
    6098:	0f 90       	pop	r0
    609a:	cf 91       	pop	r28
    609c:	df 91       	pop	r29
    609e:	08 95       	ret

000060a0 <TIMER2_VidInitialize>:



/*******************To initialize OV or COMPARE or FAST_PWM mode***************************************/
//to check that you don't use OV or COMPARE or FAST_PWM mode
void TIMER2_VidInitialize (void) {
    60a0:	df 93       	push	r29
    60a2:	cf 93       	push	r28
    60a4:	cd b7       	in	r28, 0x3d	; 61
    60a6:	de b7       	in	r29, 0x3e	; 62
	//define pin of timer 2
	DIO_VidSetPinDirection(3,7,1);
    60a8:	83 e0       	ldi	r24, 0x03	; 3
    60aa:	67 e0       	ldi	r22, 0x07	; 7
    60ac:	41 e0       	ldi	r20, 0x01	; 1
    60ae:	0e 94 67 18 	call	0x30ce	; 0x30ce <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(3,7,0);
    60b2:	83 e0       	ldi	r24, 0x03	; 3
    60b4:	67 e0       	ldi	r22, 0x07	; 7
    60b6:	40 e0       	ldi	r20, 0x00	; 0
    60b8:	0e 94 a8 19 	call	0x3350	; 0x3350 <DIO_VidSetPinValue>

#if TIMER2_MODE == OV
	/*   overflow mode , to clear FOC0 and register
	     to enable interrupt , when rising flag jump to ISR     */
	TCCR2 = 0 ;
    60bc:	e5 e4       	ldi	r30, 0x45	; 69
    60be:	f0 e0       	ldi	r31, 0x00	; 0
    60c0:	10 82       	st	Z, r1
	SET_BIT(TIMSK,TOIE2);
    60c2:	a9 e5       	ldi	r26, 0x59	; 89
    60c4:	b0 e0       	ldi	r27, 0x00	; 0
    60c6:	e9 e5       	ldi	r30, 0x59	; 89
    60c8:	f0 e0       	ldi	r31, 0x00	; 0
    60ca:	80 81       	ld	r24, Z
    60cc:	80 64       	ori	r24, 0x40	; 64
    60ce:	8c 93       	st	X, r24
#if PRE_TYPE_TIMER2 == NO_PRE
	CLR_BIT(TCCR2,CS22);
	CLR_BIT(TCCR2,CS21);
	SET_BIT(TCCR2,CS20);
#elif PRE_TYPE_TIMER2 == PRE_8
	CLR_BIT(TCCR2,CS22);
    60d0:	a5 e4       	ldi	r26, 0x45	; 69
    60d2:	b0 e0       	ldi	r27, 0x00	; 0
    60d4:	e5 e4       	ldi	r30, 0x45	; 69
    60d6:	f0 e0       	ldi	r31, 0x00	; 0
    60d8:	80 81       	ld	r24, Z
    60da:	8b 7f       	andi	r24, 0xFB	; 251
    60dc:	8c 93       	st	X, r24
	SET_BIT(TCCR2,CS21);
    60de:	a5 e4       	ldi	r26, 0x45	; 69
    60e0:	b0 e0       	ldi	r27, 0x00	; 0
    60e2:	e5 e4       	ldi	r30, 0x45	; 69
    60e4:	f0 e0       	ldi	r31, 0x00	; 0
    60e6:	80 81       	ld	r24, Z
    60e8:	82 60       	ori	r24, 0x02	; 2
    60ea:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,CS20);
    60ec:	a5 e4       	ldi	r26, 0x45	; 69
    60ee:	b0 e0       	ldi	r27, 0x00	; 0
    60f0:	e5 e4       	ldi	r30, 0x45	; 69
    60f2:	f0 e0       	ldi	r31, 0x00	; 0
    60f4:	80 81       	ld	r24, Z
    60f6:	8e 7f       	andi	r24, 0xFE	; 254
    60f8:	8c 93       	st	X, r24
	PRE_SCALAR_TIMER2 = 8 ;
    60fa:	88 e0       	ldi	r24, 0x08	; 8
    60fc:	90 e0       	ldi	r25, 0x00	; 0
    60fe:	90 93 59 02 	sts	0x0259, r25
    6102:	80 93 58 02 	sts	0x0258, r24
	CLR_BIT(TCCR2,CS21);
	SET_BIT(TCCR2,CS20);
	PRE_SCALAR_TIMER2 = 1024 ;
#endif

}//end FUNC TIMER_VidInitialize
    6106:	cf 91       	pop	r28
    6108:	df 91       	pop	r29
    610a:	08 95       	ret

0000610c <TIMER2_Set_Time_S>:

/******************** The part that use to count time  *************************/
//to check that you don't use OV or COMPARE mode
#if TIMER2_MODE == OV

void TIMER2_Set_Time_S (u8 Copy_U8Time){
    610c:	6f 92       	push	r6
    610e:	7f 92       	push	r7
    6110:	8f 92       	push	r8
    6112:	9f 92       	push	r9
    6114:	af 92       	push	r10
    6116:	bf 92       	push	r11
    6118:	cf 92       	push	r12
    611a:	df 92       	push	r13
    611c:	ef 92       	push	r14
    611e:	ff 92       	push	r15
    6120:	0f 93       	push	r16
    6122:	1f 93       	push	r17
    6124:	df 93       	push	r29
    6126:	cf 93       	push	r28
    6128:	cd b7       	in	r28, 0x3d	; 61
    612a:	de b7       	in	r29, 0x3e	; 62
    612c:	cf 54       	subi	r28, 0x4F	; 79
    612e:	d0 40       	sbci	r29, 0x00	; 0
    6130:	0f b6       	in	r0, 0x3f	; 63
    6132:	f8 94       	cli
    6134:	de bf       	out	0x3e, r29	; 62
    6136:	0f be       	out	0x3f, r0	; 63
    6138:	cd bf       	out	0x3d, r28	; 61
    613a:	89 83       	std	Y+1, r24	; 0x01
	DESIRED_TIME_TIMER2 = (u64)Copy_U8Time*1000 ;                                    //time in ms
    613c:	89 81       	ldd	r24, Y+1	; 0x01
    613e:	08 2f       	mov	r16, r24
    6140:	10 e0       	ldi	r17, 0x00	; 0
    6142:	20 e0       	ldi	r18, 0x00	; 0
    6144:	30 e0       	ldi	r19, 0x00	; 0
    6146:	40 e0       	ldi	r20, 0x00	; 0
    6148:	50 e0       	ldi	r21, 0x00	; 0
    614a:	60 e0       	ldi	r22, 0x00	; 0
    614c:	70 e0       	ldi	r23, 0x00	; 0
    614e:	0a 83       	std	Y+2, r16	; 0x02
    6150:	1b 83       	std	Y+3, r17	; 0x03
    6152:	2c 83       	std	Y+4, r18	; 0x04
    6154:	3d 83       	std	Y+5, r19	; 0x05
    6156:	4e 83       	std	Y+6, r20	; 0x06
    6158:	5f 83       	std	Y+7, r21	; 0x07
    615a:	68 87       	std	Y+8, r22	; 0x08
    615c:	79 87       	std	Y+9, r23	; 0x09
    615e:	aa 80       	ldd	r10, Y+2	; 0x02
    6160:	bb 80       	ldd	r11, Y+3	; 0x03
    6162:	cc 80       	ldd	r12, Y+4	; 0x04
    6164:	dd 80       	ldd	r13, Y+5	; 0x05
    6166:	ee 80       	ldd	r14, Y+6	; 0x06
    6168:	ff 80       	ldd	r15, Y+7	; 0x07
    616a:	08 85       	ldd	r16, Y+8	; 0x08
    616c:	19 85       	ldd	r17, Y+9	; 0x09
    616e:	2a 2d       	mov	r18, r10
    6170:	3b 2d       	mov	r19, r11
    6172:	4c 2d       	mov	r20, r12
    6174:	5d 2d       	mov	r21, r13
    6176:	6e 2d       	mov	r22, r14
    6178:	7f 2d       	mov	r23, r15
    617a:	80 2f       	mov	r24, r16
    617c:	91 2f       	mov	r25, r17
    617e:	02 e0       	ldi	r16, 0x02	; 2
    6180:	0e 94 44 01 	call	0x288	; 0x288 <__ashldi3>
    6184:	2a 87       	std	Y+10, r18	; 0x0a
    6186:	3b 87       	std	Y+11, r19	; 0x0b
    6188:	4c 87       	std	Y+12, r20	; 0x0c
    618a:	5d 87       	std	Y+13, r21	; 0x0d
    618c:	6e 87       	std	Y+14, r22	; 0x0e
    618e:	7f 87       	std	Y+15, r23	; 0x0f
    6190:	88 8b       	std	Y+16, r24	; 0x10
    6192:	99 8b       	std	Y+17, r25	; 0x11
    6194:	2a 85       	ldd	r18, Y+10	; 0x0a
    6196:	3b 85       	ldd	r19, Y+11	; 0x0b
    6198:	4c 85       	ldd	r20, Y+12	; 0x0c
    619a:	5d 85       	ldd	r21, Y+13	; 0x0d
    619c:	6e 85       	ldd	r22, Y+14	; 0x0e
    619e:	7f 85       	ldd	r23, Y+15	; 0x0f
    61a0:	88 89       	ldd	r24, Y+16	; 0x10
    61a2:	99 89       	ldd	r25, Y+17	; 0x11
    61a4:	05 e0       	ldi	r16, 0x05	; 5
    61a6:	0e 94 44 01 	call	0x288	; 0x288 <__ashldi3>
    61aa:	2a 8b       	std	Y+18, r18	; 0x12
    61ac:	3b 8b       	std	Y+19, r19	; 0x13
    61ae:	4c 8b       	std	Y+20, r20	; 0x14
    61b0:	5d 8b       	std	Y+21, r21	; 0x15
    61b2:	6e 8b       	std	Y+22, r22	; 0x16
    61b4:	7f 8b       	std	Y+23, r23	; 0x17
    61b6:	88 8f       	std	Y+24, r24	; 0x18
    61b8:	99 8f       	std	Y+25, r25	; 0x19
    61ba:	1a 89       	ldd	r17, Y+18	; 0x12
    61bc:	2a 85       	ldd	r18, Y+10	; 0x0a
    61be:	12 1b       	sub	r17, r18
    61c0:	1a 8f       	std	Y+26, r17	; 0x1a
    61c2:	31 e0       	ldi	r19, 0x01	; 1
    61c4:	3a a3       	std	Y+34, r19	; 0x22
    61c6:	4a 8d       	ldd	r20, Y+26	; 0x1a
    61c8:	5a 89       	ldd	r21, Y+18	; 0x12
    61ca:	54 17       	cp	r21, r20
    61cc:	08 f0       	brcs	.+2      	; 0x61d0 <TIMER2_Set_Time_S+0xc4>
    61ce:	1a a2       	std	Y+34, r1	; 0x22
    61d0:	6b 89       	ldd	r22, Y+19	; 0x13
    61d2:	7b 85       	ldd	r23, Y+11	; 0x0b
    61d4:	67 1b       	sub	r22, r23
    61d6:	6b 8f       	std	Y+27, r22	; 0x1b
    61d8:	81 e0       	ldi	r24, 0x01	; 1
    61da:	8b a3       	std	Y+35, r24	; 0x23
    61dc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    61de:	eb 89       	ldd	r30, Y+19	; 0x13
    61e0:	e9 17       	cp	r30, r25
    61e2:	08 f0       	brcs	.+2      	; 0x61e6 <TIMER2_Set_Time_S+0xda>
    61e4:	1b a2       	std	Y+35, r1	; 0x23
    61e6:	fb 8d       	ldd	r31, Y+27	; 0x1b
    61e8:	0a a1       	ldd	r16, Y+34	; 0x22
    61ea:	f0 1b       	sub	r31, r16
    61ec:	fc a3       	std	Y+36, r31	; 0x24
    61ee:	11 e0       	ldi	r17, 0x01	; 1
    61f0:	1d a3       	std	Y+37, r17	; 0x25
    61f2:	2c a1       	ldd	r18, Y+36	; 0x24
    61f4:	3b 8d       	ldd	r19, Y+27	; 0x1b
    61f6:	32 17       	cp	r19, r18
    61f8:	08 f0       	brcs	.+2      	; 0x61fc <TIMER2_Set_Time_S+0xf0>
    61fa:	1d a2       	std	Y+37, r1	; 0x25
    61fc:	4b a1       	ldd	r20, Y+35	; 0x23
    61fe:	5d a1       	ldd	r21, Y+37	; 0x25
    6200:	45 2b       	or	r20, r21
    6202:	4b a3       	std	Y+35, r20	; 0x23
    6204:	6c a1       	ldd	r22, Y+36	; 0x24
    6206:	6b 8f       	std	Y+27, r22	; 0x1b
    6208:	7c 89       	ldd	r23, Y+20	; 0x14
    620a:	8c 85       	ldd	r24, Y+12	; 0x0c
    620c:	78 1b       	sub	r23, r24
    620e:	7c 8f       	std	Y+28, r23	; 0x1c
    6210:	91 e0       	ldi	r25, 0x01	; 1
    6212:	9e a3       	std	Y+38, r25	; 0x26
    6214:	ec 8d       	ldd	r30, Y+28	; 0x1c
    6216:	fc 89       	ldd	r31, Y+20	; 0x14
    6218:	fe 17       	cp	r31, r30
    621a:	08 f0       	brcs	.+2      	; 0x621e <TIMER2_Set_Time_S+0x112>
    621c:	1e a2       	std	Y+38, r1	; 0x26
    621e:	0c 8d       	ldd	r16, Y+28	; 0x1c
    6220:	1b a1       	ldd	r17, Y+35	; 0x23
    6222:	01 1b       	sub	r16, r17
    6224:	0f a3       	std	Y+39, r16	; 0x27
    6226:	21 e0       	ldi	r18, 0x01	; 1
    6228:	28 a7       	std	Y+40, r18	; 0x28
    622a:	3f a1       	ldd	r19, Y+39	; 0x27
    622c:	4c 8d       	ldd	r20, Y+28	; 0x1c
    622e:	43 17       	cp	r20, r19
    6230:	08 f0       	brcs	.+2      	; 0x6234 <TIMER2_Set_Time_S+0x128>
    6232:	18 a6       	std	Y+40, r1	; 0x28
    6234:	5e a1       	ldd	r21, Y+38	; 0x26
    6236:	68 a5       	ldd	r22, Y+40	; 0x28
    6238:	56 2b       	or	r21, r22
    623a:	5e a3       	std	Y+38, r21	; 0x26
    623c:	7f a1       	ldd	r23, Y+39	; 0x27
    623e:	7c 8f       	std	Y+28, r23	; 0x1c
    6240:	8d 89       	ldd	r24, Y+21	; 0x15
    6242:	9d 85       	ldd	r25, Y+13	; 0x0d
    6244:	89 1b       	sub	r24, r25
    6246:	8d 8f       	std	Y+29, r24	; 0x1d
    6248:	e1 e0       	ldi	r30, 0x01	; 1
    624a:	e9 a7       	std	Y+41, r30	; 0x29
    624c:	fd 8d       	ldd	r31, Y+29	; 0x1d
    624e:	0d 89       	ldd	r16, Y+21	; 0x15
    6250:	0f 17       	cp	r16, r31
    6252:	08 f0       	brcs	.+2      	; 0x6256 <TIMER2_Set_Time_S+0x14a>
    6254:	19 a6       	std	Y+41, r1	; 0x29
    6256:	1d 8d       	ldd	r17, Y+29	; 0x1d
    6258:	2e a1       	ldd	r18, Y+38	; 0x26
    625a:	12 1b       	sub	r17, r18
    625c:	1a a7       	std	Y+42, r17	; 0x2a
    625e:	31 e0       	ldi	r19, 0x01	; 1
    6260:	3b a7       	std	Y+43, r19	; 0x2b
    6262:	4a a5       	ldd	r20, Y+42	; 0x2a
    6264:	5d 8d       	ldd	r21, Y+29	; 0x1d
    6266:	54 17       	cp	r21, r20
    6268:	08 f0       	brcs	.+2      	; 0x626c <TIMER2_Set_Time_S+0x160>
    626a:	1b a6       	std	Y+43, r1	; 0x2b
    626c:	69 a5       	ldd	r22, Y+41	; 0x29
    626e:	7b a5       	ldd	r23, Y+43	; 0x2b
    6270:	67 2b       	or	r22, r23
    6272:	69 a7       	std	Y+41, r22	; 0x29
    6274:	8a a5       	ldd	r24, Y+42	; 0x2a
    6276:	8d 8f       	std	Y+29, r24	; 0x1d
    6278:	9e 89       	ldd	r25, Y+22	; 0x16
    627a:	ee 85       	ldd	r30, Y+14	; 0x0e
    627c:	9e 1b       	sub	r25, r30
    627e:	9e 8f       	std	Y+30, r25	; 0x1e
    6280:	f1 e0       	ldi	r31, 0x01	; 1
    6282:	fc a7       	std	Y+44, r31	; 0x2c
    6284:	0e 8d       	ldd	r16, Y+30	; 0x1e
    6286:	1e 89       	ldd	r17, Y+22	; 0x16
    6288:	10 17       	cp	r17, r16
    628a:	08 f0       	brcs	.+2      	; 0x628e <TIMER2_Set_Time_S+0x182>
    628c:	1c a6       	std	Y+44, r1	; 0x2c
    628e:	2e 8d       	ldd	r18, Y+30	; 0x1e
    6290:	39 a5       	ldd	r19, Y+41	; 0x29
    6292:	23 1b       	sub	r18, r19
    6294:	2d a7       	std	Y+45, r18	; 0x2d
    6296:	41 e0       	ldi	r20, 0x01	; 1
    6298:	4e a7       	std	Y+46, r20	; 0x2e
    629a:	5d a5       	ldd	r21, Y+45	; 0x2d
    629c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    629e:	65 17       	cp	r22, r21
    62a0:	08 f0       	brcs	.+2      	; 0x62a4 <TIMER2_Set_Time_S+0x198>
    62a2:	1e a6       	std	Y+46, r1	; 0x2e
    62a4:	7c a5       	ldd	r23, Y+44	; 0x2c
    62a6:	8e a5       	ldd	r24, Y+46	; 0x2e
    62a8:	78 2b       	or	r23, r24
    62aa:	7c a7       	std	Y+44, r23	; 0x2c
    62ac:	9d a5       	ldd	r25, Y+45	; 0x2d
    62ae:	9e 8f       	std	Y+30, r25	; 0x1e
    62b0:	ef 89       	ldd	r30, Y+23	; 0x17
    62b2:	ff 85       	ldd	r31, Y+15	; 0x0f
    62b4:	ef 1b       	sub	r30, r31
    62b6:	ef 8f       	std	Y+31, r30	; 0x1f
    62b8:	01 e0       	ldi	r16, 0x01	; 1
    62ba:	0f a7       	std	Y+47, r16	; 0x2f
    62bc:	1f 8d       	ldd	r17, Y+31	; 0x1f
    62be:	2f 89       	ldd	r18, Y+23	; 0x17
    62c0:	21 17       	cp	r18, r17
    62c2:	08 f0       	brcs	.+2      	; 0x62c6 <TIMER2_Set_Time_S+0x1ba>
    62c4:	1f a6       	std	Y+47, r1	; 0x2f
    62c6:	3f 8d       	ldd	r19, Y+31	; 0x1f
    62c8:	4c a5       	ldd	r20, Y+44	; 0x2c
    62ca:	34 1b       	sub	r19, r20
    62cc:	38 ab       	std	Y+48, r19	; 0x30
    62ce:	51 e0       	ldi	r21, 0x01	; 1
    62d0:	59 ab       	std	Y+49, r21	; 0x31
    62d2:	68 a9       	ldd	r22, Y+48	; 0x30
    62d4:	7f 8d       	ldd	r23, Y+31	; 0x1f
    62d6:	76 17       	cp	r23, r22
    62d8:	08 f0       	brcs	.+2      	; 0x62dc <TIMER2_Set_Time_S+0x1d0>
    62da:	19 aa       	std	Y+49, r1	; 0x31
    62dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    62de:	99 a9       	ldd	r25, Y+49	; 0x31
    62e0:	89 2b       	or	r24, r25
    62e2:	8f a7       	std	Y+47, r24	; 0x2f
    62e4:	e8 a9       	ldd	r30, Y+48	; 0x30
    62e6:	ef 8f       	std	Y+31, r30	; 0x1f
    62e8:	f8 8d       	ldd	r31, Y+24	; 0x18
    62ea:	08 89       	ldd	r16, Y+16	; 0x10
    62ec:	f0 1b       	sub	r31, r16
    62ee:	f8 a3       	std	Y+32, r31	; 0x20
    62f0:	11 e0       	ldi	r17, 0x01	; 1
    62f2:	1a ab       	std	Y+50, r17	; 0x32
    62f4:	28 a1       	ldd	r18, Y+32	; 0x20
    62f6:	38 8d       	ldd	r19, Y+24	; 0x18
    62f8:	32 17       	cp	r19, r18
    62fa:	08 f0       	brcs	.+2      	; 0x62fe <TIMER2_Set_Time_S+0x1f2>
    62fc:	1a aa       	std	Y+50, r1	; 0x32
    62fe:	48 a1       	ldd	r20, Y+32	; 0x20
    6300:	5f a5       	ldd	r21, Y+47	; 0x2f
    6302:	45 1b       	sub	r20, r21
    6304:	4b ab       	std	Y+51, r20	; 0x33
    6306:	61 e0       	ldi	r22, 0x01	; 1
    6308:	6c ab       	std	Y+52, r22	; 0x34
    630a:	7b a9       	ldd	r23, Y+51	; 0x33
    630c:	88 a1       	ldd	r24, Y+32	; 0x20
    630e:	87 17       	cp	r24, r23
    6310:	08 f0       	brcs	.+2      	; 0x6314 <TIMER2_Set_Time_S+0x208>
    6312:	1c aa       	std	Y+52, r1	; 0x34
    6314:	9a a9       	ldd	r25, Y+50	; 0x32
    6316:	ec a9       	ldd	r30, Y+52	; 0x34
    6318:	9e 2b       	or	r25, r30
    631a:	9a ab       	std	Y+50, r25	; 0x32
    631c:	fb a9       	ldd	r31, Y+51	; 0x33
    631e:	f8 a3       	std	Y+32, r31	; 0x20
    6320:	09 8d       	ldd	r16, Y+25	; 0x19
    6322:	19 89       	ldd	r17, Y+17	; 0x11
    6324:	01 1b       	sub	r16, r17
    6326:	09 a3       	std	Y+33, r16	; 0x21
    6328:	89 a1       	ldd	r24, Y+33	; 0x21
    632a:	2a a9       	ldd	r18, Y+50	; 0x32
    632c:	82 1b       	sub	r24, r18
    632e:	89 a3       	std	Y+33, r24	; 0x21
    6330:	3a 8d       	ldd	r19, Y+26	; 0x1a
    6332:	3a 8b       	std	Y+18, r19	; 0x12
    6334:	4b 8d       	ldd	r20, Y+27	; 0x1b
    6336:	4b 8b       	std	Y+19, r20	; 0x13
    6338:	5c 8d       	ldd	r21, Y+28	; 0x1c
    633a:	5c 8b       	std	Y+20, r21	; 0x14
    633c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    633e:	6d 8b       	std	Y+21, r22	; 0x15
    6340:	7e 8d       	ldd	r23, Y+30	; 0x1e
    6342:	7e 8b       	std	Y+22, r23	; 0x16
    6344:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6346:	8f 8b       	std	Y+23, r24	; 0x17
    6348:	98 a1       	ldd	r25, Y+32	; 0x20
    634a:	98 8f       	std	Y+24, r25	; 0x18
    634c:	e9 a1       	ldd	r30, Y+33	; 0x21
    634e:	e9 8f       	std	Y+25, r30	; 0x19
    6350:	fa 89       	ldd	r31, Y+18	; 0x12
    6352:	0a 81       	ldd	r16, Y+2	; 0x02
    6354:	f0 0f       	add	r31, r16
    6356:	fd ab       	std	Y+53, r31	; 0x35
    6358:	11 e0       	ldi	r17, 0x01	; 1
    635a:	1d af       	std	Y+61, r17	; 0x3d
    635c:	2d a9       	ldd	r18, Y+53	; 0x35
    635e:	3a 89       	ldd	r19, Y+18	; 0x12
    6360:	23 17       	cp	r18, r19
    6362:	08 f0       	brcs	.+2      	; 0x6366 <TIMER2_Set_Time_S+0x25a>
    6364:	1d ae       	std	Y+61, r1	; 0x3d
    6366:	4b 89       	ldd	r20, Y+19	; 0x13
    6368:	5b 81       	ldd	r21, Y+3	; 0x03
    636a:	45 0f       	add	r20, r21
    636c:	4e ab       	std	Y+54, r20	; 0x36
    636e:	61 e0       	ldi	r22, 0x01	; 1
    6370:	6e af       	std	Y+62, r22	; 0x3e
    6372:	7e a9       	ldd	r23, Y+54	; 0x36
    6374:	8b 89       	ldd	r24, Y+19	; 0x13
    6376:	78 17       	cp	r23, r24
    6378:	08 f0       	brcs	.+2      	; 0x637c <TIMER2_Set_Time_S+0x270>
    637a:	1e ae       	std	Y+62, r1	; 0x3e
    637c:	9d ad       	ldd	r25, Y+61	; 0x3d
    637e:	ee a9       	ldd	r30, Y+54	; 0x36
    6380:	9e 0f       	add	r25, r30
    6382:	9f af       	std	Y+63, r25	; 0x3f
    6384:	f1 e0       	ldi	r31, 0x01	; 1
    6386:	21 96       	adiw	r28, 0x01	; 1
    6388:	ff af       	std	Y+63, r31	; 0x3f
    638a:	21 97       	sbiw	r28, 0x01	; 1
    638c:	0f ad       	ldd	r16, Y+63	; 0x3f
    638e:	1e a9       	ldd	r17, Y+54	; 0x36
    6390:	01 17       	cp	r16, r17
    6392:	18 f0       	brcs	.+6      	; 0x639a <TIMER2_Set_Time_S+0x28e>
    6394:	21 96       	adiw	r28, 0x01	; 1
    6396:	1f ae       	std	Y+63, r1	; 0x3f
    6398:	21 97       	sbiw	r28, 0x01	; 1
    639a:	2e ad       	ldd	r18, Y+62	; 0x3e
    639c:	21 96       	adiw	r28, 0x01	; 1
    639e:	3f ad       	ldd	r19, Y+63	; 0x3f
    63a0:	21 97       	sbiw	r28, 0x01	; 1
    63a2:	23 2b       	or	r18, r19
    63a4:	2e af       	std	Y+62, r18	; 0x3e
    63a6:	4f ad       	ldd	r20, Y+63	; 0x3f
    63a8:	4e ab       	std	Y+54, r20	; 0x36
    63aa:	5c 89       	ldd	r21, Y+20	; 0x14
    63ac:	6c 81       	ldd	r22, Y+4	; 0x04
    63ae:	56 0f       	add	r21, r22
    63b0:	5f ab       	std	Y+55, r21	; 0x37
    63b2:	71 e0       	ldi	r23, 0x01	; 1
    63b4:	22 96       	adiw	r28, 0x02	; 2
    63b6:	7f af       	std	Y+63, r23	; 0x3f
    63b8:	22 97       	sbiw	r28, 0x02	; 2
    63ba:	8f a9       	ldd	r24, Y+55	; 0x37
    63bc:	9c 89       	ldd	r25, Y+20	; 0x14
    63be:	89 17       	cp	r24, r25
    63c0:	18 f0       	brcs	.+6      	; 0x63c8 <TIMER2_Set_Time_S+0x2bc>
    63c2:	22 96       	adiw	r28, 0x02	; 2
    63c4:	1f ae       	std	Y+63, r1	; 0x3f
    63c6:	22 97       	sbiw	r28, 0x02	; 2
    63c8:	ee ad       	ldd	r30, Y+62	; 0x3e
    63ca:	ff a9       	ldd	r31, Y+55	; 0x37
    63cc:	ef 0f       	add	r30, r31
    63ce:	23 96       	adiw	r28, 0x03	; 3
    63d0:	ef af       	std	Y+63, r30	; 0x3f
    63d2:	23 97       	sbiw	r28, 0x03	; 3
    63d4:	01 e0       	ldi	r16, 0x01	; 1
    63d6:	24 96       	adiw	r28, 0x04	; 4
    63d8:	0f af       	std	Y+63, r16	; 0x3f
    63da:	24 97       	sbiw	r28, 0x04	; 4
    63dc:	23 96       	adiw	r28, 0x03	; 3
    63de:	1f ad       	ldd	r17, Y+63	; 0x3f
    63e0:	23 97       	sbiw	r28, 0x03	; 3
    63e2:	2f a9       	ldd	r18, Y+55	; 0x37
    63e4:	12 17       	cp	r17, r18
    63e6:	18 f0       	brcs	.+6      	; 0x63ee <TIMER2_Set_Time_S+0x2e2>
    63e8:	24 96       	adiw	r28, 0x04	; 4
    63ea:	1f ae       	std	Y+63, r1	; 0x3f
    63ec:	24 97       	sbiw	r28, 0x04	; 4
    63ee:	22 96       	adiw	r28, 0x02	; 2
    63f0:	3f ad       	ldd	r19, Y+63	; 0x3f
    63f2:	22 97       	sbiw	r28, 0x02	; 2
    63f4:	24 96       	adiw	r28, 0x04	; 4
    63f6:	4f ad       	ldd	r20, Y+63	; 0x3f
    63f8:	24 97       	sbiw	r28, 0x04	; 4
    63fa:	34 2b       	or	r19, r20
    63fc:	22 96       	adiw	r28, 0x02	; 2
    63fe:	3f af       	std	Y+63, r19	; 0x3f
    6400:	22 97       	sbiw	r28, 0x02	; 2
    6402:	23 96       	adiw	r28, 0x03	; 3
    6404:	5f ad       	ldd	r21, Y+63	; 0x3f
    6406:	23 97       	sbiw	r28, 0x03	; 3
    6408:	5f ab       	std	Y+55, r21	; 0x37
    640a:	6d 89       	ldd	r22, Y+21	; 0x15
    640c:	7d 81       	ldd	r23, Y+5	; 0x05
    640e:	67 0f       	add	r22, r23
    6410:	68 af       	std	Y+56, r22	; 0x38
    6412:	81 e0       	ldi	r24, 0x01	; 1
    6414:	25 96       	adiw	r28, 0x05	; 5
    6416:	8f af       	std	Y+63, r24	; 0x3f
    6418:	25 97       	sbiw	r28, 0x05	; 5
    641a:	98 ad       	ldd	r25, Y+56	; 0x38
    641c:	ed 89       	ldd	r30, Y+21	; 0x15
    641e:	9e 17       	cp	r25, r30
    6420:	18 f0       	brcs	.+6      	; 0x6428 <TIMER2_Set_Time_S+0x31c>
    6422:	25 96       	adiw	r28, 0x05	; 5
    6424:	1f ae       	std	Y+63, r1	; 0x3f
    6426:	25 97       	sbiw	r28, 0x05	; 5
    6428:	22 96       	adiw	r28, 0x02	; 2
    642a:	ff ad       	ldd	r31, Y+63	; 0x3f
    642c:	22 97       	sbiw	r28, 0x02	; 2
    642e:	08 ad       	ldd	r16, Y+56	; 0x38
    6430:	f0 0f       	add	r31, r16
    6432:	26 96       	adiw	r28, 0x06	; 6
    6434:	ff af       	std	Y+63, r31	; 0x3f
    6436:	26 97       	sbiw	r28, 0x06	; 6
    6438:	11 e0       	ldi	r17, 0x01	; 1
    643a:	27 96       	adiw	r28, 0x07	; 7
    643c:	1f af       	std	Y+63, r17	; 0x3f
    643e:	27 97       	sbiw	r28, 0x07	; 7
    6440:	26 96       	adiw	r28, 0x06	; 6
    6442:	2f ad       	ldd	r18, Y+63	; 0x3f
    6444:	26 97       	sbiw	r28, 0x06	; 6
    6446:	38 ad       	ldd	r19, Y+56	; 0x38
    6448:	23 17       	cp	r18, r19
    644a:	18 f0       	brcs	.+6      	; 0x6452 <TIMER2_Set_Time_S+0x346>
    644c:	27 96       	adiw	r28, 0x07	; 7
    644e:	1f ae       	std	Y+63, r1	; 0x3f
    6450:	27 97       	sbiw	r28, 0x07	; 7
    6452:	25 96       	adiw	r28, 0x05	; 5
    6454:	4f ad       	ldd	r20, Y+63	; 0x3f
    6456:	25 97       	sbiw	r28, 0x05	; 5
    6458:	27 96       	adiw	r28, 0x07	; 7
    645a:	5f ad       	ldd	r21, Y+63	; 0x3f
    645c:	27 97       	sbiw	r28, 0x07	; 7
    645e:	45 2b       	or	r20, r21
    6460:	25 96       	adiw	r28, 0x05	; 5
    6462:	4f af       	std	Y+63, r20	; 0x3f
    6464:	25 97       	sbiw	r28, 0x05	; 5
    6466:	26 96       	adiw	r28, 0x06	; 6
    6468:	6f ad       	ldd	r22, Y+63	; 0x3f
    646a:	26 97       	sbiw	r28, 0x06	; 6
    646c:	68 af       	std	Y+56, r22	; 0x38
    646e:	7e 89       	ldd	r23, Y+22	; 0x16
    6470:	8e 81       	ldd	r24, Y+6	; 0x06
    6472:	78 0f       	add	r23, r24
    6474:	79 af       	std	Y+57, r23	; 0x39
    6476:	91 e0       	ldi	r25, 0x01	; 1
    6478:	28 96       	adiw	r28, 0x08	; 8
    647a:	9f af       	std	Y+63, r25	; 0x3f
    647c:	28 97       	sbiw	r28, 0x08	; 8
    647e:	e9 ad       	ldd	r30, Y+57	; 0x39
    6480:	fe 89       	ldd	r31, Y+22	; 0x16
    6482:	ef 17       	cp	r30, r31
    6484:	18 f0       	brcs	.+6      	; 0x648c <TIMER2_Set_Time_S+0x380>
    6486:	28 96       	adiw	r28, 0x08	; 8
    6488:	1f ae       	std	Y+63, r1	; 0x3f
    648a:	28 97       	sbiw	r28, 0x08	; 8
    648c:	25 96       	adiw	r28, 0x05	; 5
    648e:	0f ad       	ldd	r16, Y+63	; 0x3f
    6490:	25 97       	sbiw	r28, 0x05	; 5
    6492:	19 ad       	ldd	r17, Y+57	; 0x39
    6494:	01 0f       	add	r16, r17
    6496:	29 96       	adiw	r28, 0x09	; 9
    6498:	0f af       	std	Y+63, r16	; 0x3f
    649a:	29 97       	sbiw	r28, 0x09	; 9
    649c:	21 e0       	ldi	r18, 0x01	; 1
    649e:	2a 96       	adiw	r28, 0x0a	; 10
    64a0:	2f af       	std	Y+63, r18	; 0x3f
    64a2:	2a 97       	sbiw	r28, 0x0a	; 10
    64a4:	29 96       	adiw	r28, 0x09	; 9
    64a6:	3f ad       	ldd	r19, Y+63	; 0x3f
    64a8:	29 97       	sbiw	r28, 0x09	; 9
    64aa:	49 ad       	ldd	r20, Y+57	; 0x39
    64ac:	34 17       	cp	r19, r20
    64ae:	18 f0       	brcs	.+6      	; 0x64b6 <TIMER2_Set_Time_S+0x3aa>
    64b0:	2a 96       	adiw	r28, 0x0a	; 10
    64b2:	1f ae       	std	Y+63, r1	; 0x3f
    64b4:	2a 97       	sbiw	r28, 0x0a	; 10
    64b6:	28 96       	adiw	r28, 0x08	; 8
    64b8:	5f ad       	ldd	r21, Y+63	; 0x3f
    64ba:	28 97       	sbiw	r28, 0x08	; 8
    64bc:	2a 96       	adiw	r28, 0x0a	; 10
    64be:	6f ad       	ldd	r22, Y+63	; 0x3f
    64c0:	2a 97       	sbiw	r28, 0x0a	; 10
    64c2:	56 2b       	or	r21, r22
    64c4:	28 96       	adiw	r28, 0x08	; 8
    64c6:	5f af       	std	Y+63, r21	; 0x3f
    64c8:	28 97       	sbiw	r28, 0x08	; 8
    64ca:	29 96       	adiw	r28, 0x09	; 9
    64cc:	7f ad       	ldd	r23, Y+63	; 0x3f
    64ce:	29 97       	sbiw	r28, 0x09	; 9
    64d0:	79 af       	std	Y+57, r23	; 0x39
    64d2:	8f 89       	ldd	r24, Y+23	; 0x17
    64d4:	9f 81       	ldd	r25, Y+7	; 0x07
    64d6:	89 0f       	add	r24, r25
    64d8:	8a af       	std	Y+58, r24	; 0x3a
    64da:	e1 e0       	ldi	r30, 0x01	; 1
    64dc:	2b 96       	adiw	r28, 0x0b	; 11
    64de:	ef af       	std	Y+63, r30	; 0x3f
    64e0:	2b 97       	sbiw	r28, 0x0b	; 11
    64e2:	fa ad       	ldd	r31, Y+58	; 0x3a
    64e4:	0f 89       	ldd	r16, Y+23	; 0x17
    64e6:	f0 17       	cp	r31, r16
    64e8:	18 f0       	brcs	.+6      	; 0x64f0 <TIMER2_Set_Time_S+0x3e4>
    64ea:	2b 96       	adiw	r28, 0x0b	; 11
    64ec:	1f ae       	std	Y+63, r1	; 0x3f
    64ee:	2b 97       	sbiw	r28, 0x0b	; 11
    64f0:	28 96       	adiw	r28, 0x08	; 8
    64f2:	1f ad       	ldd	r17, Y+63	; 0x3f
    64f4:	28 97       	sbiw	r28, 0x08	; 8
    64f6:	2a ad       	ldd	r18, Y+58	; 0x3a
    64f8:	12 0f       	add	r17, r18
    64fa:	2c 96       	adiw	r28, 0x0c	; 12
    64fc:	1f af       	std	Y+63, r17	; 0x3f
    64fe:	2c 97       	sbiw	r28, 0x0c	; 12
    6500:	31 e0       	ldi	r19, 0x01	; 1
    6502:	2d 96       	adiw	r28, 0x0d	; 13
    6504:	3f af       	std	Y+63, r19	; 0x3f
    6506:	2d 97       	sbiw	r28, 0x0d	; 13
    6508:	2c 96       	adiw	r28, 0x0c	; 12
    650a:	4f ad       	ldd	r20, Y+63	; 0x3f
    650c:	2c 97       	sbiw	r28, 0x0c	; 12
    650e:	5a ad       	ldd	r21, Y+58	; 0x3a
    6510:	45 17       	cp	r20, r21
    6512:	18 f0       	brcs	.+6      	; 0x651a <TIMER2_Set_Time_S+0x40e>
    6514:	2d 96       	adiw	r28, 0x0d	; 13
    6516:	1f ae       	std	Y+63, r1	; 0x3f
    6518:	2d 97       	sbiw	r28, 0x0d	; 13
    651a:	2b 96       	adiw	r28, 0x0b	; 11
    651c:	6f ad       	ldd	r22, Y+63	; 0x3f
    651e:	2b 97       	sbiw	r28, 0x0b	; 11
    6520:	2d 96       	adiw	r28, 0x0d	; 13
    6522:	7f ad       	ldd	r23, Y+63	; 0x3f
    6524:	2d 97       	sbiw	r28, 0x0d	; 13
    6526:	67 2b       	or	r22, r23
    6528:	2b 96       	adiw	r28, 0x0b	; 11
    652a:	6f af       	std	Y+63, r22	; 0x3f
    652c:	2b 97       	sbiw	r28, 0x0b	; 11
    652e:	2c 96       	adiw	r28, 0x0c	; 12
    6530:	8f ad       	ldd	r24, Y+63	; 0x3f
    6532:	2c 97       	sbiw	r28, 0x0c	; 12
    6534:	8a af       	std	Y+58, r24	; 0x3a
    6536:	98 8d       	ldd	r25, Y+24	; 0x18
    6538:	e8 85       	ldd	r30, Y+8	; 0x08
    653a:	9e 0f       	add	r25, r30
    653c:	9b af       	std	Y+59, r25	; 0x3b
    653e:	f1 e0       	ldi	r31, 0x01	; 1
    6540:	2e 96       	adiw	r28, 0x0e	; 14
    6542:	ff af       	std	Y+63, r31	; 0x3f
    6544:	2e 97       	sbiw	r28, 0x0e	; 14
    6546:	0b ad       	ldd	r16, Y+59	; 0x3b
    6548:	18 8d       	ldd	r17, Y+24	; 0x18
    654a:	01 17       	cp	r16, r17
    654c:	18 f0       	brcs	.+6      	; 0x6554 <TIMER2_Set_Time_S+0x448>
    654e:	2e 96       	adiw	r28, 0x0e	; 14
    6550:	1f ae       	std	Y+63, r1	; 0x3f
    6552:	2e 97       	sbiw	r28, 0x0e	; 14
    6554:	2b 96       	adiw	r28, 0x0b	; 11
    6556:	2f ad       	ldd	r18, Y+63	; 0x3f
    6558:	2b 97       	sbiw	r28, 0x0b	; 11
    655a:	3b ad       	ldd	r19, Y+59	; 0x3b
    655c:	23 0f       	add	r18, r19
    655e:	2f 96       	adiw	r28, 0x0f	; 15
    6560:	2f af       	std	Y+63, r18	; 0x3f
    6562:	2f 97       	sbiw	r28, 0x0f	; 15
    6564:	41 e0       	ldi	r20, 0x01	; 1
    6566:	60 96       	adiw	r28, 0x10	; 16
    6568:	4f af       	std	Y+63, r20	; 0x3f
    656a:	60 97       	sbiw	r28, 0x10	; 16
    656c:	2f 96       	adiw	r28, 0x0f	; 15
    656e:	5f ad       	ldd	r21, Y+63	; 0x3f
    6570:	2f 97       	sbiw	r28, 0x0f	; 15
    6572:	6b ad       	ldd	r22, Y+59	; 0x3b
    6574:	56 17       	cp	r21, r22
    6576:	18 f0       	brcs	.+6      	; 0x657e <TIMER2_Set_Time_S+0x472>
    6578:	60 96       	adiw	r28, 0x10	; 16
    657a:	1f ae       	std	Y+63, r1	; 0x3f
    657c:	60 97       	sbiw	r28, 0x10	; 16
    657e:	2e 96       	adiw	r28, 0x0e	; 14
    6580:	7f ad       	ldd	r23, Y+63	; 0x3f
    6582:	2e 97       	sbiw	r28, 0x0e	; 14
    6584:	60 96       	adiw	r28, 0x10	; 16
    6586:	8f ad       	ldd	r24, Y+63	; 0x3f
    6588:	60 97       	sbiw	r28, 0x10	; 16
    658a:	78 2b       	or	r23, r24
    658c:	2e 96       	adiw	r28, 0x0e	; 14
    658e:	7f af       	std	Y+63, r23	; 0x3f
    6590:	2e 97       	sbiw	r28, 0x0e	; 14
    6592:	2f 96       	adiw	r28, 0x0f	; 15
    6594:	9f ad       	ldd	r25, Y+63	; 0x3f
    6596:	2f 97       	sbiw	r28, 0x0f	; 15
    6598:	9b af       	std	Y+59, r25	; 0x3b
    659a:	e9 8d       	ldd	r30, Y+25	; 0x19
    659c:	f9 85       	ldd	r31, Y+9	; 0x09
    659e:	ef 0f       	add	r30, r31
    65a0:	ec af       	std	Y+60, r30	; 0x3c
    65a2:	2e 96       	adiw	r28, 0x0e	; 14
    65a4:	8f ad       	ldd	r24, Y+63	; 0x3f
    65a6:	2e 97       	sbiw	r28, 0x0e	; 14
    65a8:	0c ad       	ldd	r16, Y+60	; 0x3c
    65aa:	80 0f       	add	r24, r16
    65ac:	8c af       	std	Y+60, r24	; 0x3c
    65ae:	1d a9       	ldd	r17, Y+53	; 0x35
    65b0:	1a 8b       	std	Y+18, r17	; 0x12
    65b2:	2e a9       	ldd	r18, Y+54	; 0x36
    65b4:	2b 8b       	std	Y+19, r18	; 0x13
    65b6:	3f a9       	ldd	r19, Y+55	; 0x37
    65b8:	3c 8b       	std	Y+20, r19	; 0x14
    65ba:	48 ad       	ldd	r20, Y+56	; 0x38
    65bc:	4d 8b       	std	Y+21, r20	; 0x15
    65be:	59 ad       	ldd	r21, Y+57	; 0x39
    65c0:	5e 8b       	std	Y+22, r21	; 0x16
    65c2:	6a ad       	ldd	r22, Y+58	; 0x3a
    65c4:	6f 8b       	std	Y+23, r22	; 0x17
    65c6:	7b ad       	ldd	r23, Y+59	; 0x3b
    65c8:	78 8f       	std	Y+24, r23	; 0x18
    65ca:	8c ad       	ldd	r24, Y+60	; 0x3c
    65cc:	89 8f       	std	Y+25, r24	; 0x19
    65ce:	2a 89       	ldd	r18, Y+18	; 0x12
    65d0:	3b 89       	ldd	r19, Y+19	; 0x13
    65d2:	4c 89       	ldd	r20, Y+20	; 0x14
    65d4:	5d 89       	ldd	r21, Y+21	; 0x15
    65d6:	6e 89       	ldd	r22, Y+22	; 0x16
    65d8:	7f 89       	ldd	r23, Y+23	; 0x17
    65da:	88 8d       	ldd	r24, Y+24	; 0x18
    65dc:	99 8d       	ldd	r25, Y+25	; 0x19
    65de:	03 e0       	ldi	r16, 0x03	; 3
    65e0:	0e 94 44 01 	call	0x288	; 0x288 <__ashldi3>
    65e4:	a2 2e       	mov	r10, r18
    65e6:	b3 2e       	mov	r11, r19
    65e8:	c4 2e       	mov	r12, r20
    65ea:	d5 2e       	mov	r13, r21
    65ec:	e6 2e       	mov	r14, r22
    65ee:	f7 2e       	mov	r15, r23
    65f0:	08 2f       	mov	r16, r24
    65f2:	19 2f       	mov	r17, r25
    65f4:	2a 2d       	mov	r18, r10
    65f6:	3b 2d       	mov	r19, r11
    65f8:	4c 2d       	mov	r20, r12
    65fa:	5d 2d       	mov	r21, r13
    65fc:	6e 2d       	mov	r22, r14
    65fe:	7f 2d       	mov	r23, r15
    6600:	80 2f       	mov	r24, r16
    6602:	91 2f       	mov	r25, r17
    6604:	20 93 50 02 	sts	0x0250, r18
    6608:	30 93 51 02 	sts	0x0251, r19
    660c:	40 93 52 02 	sts	0x0252, r20
    6610:	50 93 53 02 	sts	0x0253, r21
    6614:	60 93 54 02 	sts	0x0254, r22
    6618:	70 93 55 02 	sts	0x0255, r23
    661c:	80 93 56 02 	sts	0x0256, r24
    6620:	90 93 57 02 	sts	0x0257, r25
    T_OV_TIMER2 = (256*(f32)PRE_SCALAR_TIMER2)/8000 ;                                //time in ms
    6624:	80 91 58 02 	lds	r24, 0x0258
    6628:	90 91 59 02 	lds	r25, 0x0259
    662c:	cc 01       	movw	r24, r24
    662e:	a0 e0       	ldi	r26, 0x00	; 0
    6630:	b0 e0       	ldi	r27, 0x00	; 0
    6632:	bc 01       	movw	r22, r24
    6634:	cd 01       	movw	r24, r26
    6636:	0e 94 42 14 	call	0x2884	; 0x2884 <__floatunsisf>
    663a:	dc 01       	movw	r26, r24
    663c:	cb 01       	movw	r24, r22
    663e:	bc 01       	movw	r22, r24
    6640:	cd 01       	movw	r24, r26
    6642:	20 e0       	ldi	r18, 0x00	; 0
    6644:	30 e0       	ldi	r19, 0x00	; 0
    6646:	40 e8       	ldi	r20, 0x80	; 128
    6648:	53 e4       	ldi	r21, 0x43	; 67
    664a:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    664e:	dc 01       	movw	r26, r24
    6650:	cb 01       	movw	r24, r22
    6652:	bc 01       	movw	r22, r24
    6654:	cd 01       	movw	r24, r26
    6656:	20 e0       	ldi	r18, 0x00	; 0
    6658:	30 e0       	ldi	r19, 0x00	; 0
    665a:	4a ef       	ldi	r20, 0xFA	; 250
    665c:	55 e4       	ldi	r21, 0x45	; 69
    665e:	0e 94 54 12 	call	0x24a8	; 0x24a8 <__divsf3>
    6662:	dc 01       	movw	r26, r24
    6664:	cb 01       	movw	r24, r22
    6666:	80 93 5a 02 	sts	0x025A, r24
    666a:	90 93 5b 02 	sts	0x025B, r25
    666e:	a0 93 5c 02 	sts	0x025C, r26
    6672:	b0 93 5d 02 	sts	0x025D, r27
	NUM_OV_TIMER2 = DESIRED_TIME_TIMER2 / T_OV_TIMER2 ;                              //number of overflow wanted in entered if
    6676:	a0 90 50 02 	lds	r10, 0x0250
    667a:	b0 90 51 02 	lds	r11, 0x0251
    667e:	c0 90 52 02 	lds	r12, 0x0252
    6682:	d0 90 53 02 	lds	r13, 0x0253
    6686:	e0 90 54 02 	lds	r14, 0x0254
    668a:	f0 90 55 02 	lds	r15, 0x0255
    668e:	00 91 56 02 	lds	r16, 0x0256
    6692:	10 91 57 02 	lds	r17, 0x0257
    6696:	2a 2d       	mov	r18, r10
    6698:	3b 2d       	mov	r19, r11
    669a:	4c 2d       	mov	r20, r12
    669c:	5d 2d       	mov	r21, r13
    669e:	6e 2d       	mov	r22, r14
    66a0:	7f 2d       	mov	r23, r15
    66a2:	80 2f       	mov	r24, r16
    66a4:	91 2f       	mov	r25, r17
    66a6:	0e 94 ef 01 	call	0x3de	; 0x3de <__floatundisf>
    66aa:	dc 01       	movw	r26, r24
    66ac:	cb 01       	movw	r24, r22
    66ae:	20 91 5a 02 	lds	r18, 0x025A
    66b2:	30 91 5b 02 	lds	r19, 0x025B
    66b6:	40 91 5c 02 	lds	r20, 0x025C
    66ba:	50 91 5d 02 	lds	r21, 0x025D
    66be:	bc 01       	movw	r22, r24
    66c0:	cd 01       	movw	r24, r26
    66c2:	0e 94 54 12 	call	0x24a8	; 0x24a8 <__divsf3>
    66c6:	dc 01       	movw	r26, r24
    66c8:	cb 01       	movw	r24, r22
    66ca:	80 93 5e 02 	sts	0x025E, r24
    66ce:	90 93 5f 02 	sts	0x025F, r25
    66d2:	a0 93 60 02 	sts	0x0260, r26
    66d6:	b0 93 61 02 	sts	0x0261, r27
	PRE_LOAD_TIMER2  = NUM_OV_TIMER2 -( (u32)(DESIRED_TIME_TIMER2 /T_OV_TIMER2) );   //the value which should be in TCNT to make time more accurate
    66da:	60 90 5e 02 	lds	r6, 0x025E
    66de:	70 90 5f 02 	lds	r7, 0x025F
    66e2:	80 90 60 02 	lds	r8, 0x0260
    66e6:	90 90 61 02 	lds	r9, 0x0261
    66ea:	a0 90 50 02 	lds	r10, 0x0250
    66ee:	b0 90 51 02 	lds	r11, 0x0251
    66f2:	c0 90 52 02 	lds	r12, 0x0252
    66f6:	d0 90 53 02 	lds	r13, 0x0253
    66fa:	e0 90 54 02 	lds	r14, 0x0254
    66fe:	f0 90 55 02 	lds	r15, 0x0255
    6702:	00 91 56 02 	lds	r16, 0x0256
    6706:	10 91 57 02 	lds	r17, 0x0257
    670a:	2a 2d       	mov	r18, r10
    670c:	3b 2d       	mov	r19, r11
    670e:	4c 2d       	mov	r20, r12
    6710:	5d 2d       	mov	r21, r13
    6712:	6e 2d       	mov	r22, r14
    6714:	7f 2d       	mov	r23, r15
    6716:	80 2f       	mov	r24, r16
    6718:	91 2f       	mov	r25, r17
    671a:	0e 94 ef 01 	call	0x3de	; 0x3de <__floatundisf>
    671e:	dc 01       	movw	r26, r24
    6720:	cb 01       	movw	r24, r22
    6722:	20 91 5a 02 	lds	r18, 0x025A
    6726:	30 91 5b 02 	lds	r19, 0x025B
    672a:	40 91 5c 02 	lds	r20, 0x025C
    672e:	50 91 5d 02 	lds	r21, 0x025D
    6732:	bc 01       	movw	r22, r24
    6734:	cd 01       	movw	r24, r26
    6736:	0e 94 54 12 	call	0x24a8	; 0x24a8 <__divsf3>
    673a:	dc 01       	movw	r26, r24
    673c:	cb 01       	movw	r24, r22
    673e:	bc 01       	movw	r22, r24
    6740:	cd 01       	movw	r24, r26
    6742:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    6746:	dc 01       	movw	r26, r24
    6748:	cb 01       	movw	r24, r22
    674a:	bc 01       	movw	r22, r24
    674c:	cd 01       	movw	r24, r26
    674e:	0e 94 42 14 	call	0x2884	; 0x2884 <__floatunsisf>
    6752:	9b 01       	movw	r18, r22
    6754:	ac 01       	movw	r20, r24
    6756:	c4 01       	movw	r24, r8
    6758:	b3 01       	movw	r22, r6
    675a:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__subsf3>
    675e:	dc 01       	movw	r26, r24
    6760:	cb 01       	movw	r24, r22
    6762:	80 93 62 02 	sts	0x0262, r24
    6766:	90 93 63 02 	sts	0x0263, r25
    676a:	a0 93 64 02 	sts	0x0264, r26
    676e:	b0 93 65 02 	sts	0x0265, r27
	if ( NUM_OV_TIMER2 > (u32)NUM_OV_TIMER2 ){
    6772:	80 91 5e 02 	lds	r24, 0x025E
    6776:	90 91 5f 02 	lds	r25, 0x025F
    677a:	a0 91 60 02 	lds	r26, 0x0260
    677e:	b0 91 61 02 	lds	r27, 0x0261
    6782:	bc 01       	movw	r22, r24
    6784:	cd 01       	movw	r24, r26
    6786:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    678a:	dc 01       	movw	r26, r24
    678c:	cb 01       	movw	r24, r22
    678e:	bc 01       	movw	r22, r24
    6790:	cd 01       	movw	r24, r26
    6792:	0e 94 42 14 	call	0x2884	; 0x2884 <__floatunsisf>
    6796:	dc 01       	movw	r26, r24
    6798:	cb 01       	movw	r24, r22
    679a:	20 91 5e 02 	lds	r18, 0x025E
    679e:	30 91 5f 02 	lds	r19, 0x025F
    67a2:	40 91 60 02 	lds	r20, 0x0260
    67a6:	50 91 61 02 	lds	r21, 0x0261
    67aa:	bc 01       	movw	r22, r24
    67ac:	cd 01       	movw	r24, r26
    67ae:	0e 94 60 13 	call	0x26c0	; 0x26c0 <__ltsf2>
    67b2:	88 23       	and	r24, r24
    67b4:	d4 f4       	brge	.+52     	; 0x67ea <TIMER2_Set_Time_S+0x6de>
		NUM_OV_TIMER2++;
    67b6:	80 91 5e 02 	lds	r24, 0x025E
    67ba:	90 91 5f 02 	lds	r25, 0x025F
    67be:	a0 91 60 02 	lds	r26, 0x0260
    67c2:	b0 91 61 02 	lds	r27, 0x0261
    67c6:	bc 01       	movw	r22, r24
    67c8:	cd 01       	movw	r24, r26
    67ca:	20 e0       	ldi	r18, 0x00	; 0
    67cc:	30 e0       	ldi	r19, 0x00	; 0
    67ce:	40 e8       	ldi	r20, 0x80	; 128
    67d0:	5f e3       	ldi	r21, 0x3F	; 63
    67d2:	0e 94 2d 11 	call	0x225a	; 0x225a <__addsf3>
    67d6:	dc 01       	movw	r26, r24
    67d8:	cb 01       	movw	r24, r22
    67da:	80 93 5e 02 	sts	0x025E, r24
    67de:	90 93 5f 02 	sts	0x025F, r25
    67e2:	a0 93 60 02 	sts	0x0260, r26
    67e6:	b0 93 61 02 	sts	0x0261, r27
	}//end if

	//to begin from specific value
	TCNT2 = 256-(256*PRE_LOAD_TIMER2 );
    67ea:	04 e4       	ldi	r16, 0x44	; 68
    67ec:	10 e0       	ldi	r17, 0x00	; 0
    67ee:	80 91 62 02 	lds	r24, 0x0262
    67f2:	90 91 63 02 	lds	r25, 0x0263
    67f6:	a0 91 64 02 	lds	r26, 0x0264
    67fa:	b0 91 65 02 	lds	r27, 0x0265
    67fe:	bc 01       	movw	r22, r24
    6800:	cd 01       	movw	r24, r26
    6802:	20 e0       	ldi	r18, 0x00	; 0
    6804:	30 e0       	ldi	r19, 0x00	; 0
    6806:	40 e8       	ldi	r20, 0x80	; 128
    6808:	53 ec       	ldi	r21, 0xC3	; 195
    680a:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    680e:	dc 01       	movw	r26, r24
    6810:	cb 01       	movw	r24, r22
    6812:	bc 01       	movw	r22, r24
    6814:	cd 01       	movw	r24, r26
    6816:	20 e0       	ldi	r18, 0x00	; 0
    6818:	30 e0       	ldi	r19, 0x00	; 0
    681a:	40 e8       	ldi	r20, 0x80	; 128
    681c:	53 e4       	ldi	r21, 0x43	; 67
    681e:	0e 94 2d 11 	call	0x225a	; 0x225a <__addsf3>
    6822:	dc 01       	movw	r26, r24
    6824:	cb 01       	movw	r24, r22
    6826:	bc 01       	movw	r22, r24
    6828:	cd 01       	movw	r24, r26
    682a:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    682e:	dc 01       	movw	r26, r24
    6830:	cb 01       	movw	r24, r22
    6832:	f8 01       	movw	r30, r16
    6834:	80 83       	st	Z, r24
}
    6836:	c1 5b       	subi	r28, 0xB1	; 177
    6838:	df 4f       	sbci	r29, 0xFF	; 255
    683a:	0f b6       	in	r0, 0x3f	; 63
    683c:	f8 94       	cli
    683e:	de bf       	out	0x3e, r29	; 62
    6840:	0f be       	out	0x3f, r0	; 63
    6842:	cd bf       	out	0x3d, r28	; 61
    6844:	cf 91       	pop	r28
    6846:	df 91       	pop	r29
    6848:	1f 91       	pop	r17
    684a:	0f 91       	pop	r16
    684c:	ff 90       	pop	r15
    684e:	ef 90       	pop	r14
    6850:	df 90       	pop	r13
    6852:	cf 90       	pop	r12
    6854:	bf 90       	pop	r11
    6856:	af 90       	pop	r10
    6858:	9f 90       	pop	r9
    685a:	8f 90       	pop	r8
    685c:	7f 90       	pop	r7
    685e:	6f 90       	pop	r6
    6860:	08 95       	ret

00006862 <TIMER2_Set_Time_mS>:

void TIMER2_Set_Time_mS (u16 Copy_U8Time){
    6862:	6f 92       	push	r6
    6864:	7f 92       	push	r7
    6866:	8f 92       	push	r8
    6868:	9f 92       	push	r9
    686a:	af 92       	push	r10
    686c:	bf 92       	push	r11
    686e:	cf 92       	push	r12
    6870:	df 92       	push	r13
    6872:	ef 92       	push	r14
    6874:	ff 92       	push	r15
    6876:	0f 93       	push	r16
    6878:	1f 93       	push	r17
    687a:	df 93       	push	r29
    687c:	cf 93       	push	r28
    687e:	00 d0       	rcall	.+0      	; 0x6880 <TIMER2_Set_Time_mS+0x1e>
    6880:	cd b7       	in	r28, 0x3d	; 61
    6882:	de b7       	in	r29, 0x3e	; 62
    6884:	9a 83       	std	Y+2, r25	; 0x02
    6886:	89 83       	std	Y+1, r24	; 0x01
	DESIRED_TIME_TIMER2 = Copy_U8Time ;                         //time in ms
    6888:	89 81       	ldd	r24, Y+1	; 0x01
    688a:	9a 81       	ldd	r25, Y+2	; 0x02
    688c:	9c 01       	movw	r18, r24
    688e:	40 e0       	ldi	r20, 0x00	; 0
    6890:	50 e0       	ldi	r21, 0x00	; 0
    6892:	60 e0       	ldi	r22, 0x00	; 0
    6894:	70 e0       	ldi	r23, 0x00	; 0
    6896:	80 e0       	ldi	r24, 0x00	; 0
    6898:	90 e0       	ldi	r25, 0x00	; 0
    689a:	20 93 50 02 	sts	0x0250, r18
    689e:	30 93 51 02 	sts	0x0251, r19
    68a2:	40 93 52 02 	sts	0x0252, r20
    68a6:	50 93 53 02 	sts	0x0253, r21
    68aa:	60 93 54 02 	sts	0x0254, r22
    68ae:	70 93 55 02 	sts	0x0255, r23
    68b2:	80 93 56 02 	sts	0x0256, r24
    68b6:	90 93 57 02 	sts	0x0257, r25
    T_OV_TIMER2 = (256*(f32)PRE_SCALAR_TIMER2)/8000 ;                  //time in us
    68ba:	80 91 58 02 	lds	r24, 0x0258
    68be:	90 91 59 02 	lds	r25, 0x0259
    68c2:	cc 01       	movw	r24, r24
    68c4:	a0 e0       	ldi	r26, 0x00	; 0
    68c6:	b0 e0       	ldi	r27, 0x00	; 0
    68c8:	bc 01       	movw	r22, r24
    68ca:	cd 01       	movw	r24, r26
    68cc:	0e 94 42 14 	call	0x2884	; 0x2884 <__floatunsisf>
    68d0:	dc 01       	movw	r26, r24
    68d2:	cb 01       	movw	r24, r22
    68d4:	bc 01       	movw	r22, r24
    68d6:	cd 01       	movw	r24, r26
    68d8:	20 e0       	ldi	r18, 0x00	; 0
    68da:	30 e0       	ldi	r19, 0x00	; 0
    68dc:	40 e8       	ldi	r20, 0x80	; 128
    68de:	53 e4       	ldi	r21, 0x43	; 67
    68e0:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    68e4:	dc 01       	movw	r26, r24
    68e6:	cb 01       	movw	r24, r22
    68e8:	bc 01       	movw	r22, r24
    68ea:	cd 01       	movw	r24, r26
    68ec:	20 e0       	ldi	r18, 0x00	; 0
    68ee:	30 e0       	ldi	r19, 0x00	; 0
    68f0:	4a ef       	ldi	r20, 0xFA	; 250
    68f2:	55 e4       	ldi	r21, 0x45	; 69
    68f4:	0e 94 54 12 	call	0x24a8	; 0x24a8 <__divsf3>
    68f8:	dc 01       	movw	r26, r24
    68fa:	cb 01       	movw	r24, r22
    68fc:	80 93 5a 02 	sts	0x025A, r24
    6900:	90 93 5b 02 	sts	0x025B, r25
    6904:	a0 93 5c 02 	sts	0x025C, r26
    6908:	b0 93 5d 02 	sts	0x025D, r27
	NUM_OV_TIMER2 = DESIRED_TIME_TIMER2 / T_OV_TIMER2 ;                       //number of overflow wanted in entered if
    690c:	a0 90 50 02 	lds	r10, 0x0250
    6910:	b0 90 51 02 	lds	r11, 0x0251
    6914:	c0 90 52 02 	lds	r12, 0x0252
    6918:	d0 90 53 02 	lds	r13, 0x0253
    691c:	e0 90 54 02 	lds	r14, 0x0254
    6920:	f0 90 55 02 	lds	r15, 0x0255
    6924:	00 91 56 02 	lds	r16, 0x0256
    6928:	10 91 57 02 	lds	r17, 0x0257
    692c:	2a 2d       	mov	r18, r10
    692e:	3b 2d       	mov	r19, r11
    6930:	4c 2d       	mov	r20, r12
    6932:	5d 2d       	mov	r21, r13
    6934:	6e 2d       	mov	r22, r14
    6936:	7f 2d       	mov	r23, r15
    6938:	80 2f       	mov	r24, r16
    693a:	91 2f       	mov	r25, r17
    693c:	0e 94 ef 01 	call	0x3de	; 0x3de <__floatundisf>
    6940:	dc 01       	movw	r26, r24
    6942:	cb 01       	movw	r24, r22
    6944:	20 91 5a 02 	lds	r18, 0x025A
    6948:	30 91 5b 02 	lds	r19, 0x025B
    694c:	40 91 5c 02 	lds	r20, 0x025C
    6950:	50 91 5d 02 	lds	r21, 0x025D
    6954:	bc 01       	movw	r22, r24
    6956:	cd 01       	movw	r24, r26
    6958:	0e 94 54 12 	call	0x24a8	; 0x24a8 <__divsf3>
    695c:	dc 01       	movw	r26, r24
    695e:	cb 01       	movw	r24, r22
    6960:	80 93 5e 02 	sts	0x025E, r24
    6964:	90 93 5f 02 	sts	0x025F, r25
    6968:	a0 93 60 02 	sts	0x0260, r26
    696c:	b0 93 61 02 	sts	0x0261, r27
	PRE_LOAD_TIMER2  = NUM_OV_TIMER2 -( (u32)(DESIRED_TIME_TIMER2 /T_OV_TIMER2) );   //the value which should be in TCNT to make time more accurate
    6970:	60 90 5e 02 	lds	r6, 0x025E
    6974:	70 90 5f 02 	lds	r7, 0x025F
    6978:	80 90 60 02 	lds	r8, 0x0260
    697c:	90 90 61 02 	lds	r9, 0x0261
    6980:	a0 90 50 02 	lds	r10, 0x0250
    6984:	b0 90 51 02 	lds	r11, 0x0251
    6988:	c0 90 52 02 	lds	r12, 0x0252
    698c:	d0 90 53 02 	lds	r13, 0x0253
    6990:	e0 90 54 02 	lds	r14, 0x0254
    6994:	f0 90 55 02 	lds	r15, 0x0255
    6998:	00 91 56 02 	lds	r16, 0x0256
    699c:	10 91 57 02 	lds	r17, 0x0257
    69a0:	2a 2d       	mov	r18, r10
    69a2:	3b 2d       	mov	r19, r11
    69a4:	4c 2d       	mov	r20, r12
    69a6:	5d 2d       	mov	r21, r13
    69a8:	6e 2d       	mov	r22, r14
    69aa:	7f 2d       	mov	r23, r15
    69ac:	80 2f       	mov	r24, r16
    69ae:	91 2f       	mov	r25, r17
    69b0:	0e 94 ef 01 	call	0x3de	; 0x3de <__floatundisf>
    69b4:	dc 01       	movw	r26, r24
    69b6:	cb 01       	movw	r24, r22
    69b8:	20 91 5a 02 	lds	r18, 0x025A
    69bc:	30 91 5b 02 	lds	r19, 0x025B
    69c0:	40 91 5c 02 	lds	r20, 0x025C
    69c4:	50 91 5d 02 	lds	r21, 0x025D
    69c8:	bc 01       	movw	r22, r24
    69ca:	cd 01       	movw	r24, r26
    69cc:	0e 94 54 12 	call	0x24a8	; 0x24a8 <__divsf3>
    69d0:	dc 01       	movw	r26, r24
    69d2:	cb 01       	movw	r24, r22
    69d4:	bc 01       	movw	r22, r24
    69d6:	cd 01       	movw	r24, r26
    69d8:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    69dc:	dc 01       	movw	r26, r24
    69de:	cb 01       	movw	r24, r22
    69e0:	bc 01       	movw	r22, r24
    69e2:	cd 01       	movw	r24, r26
    69e4:	0e 94 42 14 	call	0x2884	; 0x2884 <__floatunsisf>
    69e8:	9b 01       	movw	r18, r22
    69ea:	ac 01       	movw	r20, r24
    69ec:	c4 01       	movw	r24, r8
    69ee:	b3 01       	movw	r22, r6
    69f0:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__subsf3>
    69f4:	dc 01       	movw	r26, r24
    69f6:	cb 01       	movw	r24, r22
    69f8:	80 93 62 02 	sts	0x0262, r24
    69fc:	90 93 63 02 	sts	0x0263, r25
    6a00:	a0 93 64 02 	sts	0x0264, r26
    6a04:	b0 93 65 02 	sts	0x0265, r27
	if ( NUM_OV_TIMER2 > (u32)NUM_OV_TIMER2 ){
    6a08:	80 91 5e 02 	lds	r24, 0x025E
    6a0c:	90 91 5f 02 	lds	r25, 0x025F
    6a10:	a0 91 60 02 	lds	r26, 0x0260
    6a14:	b0 91 61 02 	lds	r27, 0x0261
    6a18:	bc 01       	movw	r22, r24
    6a1a:	cd 01       	movw	r24, r26
    6a1c:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    6a20:	dc 01       	movw	r26, r24
    6a22:	cb 01       	movw	r24, r22
    6a24:	bc 01       	movw	r22, r24
    6a26:	cd 01       	movw	r24, r26
    6a28:	0e 94 42 14 	call	0x2884	; 0x2884 <__floatunsisf>
    6a2c:	dc 01       	movw	r26, r24
    6a2e:	cb 01       	movw	r24, r22
    6a30:	20 91 5e 02 	lds	r18, 0x025E
    6a34:	30 91 5f 02 	lds	r19, 0x025F
    6a38:	40 91 60 02 	lds	r20, 0x0260
    6a3c:	50 91 61 02 	lds	r21, 0x0261
    6a40:	bc 01       	movw	r22, r24
    6a42:	cd 01       	movw	r24, r26
    6a44:	0e 94 60 13 	call	0x26c0	; 0x26c0 <__ltsf2>
    6a48:	88 23       	and	r24, r24
    6a4a:	d4 f4       	brge	.+52     	; 0x6a80 <TIMER2_Set_Time_mS+0x21e>
		NUM_OV_TIMER2++;
    6a4c:	80 91 5e 02 	lds	r24, 0x025E
    6a50:	90 91 5f 02 	lds	r25, 0x025F
    6a54:	a0 91 60 02 	lds	r26, 0x0260
    6a58:	b0 91 61 02 	lds	r27, 0x0261
    6a5c:	bc 01       	movw	r22, r24
    6a5e:	cd 01       	movw	r24, r26
    6a60:	20 e0       	ldi	r18, 0x00	; 0
    6a62:	30 e0       	ldi	r19, 0x00	; 0
    6a64:	40 e8       	ldi	r20, 0x80	; 128
    6a66:	5f e3       	ldi	r21, 0x3F	; 63
    6a68:	0e 94 2d 11 	call	0x225a	; 0x225a <__addsf3>
    6a6c:	dc 01       	movw	r26, r24
    6a6e:	cb 01       	movw	r24, r22
    6a70:	80 93 5e 02 	sts	0x025E, r24
    6a74:	90 93 5f 02 	sts	0x025F, r25
    6a78:	a0 93 60 02 	sts	0x0260, r26
    6a7c:	b0 93 61 02 	sts	0x0261, r27
#if PRE_TYPE_TIMER2 != PRE_8
#error "YOU SELECTED PRE_SCALAR MAKE MORE THAN 1 ms"
#endif

	//to begin from specific value
	TCNT2 = 256-(256*PRE_LOAD_TIMER2 );
    6a80:	04 e4       	ldi	r16, 0x44	; 68
    6a82:	10 e0       	ldi	r17, 0x00	; 0
    6a84:	80 91 62 02 	lds	r24, 0x0262
    6a88:	90 91 63 02 	lds	r25, 0x0263
    6a8c:	a0 91 64 02 	lds	r26, 0x0264
    6a90:	b0 91 65 02 	lds	r27, 0x0265
    6a94:	bc 01       	movw	r22, r24
    6a96:	cd 01       	movw	r24, r26
    6a98:	20 e0       	ldi	r18, 0x00	; 0
    6a9a:	30 e0       	ldi	r19, 0x00	; 0
    6a9c:	40 e8       	ldi	r20, 0x80	; 128
    6a9e:	53 ec       	ldi	r21, 0xC3	; 195
    6aa0:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    6aa4:	dc 01       	movw	r26, r24
    6aa6:	cb 01       	movw	r24, r22
    6aa8:	bc 01       	movw	r22, r24
    6aaa:	cd 01       	movw	r24, r26
    6aac:	20 e0       	ldi	r18, 0x00	; 0
    6aae:	30 e0       	ldi	r19, 0x00	; 0
    6ab0:	40 e8       	ldi	r20, 0x80	; 128
    6ab2:	53 e4       	ldi	r21, 0x43	; 67
    6ab4:	0e 94 2d 11 	call	0x225a	; 0x225a <__addsf3>
    6ab8:	dc 01       	movw	r26, r24
    6aba:	cb 01       	movw	r24, r22
    6abc:	bc 01       	movw	r22, r24
    6abe:	cd 01       	movw	r24, r26
    6ac0:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    6ac4:	dc 01       	movw	r26, r24
    6ac6:	cb 01       	movw	r24, r22
    6ac8:	f8 01       	movw	r30, r16
    6aca:	80 83       	st	Z, r24
}
    6acc:	0f 90       	pop	r0
    6ace:	0f 90       	pop	r0
    6ad0:	cf 91       	pop	r28
    6ad2:	df 91       	pop	r29
    6ad4:	1f 91       	pop	r17
    6ad6:	0f 91       	pop	r16
    6ad8:	ff 90       	pop	r15
    6ada:	ef 90       	pop	r14
    6adc:	df 90       	pop	r13
    6ade:	cf 90       	pop	r12
    6ae0:	bf 90       	pop	r11
    6ae2:	af 90       	pop	r10
    6ae4:	9f 90       	pop	r9
    6ae6:	8f 90       	pop	r8
    6ae8:	7f 90       	pop	r7
    6aea:	6f 90       	pop	r6
    6aec:	08 95       	ret

00006aee <__vector_11>:
    4) PRE_256  every 1sec need t_ov = 8.192ms  , num_ov = 122.0703125 , pre_load = 0.0703125
    5) PRE_1024 every 1sec need t_ov = 32.768ms , num_ov = 30.51757813 , pre_load = 0.51757813
*/

/****************************************************************************/
void __vector_11(void){
    6aee:	1f 92       	push	r1
    6af0:	0f 92       	push	r0
    6af2:	0f b6       	in	r0, 0x3f	; 63
    6af4:	0f 92       	push	r0
    6af6:	11 24       	eor	r1, r1
    6af8:	0f 93       	push	r16
    6afa:	1f 93       	push	r17
    6afc:	2f 93       	push	r18
    6afe:	3f 93       	push	r19
    6b00:	4f 93       	push	r20
    6b02:	5f 93       	push	r21
    6b04:	6f 93       	push	r22
    6b06:	7f 93       	push	r23
    6b08:	8f 93       	push	r24
    6b0a:	9f 93       	push	r25
    6b0c:	af 93       	push	r26
    6b0e:	bf 93       	push	r27
    6b10:	ef 93       	push	r30
    6b12:	ff 93       	push	r31
    6b14:	df 93       	push	r29
    6b16:	cf 93       	push	r28
    6b18:	cd b7       	in	r28, 0x3d	; 61
    6b1a:	de b7       	in	r29, 0x3e	; 62
	static u32 tick = 0 ;
	tick++ ;
    6b1c:	80 91 28 02 	lds	r24, 0x0228
    6b20:	90 91 29 02 	lds	r25, 0x0229
    6b24:	a0 91 2a 02 	lds	r26, 0x022A
    6b28:	b0 91 2b 02 	lds	r27, 0x022B
    6b2c:	01 96       	adiw	r24, 0x01	; 1
    6b2e:	a1 1d       	adc	r26, r1
    6b30:	b1 1d       	adc	r27, r1
    6b32:	80 93 28 02 	sts	0x0228, r24
    6b36:	90 93 29 02 	sts	0x0229, r25
    6b3a:	a0 93 2a 02 	sts	0x022A, r26
    6b3e:	b0 93 2b 02 	sts	0x022B, r27

	if (tick == (u32)NUM_OV_TIMER0 ){
    6b42:	80 91 3e 02 	lds	r24, 0x023E
    6b46:	90 91 3f 02 	lds	r25, 0x023F
    6b4a:	a0 91 40 02 	lds	r26, 0x0240
    6b4e:	b0 91 41 02 	lds	r27, 0x0241
    6b52:	bc 01       	movw	r22, r24
    6b54:	cd 01       	movw	r24, r26
    6b56:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    6b5a:	9b 01       	movw	r18, r22
    6b5c:	ac 01       	movw	r20, r24
    6b5e:	80 91 28 02 	lds	r24, 0x0228
    6b62:	90 91 29 02 	lds	r25, 0x0229
    6b66:	a0 91 2a 02 	lds	r26, 0x022A
    6b6a:	b0 91 2b 02 	lds	r27, 0x022B
    6b6e:	28 17       	cp	r18, r24
    6b70:	39 07       	cpc	r19, r25
    6b72:	4a 07       	cpc	r20, r26
    6b74:	5b 07       	cpc	r21, r27
    6b76:	99 f5       	brne	.+102    	; 0x6bde <__vector_11+0xf0>
		TIMER0_PFUNC();                                     //to toggle led
    6b78:	e0 91 22 02 	lds	r30, 0x0222
    6b7c:	f0 91 23 02 	lds	r31, 0x0223
    6b80:	09 95       	icall
		TCNT0 = 256-(256*PRE_LOAD_TIMER0);                         //to begin from specific value
    6b82:	02 e5       	ldi	r16, 0x52	; 82
    6b84:	10 e0       	ldi	r17, 0x00	; 0
    6b86:	80 91 42 02 	lds	r24, 0x0242
    6b8a:	90 91 43 02 	lds	r25, 0x0243
    6b8e:	a0 91 44 02 	lds	r26, 0x0244
    6b92:	b0 91 45 02 	lds	r27, 0x0245
    6b96:	bc 01       	movw	r22, r24
    6b98:	cd 01       	movw	r24, r26
    6b9a:	20 e0       	ldi	r18, 0x00	; 0
    6b9c:	30 e0       	ldi	r19, 0x00	; 0
    6b9e:	40 e8       	ldi	r20, 0x80	; 128
    6ba0:	53 ec       	ldi	r21, 0xC3	; 195
    6ba2:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    6ba6:	dc 01       	movw	r26, r24
    6ba8:	cb 01       	movw	r24, r22
    6baa:	bc 01       	movw	r22, r24
    6bac:	cd 01       	movw	r24, r26
    6bae:	20 e0       	ldi	r18, 0x00	; 0
    6bb0:	30 e0       	ldi	r19, 0x00	; 0
    6bb2:	40 e8       	ldi	r20, 0x80	; 128
    6bb4:	53 e4       	ldi	r21, 0x43	; 67
    6bb6:	0e 94 2d 11 	call	0x225a	; 0x225a <__addsf3>
    6bba:	dc 01       	movw	r26, r24
    6bbc:	cb 01       	movw	r24, r22
    6bbe:	bc 01       	movw	r22, r24
    6bc0:	cd 01       	movw	r24, r26
    6bc2:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    6bc6:	dc 01       	movw	r26, r24
    6bc8:	cb 01       	movw	r24, r22
    6bca:	f8 01       	movw	r30, r16
    6bcc:	80 83       	st	Z, r24
		tick = 0 ;                                          //to start count from beginning again
    6bce:	10 92 28 02 	sts	0x0228, r1
    6bd2:	10 92 29 02 	sts	0x0229, r1
    6bd6:	10 92 2a 02 	sts	0x022A, r1
    6bda:	10 92 2b 02 	sts	0x022B, r1
	}//end if
}//end ISR FUNC
    6bde:	cf 91       	pop	r28
    6be0:	df 91       	pop	r29
    6be2:	ff 91       	pop	r31
    6be4:	ef 91       	pop	r30
    6be6:	bf 91       	pop	r27
    6be8:	af 91       	pop	r26
    6bea:	9f 91       	pop	r25
    6bec:	8f 91       	pop	r24
    6bee:	7f 91       	pop	r23
    6bf0:	6f 91       	pop	r22
    6bf2:	5f 91       	pop	r21
    6bf4:	4f 91       	pop	r20
    6bf6:	3f 91       	pop	r19
    6bf8:	2f 91       	pop	r18
    6bfa:	1f 91       	pop	r17
    6bfc:	0f 91       	pop	r16
    6bfe:	0f 90       	pop	r0
    6c00:	0f be       	out	0x3f, r0	; 63
    6c02:	0f 90       	pop	r0
    6c04:	1f 90       	pop	r1
    6c06:	18 95       	reti

00006c08 <__vector_5>:


/****************************************************************************/

void __vector_5(void){
    6c08:	1f 92       	push	r1
    6c0a:	0f 92       	push	r0
    6c0c:	0f b6       	in	r0, 0x3f	; 63
    6c0e:	0f 92       	push	r0
    6c10:	11 24       	eor	r1, r1
    6c12:	0f 93       	push	r16
    6c14:	1f 93       	push	r17
    6c16:	2f 93       	push	r18
    6c18:	3f 93       	push	r19
    6c1a:	4f 93       	push	r20
    6c1c:	5f 93       	push	r21
    6c1e:	6f 93       	push	r22
    6c20:	7f 93       	push	r23
    6c22:	8f 93       	push	r24
    6c24:	9f 93       	push	r25
    6c26:	af 93       	push	r26
    6c28:	bf 93       	push	r27
    6c2a:	ef 93       	push	r30
    6c2c:	ff 93       	push	r31
    6c2e:	df 93       	push	r29
    6c30:	cf 93       	push	r28
    6c32:	cd b7       	in	r28, 0x3d	; 61
    6c34:	de b7       	in	r29, 0x3e	; 62
	static u32 tick = 0 ;
	tick++ ;
    6c36:	80 91 2c 02 	lds	r24, 0x022C
    6c3a:	90 91 2d 02 	lds	r25, 0x022D
    6c3e:	a0 91 2e 02 	lds	r26, 0x022E
    6c42:	b0 91 2f 02 	lds	r27, 0x022F
    6c46:	01 96       	adiw	r24, 0x01	; 1
    6c48:	a1 1d       	adc	r26, r1
    6c4a:	b1 1d       	adc	r27, r1
    6c4c:	80 93 2c 02 	sts	0x022C, r24
    6c50:	90 93 2d 02 	sts	0x022D, r25
    6c54:	a0 93 2e 02 	sts	0x022E, r26
    6c58:	b0 93 2f 02 	sts	0x022F, r27

	if (tick == (u32)NUM_OV_TIMER2 ){
    6c5c:	80 91 5e 02 	lds	r24, 0x025E
    6c60:	90 91 5f 02 	lds	r25, 0x025F
    6c64:	a0 91 60 02 	lds	r26, 0x0260
    6c68:	b0 91 61 02 	lds	r27, 0x0261
    6c6c:	bc 01       	movw	r22, r24
    6c6e:	cd 01       	movw	r24, r26
    6c70:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    6c74:	9b 01       	movw	r18, r22
    6c76:	ac 01       	movw	r20, r24
    6c78:	80 91 2c 02 	lds	r24, 0x022C
    6c7c:	90 91 2d 02 	lds	r25, 0x022D
    6c80:	a0 91 2e 02 	lds	r26, 0x022E
    6c84:	b0 91 2f 02 	lds	r27, 0x022F
    6c88:	28 17       	cp	r18, r24
    6c8a:	39 07       	cpc	r19, r25
    6c8c:	4a 07       	cpc	r20, r26
    6c8e:	5b 07       	cpc	r21, r27
    6c90:	99 f5       	brne	.+102    	; 0x6cf8 <__vector_5+0xf0>
		TIMER2_PFUNC();                                     //to toggle led
    6c92:	e0 91 26 02 	lds	r30, 0x0226
    6c96:	f0 91 27 02 	lds	r31, 0x0227
    6c9a:	09 95       	icall
		TCNT2 = 256-(256*PRE_LOAD_TIMER2);                         //to begin from specific value
    6c9c:	04 e4       	ldi	r16, 0x44	; 68
    6c9e:	10 e0       	ldi	r17, 0x00	; 0
    6ca0:	80 91 62 02 	lds	r24, 0x0262
    6ca4:	90 91 63 02 	lds	r25, 0x0263
    6ca8:	a0 91 64 02 	lds	r26, 0x0264
    6cac:	b0 91 65 02 	lds	r27, 0x0265
    6cb0:	bc 01       	movw	r22, r24
    6cb2:	cd 01       	movw	r24, r26
    6cb4:	20 e0       	ldi	r18, 0x00	; 0
    6cb6:	30 e0       	ldi	r19, 0x00	; 0
    6cb8:	40 e8       	ldi	r20, 0x80	; 128
    6cba:	53 ec       	ldi	r21, 0xC3	; 195
    6cbc:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    6cc0:	dc 01       	movw	r26, r24
    6cc2:	cb 01       	movw	r24, r22
    6cc4:	bc 01       	movw	r22, r24
    6cc6:	cd 01       	movw	r24, r26
    6cc8:	20 e0       	ldi	r18, 0x00	; 0
    6cca:	30 e0       	ldi	r19, 0x00	; 0
    6ccc:	40 e8       	ldi	r20, 0x80	; 128
    6cce:	53 e4       	ldi	r21, 0x43	; 67
    6cd0:	0e 94 2d 11 	call	0x225a	; 0x225a <__addsf3>
    6cd4:	dc 01       	movw	r26, r24
    6cd6:	cb 01       	movw	r24, r22
    6cd8:	bc 01       	movw	r22, r24
    6cda:	cd 01       	movw	r24, r26
    6cdc:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    6ce0:	dc 01       	movw	r26, r24
    6ce2:	cb 01       	movw	r24, r22
    6ce4:	f8 01       	movw	r30, r16
    6ce6:	80 83       	st	Z, r24
		tick = 0 ;                                          //to start count from beginning again
    6ce8:	10 92 2c 02 	sts	0x022C, r1
    6cec:	10 92 2d 02 	sts	0x022D, r1
    6cf0:	10 92 2e 02 	sts	0x022E, r1
    6cf4:	10 92 2f 02 	sts	0x022F, r1
	}//end if
}//end ISR FUNC
    6cf8:	cf 91       	pop	r28
    6cfa:	df 91       	pop	r29
    6cfc:	ff 91       	pop	r31
    6cfe:	ef 91       	pop	r30
    6d00:	bf 91       	pop	r27
    6d02:	af 91       	pop	r26
    6d04:	9f 91       	pop	r25
    6d06:	8f 91       	pop	r24
    6d08:	7f 91       	pop	r23
    6d0a:	6f 91       	pop	r22
    6d0c:	5f 91       	pop	r21
    6d0e:	4f 91       	pop	r20
    6d10:	3f 91       	pop	r19
    6d12:	2f 91       	pop	r18
    6d14:	1f 91       	pop	r17
    6d16:	0f 91       	pop	r16
    6d18:	0f 90       	pop	r0
    6d1a:	0f be       	out	0x3f, r0	; 63
    6d1c:	0f 90       	pop	r0
    6d1e:	1f 90       	pop	r1
    6d20:	18 95       	reti

00006d22 <NULL_FUNCTION>:
#include"STD_TYPES.h"
#include"BIT_MATH.h"
#include "Timer1_cfg.h"
#include "Timer1_private.h"

void NULL_FUNCTION(void){}
    6d22:	df 93       	push	r29
    6d24:	cf 93       	push	r28
    6d26:	cd b7       	in	r28, 0x3d	; 61
    6d28:	de b7       	in	r29, 0x3e	; 62
    6d2a:	cf 91       	pop	r28
    6d2c:	df 91       	pop	r29
    6d2e:	08 95       	ret

00006d30 <TIMER1_VidCallback>:
void(*TIMER1_callback)(void)=&NULL_FUNCTION;
void(*TIMER1_ICU_callback)(void)=&NULL_FUNCTION;


void TIMER1_VidCallback(void(*pfun)(void))
{
    6d30:	df 93       	push	r29
    6d32:	cf 93       	push	r28
    6d34:	00 d0       	rcall	.+0      	; 0x6d36 <TIMER1_VidCallback+0x6>
    6d36:	cd b7       	in	r28, 0x3d	; 61
    6d38:	de b7       	in	r29, 0x3e	; 62
    6d3a:	9a 83       	std	Y+2, r25	; 0x02
    6d3c:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_callback=pfun;
    6d3e:	89 81       	ldd	r24, Y+1	; 0x01
    6d40:	9a 81       	ldd	r25, Y+2	; 0x02
    6d42:	90 93 07 02 	sts	0x0207, r25
    6d46:	80 93 06 02 	sts	0x0206, r24
}
    6d4a:	0f 90       	pop	r0
    6d4c:	0f 90       	pop	r0
    6d4e:	cf 91       	pop	r28
    6d50:	df 91       	pop	r29
    6d52:	08 95       	ret

00006d54 <TIMER1_VidICUcallback>:

void  TIMER1_VidICUcallback(void(*pfun)(void))
{
    6d54:	df 93       	push	r29
    6d56:	cf 93       	push	r28
    6d58:	00 d0       	rcall	.+0      	; 0x6d5a <TIMER1_VidICUcallback+0x6>
    6d5a:	cd b7       	in	r28, 0x3d	; 61
    6d5c:	de b7       	in	r29, 0x3e	; 62
    6d5e:	9a 83       	std	Y+2, r25	; 0x02
    6d60:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_ICU_callback=pfun;
    6d62:	89 81       	ldd	r24, Y+1	; 0x01
    6d64:	9a 81       	ldd	r25, Y+2	; 0x02
    6d66:	90 93 09 02 	sts	0x0209, r25
    6d6a:	80 93 08 02 	sts	0x0208, r24
}
    6d6e:	0f 90       	pop	r0
    6d70:	0f 90       	pop	r0
    6d72:	cf 91       	pop	r28
    6d74:	df 91       	pop	r29
    6d76:	08 95       	ret

00006d78 <TIMER1_VidSetClock>:


void TIMER1_VidSetClock()
{
    6d78:	df 93       	push	r29
    6d7a:	cf 93       	push	r28
    6d7c:	cd b7       	in	r28, 0x3d	; 61
    6d7e:	de b7       	in	r29, 0x3e	; 62
	/*Clear CS0,CS1,CS2	 bits*/
	TCCR1B=TCCR1B&0b11111000;
    6d80:	ae e4       	ldi	r26, 0x4E	; 78
    6d82:	b0 e0       	ldi	r27, 0x00	; 0
    6d84:	ee e4       	ldi	r30, 0x4E	; 78
    6d86:	f0 e0       	ldi	r31, 0x00	; 0
    6d88:	80 81       	ld	r24, Z
    6d8a:	88 7f       	andi	r24, 0xF8	; 248
    6d8c:	8c 93       	st	X, r24

#if TIMER1_CLOCK_MODE == MCU_CLOCK
	TCCR1B=TCCR1B|1;
#elif TIMER1_CLOCK_MODE == DIVIDE_8
	TCCR1B=TCCR1B|2;
    6d8e:	ae e4       	ldi	r26, 0x4E	; 78
    6d90:	b0 e0       	ldi	r27, 0x00	; 0
    6d92:	ee e4       	ldi	r30, 0x4E	; 78
    6d94:	f0 e0       	ldi	r31, 0x00	; 0
    6d96:	80 81       	ld	r24, Z
    6d98:	82 60       	ori	r24, 0x02	; 2
    6d9a:	8c 93       	st	X, r24
	TCCR1B=TCCR1B|6;
#elif TIMER1_CLOCK_MODE == T0_RISING
	TCCR1B=TCCR1B|7;
#endif

}
    6d9c:	cf 91       	pop	r28
    6d9e:	df 91       	pop	r29
    6da0:	08 95       	ret

00006da2 <TIMER1_VidStop>:

void TIMER1_VidStop()
{
    6da2:	df 93       	push	r29
    6da4:	cf 93       	push	r28
    6da6:	cd b7       	in	r28, 0x3d	; 61
    6da8:	de b7       	in	r29, 0x3e	; 62
	TCCR1B=0;
    6daa:	ee e4       	ldi	r30, 0x4E	; 78
    6dac:	f0 e0       	ldi	r31, 0x00	; 0
    6dae:	10 82       	st	Z, r1
}
    6db0:	cf 91       	pop	r28
    6db2:	df 91       	pop	r29
    6db4:	08 95       	ret

00006db6 <Servo>:


void Servo()
{
    6db6:	df 93       	push	r29
    6db8:	cf 93       	push	r28
    6dba:	cd b7       	in	r28, 0x3d	; 61
    6dbc:	de b7       	in	r29, 0x3e	; 62
	ICR1H=0;
    6dbe:	e7 e4       	ldi	r30, 0x47	; 71
    6dc0:	f0 e0       	ldi	r31, 0x00	; 0
    6dc2:	10 82       	st	Z, r1
	ICR1L=255;
    6dc4:	e6 e4       	ldi	r30, 0x46	; 70
    6dc6:	f0 e0       	ldi	r31, 0x00	; 0
    6dc8:	8f ef       	ldi	r24, 0xFF	; 255
    6dca:	80 83       	st	Z, r24
	OCR1AH=0;
    6dcc:	eb e4       	ldi	r30, 0x4B	; 75
    6dce:	f0 e0       	ldi	r31, 0x00	; 0
    6dd0:	10 82       	st	Z, r1
	OCR1AL=187;
    6dd2:	ea e4       	ldi	r30, 0x4A	; 74
    6dd4:	f0 e0       	ldi	r31, 0x00	; 0
    6dd6:	8b eb       	ldi	r24, 0xBB	; 187
    6dd8:	80 83       	st	Z, r24

}
    6dda:	cf 91       	pop	r28
    6ddc:	df 91       	pop	r29
    6dde:	08 95       	ret

00006de0 <TIMER1_VidInit>:

void TIMER1_VidInit()
{
    6de0:	df 93       	push	r29
    6de2:	cf 93       	push	r28
    6de4:	cd b7       	in	r28, 0x3d	; 61
    6de6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    6de8:	af e5       	ldi	r26, 0x5F	; 95
    6dea:	b0 e0       	ldi	r27, 0x00	; 0
    6dec:	ef e5       	ldi	r30, 0x5F	; 95
    6dee:	f0 e0       	ldi	r31, 0x00	; 0
    6df0:	80 81       	ld	r24, Z
    6df2:	80 68       	ori	r24, 0x80	; 128
    6df4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,WGM12);
	CLR_BIT(TCCR1B,WGM13);
	/*input capture*/
    SET_BIT(TCCR1B,6);
#elif TIMER1_OPERATING_MODE == FAST_PWM
	CLR_BIT(TCCR1A,COM1A0);
    6df6:	af e4       	ldi	r26, 0x4F	; 79
    6df8:	b0 e0       	ldi	r27, 0x00	; 0
    6dfa:	ef e4       	ldi	r30, 0x4F	; 79
    6dfc:	f0 e0       	ldi	r31, 0x00	; 0
    6dfe:	80 81       	ld	r24, Z
    6e00:	8f 7b       	andi	r24, 0xBF	; 191
    6e02:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1A1);
    6e04:	af e4       	ldi	r26, 0x4F	; 79
    6e06:	b0 e0       	ldi	r27, 0x00	; 0
    6e08:	ef e4       	ldi	r30, 0x4F	; 79
    6e0a:	f0 e0       	ldi	r31, 0x00	; 0
    6e0c:	80 81       	ld	r24, Z
    6e0e:	80 68       	ori	r24, 0x80	; 128
    6e10:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,COM1B0);
    6e12:	af e4       	ldi	r26, 0x4F	; 79
    6e14:	b0 e0       	ldi	r27, 0x00	; 0
    6e16:	ef e4       	ldi	r30, 0x4F	; 79
    6e18:	f0 e0       	ldi	r31, 0x00	; 0
    6e1a:	80 81       	ld	r24, Z
    6e1c:	8f 7e       	andi	r24, 0xEF	; 239
    6e1e:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1B1);
    6e20:	af e4       	ldi	r26, 0x4F	; 79
    6e22:	b0 e0       	ldi	r27, 0x00	; 0
    6e24:	ef e4       	ldi	r30, 0x4F	; 79
    6e26:	f0 e0       	ldi	r31, 0x00	; 0
    6e28:	80 81       	ld	r24, Z
    6e2a:	80 62       	ori	r24, 0x20	; 32
    6e2c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,FOC1A);
    6e2e:	af e4       	ldi	r26, 0x4F	; 79
    6e30:	b0 e0       	ldi	r27, 0x00	; 0
    6e32:	ef e4       	ldi	r30, 0x4F	; 79
    6e34:	f0 e0       	ldi	r31, 0x00	; 0
    6e36:	80 81       	ld	r24, Z
    6e38:	87 7f       	andi	r24, 0xF7	; 247
    6e3a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,FOC1B);
    6e3c:	af e4       	ldi	r26, 0x4F	; 79
    6e3e:	b0 e0       	ldi	r27, 0x00	; 0
    6e40:	ef e4       	ldi	r30, 0x4F	; 79
    6e42:	f0 e0       	ldi	r31, 0x00	; 0
    6e44:	80 81       	ld	r24, Z
    6e46:	8b 7f       	andi	r24, 0xFB	; 251
    6e48:	8c 93       	st	X, r24
	/*FAST PWM ICR1 as TOP*/
	CLR_BIT(TCCR1A,WGM10);
    6e4a:	af e4       	ldi	r26, 0x4F	; 79
    6e4c:	b0 e0       	ldi	r27, 0x00	; 0
    6e4e:	ef e4       	ldi	r30, 0x4F	; 79
    6e50:	f0 e0       	ldi	r31, 0x00	; 0
    6e52:	80 81       	ld	r24, Z
    6e54:	8e 7f       	andi	r24, 0xFE	; 254
    6e56:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
    6e58:	af e4       	ldi	r26, 0x4F	; 79
    6e5a:	b0 e0       	ldi	r27, 0x00	; 0
    6e5c:	ef e4       	ldi	r30, 0x4F	; 79
    6e5e:	f0 e0       	ldi	r31, 0x00	; 0
    6e60:	80 81       	ld	r24, Z
    6e62:	82 60       	ori	r24, 0x02	; 2
    6e64:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    6e66:	ae e4       	ldi	r26, 0x4E	; 78
    6e68:	b0 e0       	ldi	r27, 0x00	; 0
    6e6a:	ee e4       	ldi	r30, 0x4E	; 78
    6e6c:	f0 e0       	ldi	r31, 0x00	; 0
    6e6e:	80 81       	ld	r24, Z
    6e70:	88 60       	ori	r24, 0x08	; 8
    6e72:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM13);
    6e74:	ae e4       	ldi	r26, 0x4E	; 78
    6e76:	b0 e0       	ldi	r27, 0x00	; 0
    6e78:	ee e4       	ldi	r30, 0x4E	; 78
    6e7a:	f0 e0       	ldi	r31, 0x00	; 0
    6e7c:	80 81       	ld	r24, Z
    6e7e:	80 61       	ori	r24, 0x10	; 16
    6e80:	8c 93       	st	X, r24
	/*Enable Timer interrupts*/
	/*SET_BIT(TIMSK,OCIE1A);
	SET_BIT(TIMSK,TOIE1);
	SET_BIT(TIMSK,TICIE1);*/
#endif
	TIMER1_VidSetClock();
    6e82:	0e 94 bc 36 	call	0x6d78	; 0x6d78 <TIMER1_VidSetClock>
}
    6e86:	cf 91       	pop	r28
    6e88:	df 91       	pop	r29
    6e8a:	08 95       	ret

00006e8c <TIMER1_VidICURisingEdge>:

void TIMER1_VidICURisingEdge()
{
    6e8c:	df 93       	push	r29
    6e8e:	cf 93       	push	r28
    6e90:	cd b7       	in	r28, 0x3d	; 61
    6e92:	de b7       	in	r29, 0x3e	; 62
	   SET_BIT(TCCR1B,6);
    6e94:	ae e4       	ldi	r26, 0x4E	; 78
    6e96:	b0 e0       	ldi	r27, 0x00	; 0
    6e98:	ee e4       	ldi	r30, 0x4E	; 78
    6e9a:	f0 e0       	ldi	r31, 0x00	; 0
    6e9c:	80 81       	ld	r24, Z
    6e9e:	80 64       	ori	r24, 0x40	; 64
    6ea0:	8c 93       	st	X, r24
}
    6ea2:	cf 91       	pop	r28
    6ea4:	df 91       	pop	r29
    6ea6:	08 95       	ret

00006ea8 <TIMER1_VidICUFallingEdge>:

void TIMER1_VidICUFallingEdge()
{
    6ea8:	df 93       	push	r29
    6eaa:	cf 93       	push	r28
    6eac:	cd b7       	in	r28, 0x3d	; 61
    6eae:	de b7       	in	r29, 0x3e	; 62
	   CLR_BIT(TCCR1B,6);
    6eb0:	ae e4       	ldi	r26, 0x4E	; 78
    6eb2:	b0 e0       	ldi	r27, 0x00	; 0
    6eb4:	ee e4       	ldi	r30, 0x4E	; 78
    6eb6:	f0 e0       	ldi	r31, 0x00	; 0
    6eb8:	80 81       	ld	r24, Z
    6eba:	8f 7b       	andi	r24, 0xBF	; 191
    6ebc:	8c 93       	st	X, r24
}
    6ebe:	cf 91       	pop	r28
    6ec0:	df 91       	pop	r29
    6ec2:	08 95       	ret

00006ec4 <TIMER1_VidSetCompareMatchRegA>:


void TIMER1_VidSetCompareMatchRegA(u16 value)
{
    6ec4:	df 93       	push	r29
    6ec6:	cf 93       	push	r28
    6ec8:	00 d0       	rcall	.+0      	; 0x6eca <TIMER1_VidSetCompareMatchRegA+0x6>
    6eca:	cd b7       	in	r28, 0x3d	; 61
    6ecc:	de b7       	in	r29, 0x3e	; 62
    6ece:	9a 83       	std	Y+2, r25	; 0x02
    6ed0:	89 83       	std	Y+1, r24	; 0x01
	OCR1AH=(u8)(value>>8);
    6ed2:	eb e4       	ldi	r30, 0x4B	; 75
    6ed4:	f0 e0       	ldi	r31, 0x00	; 0
    6ed6:	89 81       	ldd	r24, Y+1	; 0x01
    6ed8:	9a 81       	ldd	r25, Y+2	; 0x02
    6eda:	89 2f       	mov	r24, r25
    6edc:	99 27       	eor	r25, r25
    6ede:	80 83       	st	Z, r24
	OCR1AL=(u8)value;
    6ee0:	ea e4       	ldi	r30, 0x4A	; 74
    6ee2:	f0 e0       	ldi	r31, 0x00	; 0
    6ee4:	89 81       	ldd	r24, Y+1	; 0x01
    6ee6:	80 83       	st	Z, r24

}
    6ee8:	0f 90       	pop	r0
    6eea:	0f 90       	pop	r0
    6eec:	cf 91       	pop	r28
    6eee:	df 91       	pop	r29
    6ef0:	08 95       	ret

00006ef2 <TIMER1_VidSetCompareMatchRegB>:

void TIMER1_VidSetCompareMatchRegB(u16 value)
{
    6ef2:	df 93       	push	r29
    6ef4:	cf 93       	push	r28
    6ef6:	00 d0       	rcall	.+0      	; 0x6ef8 <TIMER1_VidSetCompareMatchRegB+0x6>
    6ef8:	cd b7       	in	r28, 0x3d	; 61
    6efa:	de b7       	in	r29, 0x3e	; 62
    6efc:	9a 83       	std	Y+2, r25	; 0x02
    6efe:	89 83       	std	Y+1, r24	; 0x01

	OCR1BH=(u8)(value>>8);
    6f00:	e9 e4       	ldi	r30, 0x49	; 73
    6f02:	f0 e0       	ldi	r31, 0x00	; 0
    6f04:	89 81       	ldd	r24, Y+1	; 0x01
    6f06:	9a 81       	ldd	r25, Y+2	; 0x02
    6f08:	89 2f       	mov	r24, r25
    6f0a:	99 27       	eor	r25, r25
    6f0c:	80 83       	st	Z, r24
	OCR1BL=(u8)value;
    6f0e:	e8 e4       	ldi	r30, 0x48	; 72
    6f10:	f0 e0       	ldi	r31, 0x00	; 0
    6f12:	89 81       	ldd	r24, Y+1	; 0x01
    6f14:	80 83       	st	Z, r24
}
    6f16:	0f 90       	pop	r0
    6f18:	0f 90       	pop	r0
    6f1a:	cf 91       	pop	r28
    6f1c:	df 91       	pop	r29
    6f1e:	08 95       	ret

00006f20 <TIMER1_VidSetICR1Reg>:

void TIMER1_VidSetICR1Reg(u16 value)
{
    6f20:	df 93       	push	r29
    6f22:	cf 93       	push	r28
    6f24:	00 d0       	rcall	.+0      	; 0x6f26 <TIMER1_VidSetICR1Reg+0x6>
    6f26:	cd b7       	in	r28, 0x3d	; 61
    6f28:	de b7       	in	r29, 0x3e	; 62
    6f2a:	9a 83       	std	Y+2, r25	; 0x02
    6f2c:	89 83       	std	Y+1, r24	; 0x01
	ICR1H=(u8)(value>>8);
    6f2e:	e7 e4       	ldi	r30, 0x47	; 71
    6f30:	f0 e0       	ldi	r31, 0x00	; 0
    6f32:	89 81       	ldd	r24, Y+1	; 0x01
    6f34:	9a 81       	ldd	r25, Y+2	; 0x02
    6f36:	89 2f       	mov	r24, r25
    6f38:	99 27       	eor	r25, r25
    6f3a:	80 83       	st	Z, r24
	ICR1L=(u8)value;
    6f3c:	e6 e4       	ldi	r30, 0x46	; 70
    6f3e:	f0 e0       	ldi	r31, 0x00	; 0
    6f40:	89 81       	ldd	r24, Y+1	; 0x01
    6f42:	80 83       	st	Z, r24
}
    6f44:	0f 90       	pop	r0
    6f46:	0f 90       	pop	r0
    6f48:	cf 91       	pop	r28
    6f4a:	df 91       	pop	r29
    6f4c:	08 95       	ret

00006f4e <TIMER1_VidSetCounterRegister>:

void TIMER1_VidSetCounterRegister(u16 value)
{
    6f4e:	df 93       	push	r29
    6f50:	cf 93       	push	r28
    6f52:	00 d0       	rcall	.+0      	; 0x6f54 <TIMER1_VidSetCounterRegister+0x6>
    6f54:	cd b7       	in	r28, 0x3d	; 61
    6f56:	de b7       	in	r29, 0x3e	; 62
    6f58:	9a 83       	std	Y+2, r25	; 0x02
    6f5a:	89 83       	std	Y+1, r24	; 0x01
	TCNT1H=(u8)(value>>8);
    6f5c:	ed e4       	ldi	r30, 0x4D	; 77
    6f5e:	f0 e0       	ldi	r31, 0x00	; 0
    6f60:	89 81       	ldd	r24, Y+1	; 0x01
    6f62:	9a 81       	ldd	r25, Y+2	; 0x02
    6f64:	89 2f       	mov	r24, r25
    6f66:	99 27       	eor	r25, r25
    6f68:	80 83       	st	Z, r24
	TCNT1L=(u8)value;
    6f6a:	ec e4       	ldi	r30, 0x4C	; 76
    6f6c:	f0 e0       	ldi	r31, 0x00	; 0
    6f6e:	89 81       	ldd	r24, Y+1	; 0x01
    6f70:	80 83       	st	Z, r24
}
    6f72:	0f 90       	pop	r0
    6f74:	0f 90       	pop	r0
    6f76:	cf 91       	pop	r28
    6f78:	df 91       	pop	r29
    6f7a:	08 95       	ret

00006f7c <TIMER1_VidGetCounterRegister>:

u16 TIMER1_VidGetCounterRegister()
{
    6f7c:	df 93       	push	r29
    6f7e:	cf 93       	push	r28
    6f80:	00 d0       	rcall	.+0      	; 0x6f82 <TIMER1_VidGetCounterRegister+0x6>
    6f82:	00 d0       	rcall	.+0      	; 0x6f84 <TIMER1_VidGetCounterRegister+0x8>
    6f84:	cd b7       	in	r28, 0x3d	; 61
    6f86:	de b7       	in	r29, 0x3e	; 62
	u8 Low=TCNT1L;
    6f88:	ec e4       	ldi	r30, 0x4C	; 76
    6f8a:	f0 e0       	ldi	r31, 0x00	; 0
    6f8c:	80 81       	ld	r24, Z
    6f8e:	8c 83       	std	Y+4, r24	; 0x04
	u8 high=TCNT1H;
    6f90:	ed e4       	ldi	r30, 0x4D	; 77
    6f92:	f0 e0       	ldi	r31, 0x00	; 0
    6f94:	80 81       	ld	r24, Z
    6f96:	8b 83       	std	Y+3, r24	; 0x03
	u16 shifted_high=high<<8;
    6f98:	8b 81       	ldd	r24, Y+3	; 0x03
    6f9a:	88 2f       	mov	r24, r24
    6f9c:	90 e0       	ldi	r25, 0x00	; 0
    6f9e:	98 2f       	mov	r25, r24
    6fa0:	88 27       	eor	r24, r24
    6fa2:	9a 83       	std	Y+2, r25	; 0x02
    6fa4:	89 83       	std	Y+1, r24	; 0x01
	return(shifted_high+Low);
    6fa6:	8c 81       	ldd	r24, Y+4	; 0x04
    6fa8:	28 2f       	mov	r18, r24
    6faa:	30 e0       	ldi	r19, 0x00	; 0
    6fac:	89 81       	ldd	r24, Y+1	; 0x01
    6fae:	9a 81       	ldd	r25, Y+2	; 0x02
    6fb0:	82 0f       	add	r24, r18
    6fb2:	93 1f       	adc	r25, r19

}
    6fb4:	0f 90       	pop	r0
    6fb6:	0f 90       	pop	r0
    6fb8:	0f 90       	pop	r0
    6fba:	0f 90       	pop	r0
    6fbc:	cf 91       	pop	r28
    6fbe:	df 91       	pop	r29
    6fc0:	08 95       	ret

00006fc2 <TIMER1_VidGetICR1Register>:


u16 TIMER1_VidGetICR1Register()
{
    6fc2:	df 93       	push	r29
    6fc4:	cf 93       	push	r28
    6fc6:	00 d0       	rcall	.+0      	; 0x6fc8 <TIMER1_VidGetICR1Register+0x6>
    6fc8:	00 d0       	rcall	.+0      	; 0x6fca <TIMER1_VidGetICR1Register+0x8>
    6fca:	cd b7       	in	r28, 0x3d	; 61
    6fcc:	de b7       	in	r29, 0x3e	; 62
	u8 Low=ICR1L;
    6fce:	e6 e4       	ldi	r30, 0x46	; 70
    6fd0:	f0 e0       	ldi	r31, 0x00	; 0
    6fd2:	80 81       	ld	r24, Z
    6fd4:	8c 83       	std	Y+4, r24	; 0x04
	u8 high=ICR1H;
    6fd6:	e7 e4       	ldi	r30, 0x47	; 71
    6fd8:	f0 e0       	ldi	r31, 0x00	; 0
    6fda:	80 81       	ld	r24, Z
    6fdc:	8b 83       	std	Y+3, r24	; 0x03
	u16 shifted_high=high<<8;
    6fde:	8b 81       	ldd	r24, Y+3	; 0x03
    6fe0:	88 2f       	mov	r24, r24
    6fe2:	90 e0       	ldi	r25, 0x00	; 0
    6fe4:	98 2f       	mov	r25, r24
    6fe6:	88 27       	eor	r24, r24
    6fe8:	9a 83       	std	Y+2, r25	; 0x02
    6fea:	89 83       	std	Y+1, r24	; 0x01
	return(shifted_high+Low);
    6fec:	8c 81       	ldd	r24, Y+4	; 0x04
    6fee:	28 2f       	mov	r18, r24
    6ff0:	30 e0       	ldi	r19, 0x00	; 0
    6ff2:	89 81       	ldd	r24, Y+1	; 0x01
    6ff4:	9a 81       	ldd	r25, Y+2	; 0x02
    6ff6:	82 0f       	add	r24, r18
    6ff8:	93 1f       	adc	r25, r19

}
    6ffa:	0f 90       	pop	r0
    6ffc:	0f 90       	pop	r0
    6ffe:	0f 90       	pop	r0
    7000:	0f 90       	pop	r0
    7002:	cf 91       	pop	r28
    7004:	df 91       	pop	r29
    7006:	08 95       	ret

00007008 <TIMER1_VidPWMGenerationOC1A>:

void TIMER1_VidPWMGenerationOC1A(f32 PWMFreqKHz,f32 DutyPercentage)
{
    7008:	df 93       	push	r29
    700a:	cf 93       	push	r28
    700c:	cd b7       	in	r28, 0x3d	; 61
    700e:	de b7       	in	r29, 0x3e	; 62
    7010:	2a 97       	sbiw	r28, 0x0a	; 10
    7012:	0f b6       	in	r0, 0x3f	; 63
    7014:	f8 94       	cli
    7016:	de bf       	out	0x3e, r29	; 62
    7018:	0f be       	out	0x3f, r0	; 63
    701a:	cd bf       	out	0x3d, r28	; 61
    701c:	6b 83       	std	Y+3, r22	; 0x03
    701e:	7c 83       	std	Y+4, r23	; 0x04
    7020:	8d 83       	std	Y+5, r24	; 0x05
    7022:	9e 83       	std	Y+6, r25	; 0x06
    7024:	2f 83       	std	Y+7, r18	; 0x07
    7026:	38 87       	std	Y+8, r19	; 0x08
    7028:	49 87       	std	Y+9, r20	; 0x09
    702a:	5a 87       	std	Y+10, r21	; 0x0a
	u16 TOP=(MCU_INPUT_FREQ)/(PWMFreqKHz*1000*PRESCALER)-1;
    702c:	6b 81       	ldd	r22, Y+3	; 0x03
    702e:	7c 81       	ldd	r23, Y+4	; 0x04
    7030:	8d 81       	ldd	r24, Y+5	; 0x05
    7032:	9e 81       	ldd	r25, Y+6	; 0x06
    7034:	20 e0       	ldi	r18, 0x00	; 0
    7036:	30 e0       	ldi	r19, 0x00	; 0
    7038:	4a e7       	ldi	r20, 0x7A	; 122
    703a:	54 e4       	ldi	r21, 0x44	; 68
    703c:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    7040:	dc 01       	movw	r26, r24
    7042:	cb 01       	movw	r24, r22
    7044:	bc 01       	movw	r22, r24
    7046:	cd 01       	movw	r24, r26
    7048:	20 e0       	ldi	r18, 0x00	; 0
    704a:	30 e0       	ldi	r19, 0x00	; 0
    704c:	40 e0       	ldi	r20, 0x00	; 0
    704e:	51 e4       	ldi	r21, 0x41	; 65
    7050:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    7054:	dc 01       	movw	r26, r24
    7056:	cb 01       	movw	r24, r22
    7058:	9c 01       	movw	r18, r24
    705a:	ad 01       	movw	r20, r26
    705c:	60 e0       	ldi	r22, 0x00	; 0
    705e:	74 e2       	ldi	r23, 0x24	; 36
    7060:	84 ef       	ldi	r24, 0xF4	; 244
    7062:	9a e4       	ldi	r25, 0x4A	; 74
    7064:	0e 94 54 12 	call	0x24a8	; 0x24a8 <__divsf3>
    7068:	dc 01       	movw	r26, r24
    706a:	cb 01       	movw	r24, r22
    706c:	bc 01       	movw	r22, r24
    706e:	cd 01       	movw	r24, r26
    7070:	20 e0       	ldi	r18, 0x00	; 0
    7072:	30 e0       	ldi	r19, 0x00	; 0
    7074:	40 e8       	ldi	r20, 0x80	; 128
    7076:	5f e3       	ldi	r21, 0x3F	; 63
    7078:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__subsf3>
    707c:	dc 01       	movw	r26, r24
    707e:	cb 01       	movw	r24, r22
    7080:	bc 01       	movw	r22, r24
    7082:	cd 01       	movw	r24, r26
    7084:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    7088:	dc 01       	movw	r26, r24
    708a:	cb 01       	movw	r24, r22
    708c:	9a 83       	std	Y+2, r25	; 0x02
    708e:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_VidSetICR1Reg(TOP);
    7090:	89 81       	ldd	r24, Y+1	; 0x01
    7092:	9a 81       	ldd	r25, Y+2	; 0x02
    7094:	0e 94 90 37 	call	0x6f20	; 0x6f20 <TIMER1_VidSetICR1Reg>
	TIMER1_VidSetCompareMatchRegA(TOP*DutyPercentage/100);
    7098:	89 81       	ldd	r24, Y+1	; 0x01
    709a:	9a 81       	ldd	r25, Y+2	; 0x02
    709c:	cc 01       	movw	r24, r24
    709e:	a0 e0       	ldi	r26, 0x00	; 0
    70a0:	b0 e0       	ldi	r27, 0x00	; 0
    70a2:	bc 01       	movw	r22, r24
    70a4:	cd 01       	movw	r24, r26
    70a6:	0e 94 42 14 	call	0x2884	; 0x2884 <__floatunsisf>
    70aa:	dc 01       	movw	r26, r24
    70ac:	cb 01       	movw	r24, r22
    70ae:	bc 01       	movw	r22, r24
    70b0:	cd 01       	movw	r24, r26
    70b2:	2f 81       	ldd	r18, Y+7	; 0x07
    70b4:	38 85       	ldd	r19, Y+8	; 0x08
    70b6:	49 85       	ldd	r20, Y+9	; 0x09
    70b8:	5a 85       	ldd	r21, Y+10	; 0x0a
    70ba:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    70be:	dc 01       	movw	r26, r24
    70c0:	cb 01       	movw	r24, r22
    70c2:	bc 01       	movw	r22, r24
    70c4:	cd 01       	movw	r24, r26
    70c6:	20 e0       	ldi	r18, 0x00	; 0
    70c8:	30 e0       	ldi	r19, 0x00	; 0
    70ca:	48 ec       	ldi	r20, 0xC8	; 200
    70cc:	52 e4       	ldi	r21, 0x42	; 66
    70ce:	0e 94 54 12 	call	0x24a8	; 0x24a8 <__divsf3>
    70d2:	dc 01       	movw	r26, r24
    70d4:	cb 01       	movw	r24, r22
    70d6:	bc 01       	movw	r22, r24
    70d8:	cd 01       	movw	r24, r26
    70da:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    70de:	dc 01       	movw	r26, r24
    70e0:	cb 01       	movw	r24, r22
    70e2:	0e 94 62 37 	call	0x6ec4	; 0x6ec4 <TIMER1_VidSetCompareMatchRegA>
}
    70e6:	2a 96       	adiw	r28, 0x0a	; 10
    70e8:	0f b6       	in	r0, 0x3f	; 63
    70ea:	f8 94       	cli
    70ec:	de bf       	out	0x3e, r29	; 62
    70ee:	0f be       	out	0x3f, r0	; 63
    70f0:	cd bf       	out	0x3d, r28	; 61
    70f2:	cf 91       	pop	r28
    70f4:	df 91       	pop	r29
    70f6:	08 95       	ret

000070f8 <TIMER1_VidPWMGenerationOC1B>:

void TIMER1_VidPWMGenerationOC1B(f32 PWMFreqKHz,f32 DutyPercentage)
{
    70f8:	df 93       	push	r29
    70fa:	cf 93       	push	r28
    70fc:	cd b7       	in	r28, 0x3d	; 61
    70fe:	de b7       	in	r29, 0x3e	; 62
    7100:	2a 97       	sbiw	r28, 0x0a	; 10
    7102:	0f b6       	in	r0, 0x3f	; 63
    7104:	f8 94       	cli
    7106:	de bf       	out	0x3e, r29	; 62
    7108:	0f be       	out	0x3f, r0	; 63
    710a:	cd bf       	out	0x3d, r28	; 61
    710c:	6b 83       	std	Y+3, r22	; 0x03
    710e:	7c 83       	std	Y+4, r23	; 0x04
    7110:	8d 83       	std	Y+5, r24	; 0x05
    7112:	9e 83       	std	Y+6, r25	; 0x06
    7114:	2f 83       	std	Y+7, r18	; 0x07
    7116:	38 87       	std	Y+8, r19	; 0x08
    7118:	49 87       	std	Y+9, r20	; 0x09
    711a:	5a 87       	std	Y+10, r21	; 0x0a
	u16 TOP=(MCU_INPUT_FREQ)/(PWMFreqKHz*1000*PRESCALER)-1;
    711c:	6b 81       	ldd	r22, Y+3	; 0x03
    711e:	7c 81       	ldd	r23, Y+4	; 0x04
    7120:	8d 81       	ldd	r24, Y+5	; 0x05
    7122:	9e 81       	ldd	r25, Y+6	; 0x06
    7124:	20 e0       	ldi	r18, 0x00	; 0
    7126:	30 e0       	ldi	r19, 0x00	; 0
    7128:	4a e7       	ldi	r20, 0x7A	; 122
    712a:	54 e4       	ldi	r21, 0x44	; 68
    712c:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    7130:	dc 01       	movw	r26, r24
    7132:	cb 01       	movw	r24, r22
    7134:	bc 01       	movw	r22, r24
    7136:	cd 01       	movw	r24, r26
    7138:	20 e0       	ldi	r18, 0x00	; 0
    713a:	30 e0       	ldi	r19, 0x00	; 0
    713c:	40 e0       	ldi	r20, 0x00	; 0
    713e:	51 e4       	ldi	r21, 0x41	; 65
    7140:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    7144:	dc 01       	movw	r26, r24
    7146:	cb 01       	movw	r24, r22
    7148:	9c 01       	movw	r18, r24
    714a:	ad 01       	movw	r20, r26
    714c:	60 e0       	ldi	r22, 0x00	; 0
    714e:	74 e2       	ldi	r23, 0x24	; 36
    7150:	84 ef       	ldi	r24, 0xF4	; 244
    7152:	9a e4       	ldi	r25, 0x4A	; 74
    7154:	0e 94 54 12 	call	0x24a8	; 0x24a8 <__divsf3>
    7158:	dc 01       	movw	r26, r24
    715a:	cb 01       	movw	r24, r22
    715c:	bc 01       	movw	r22, r24
    715e:	cd 01       	movw	r24, r26
    7160:	20 e0       	ldi	r18, 0x00	; 0
    7162:	30 e0       	ldi	r19, 0x00	; 0
    7164:	40 e8       	ldi	r20, 0x80	; 128
    7166:	5f e3       	ldi	r21, 0x3F	; 63
    7168:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__subsf3>
    716c:	dc 01       	movw	r26, r24
    716e:	cb 01       	movw	r24, r22
    7170:	bc 01       	movw	r22, r24
    7172:	cd 01       	movw	r24, r26
    7174:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    7178:	dc 01       	movw	r26, r24
    717a:	cb 01       	movw	r24, r22
    717c:	9a 83       	std	Y+2, r25	; 0x02
    717e:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_VidSetICR1Reg(TOP);
    7180:	89 81       	ldd	r24, Y+1	; 0x01
    7182:	9a 81       	ldd	r25, Y+2	; 0x02
    7184:	0e 94 90 37 	call	0x6f20	; 0x6f20 <TIMER1_VidSetICR1Reg>
	TIMER1_VidSetCompareMatchRegB(TOP*DutyPercentage/100);
    7188:	89 81       	ldd	r24, Y+1	; 0x01
    718a:	9a 81       	ldd	r25, Y+2	; 0x02
    718c:	cc 01       	movw	r24, r24
    718e:	a0 e0       	ldi	r26, 0x00	; 0
    7190:	b0 e0       	ldi	r27, 0x00	; 0
    7192:	bc 01       	movw	r22, r24
    7194:	cd 01       	movw	r24, r26
    7196:	0e 94 42 14 	call	0x2884	; 0x2884 <__floatunsisf>
    719a:	dc 01       	movw	r26, r24
    719c:	cb 01       	movw	r24, r22
    719e:	bc 01       	movw	r22, r24
    71a0:	cd 01       	movw	r24, r26
    71a2:	2f 81       	ldd	r18, Y+7	; 0x07
    71a4:	38 85       	ldd	r19, Y+8	; 0x08
    71a6:	49 85       	ldd	r20, Y+9	; 0x09
    71a8:	5a 85       	ldd	r21, Y+10	; 0x0a
    71aa:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    71ae:	dc 01       	movw	r26, r24
    71b0:	cb 01       	movw	r24, r22
    71b2:	bc 01       	movw	r22, r24
    71b4:	cd 01       	movw	r24, r26
    71b6:	20 e0       	ldi	r18, 0x00	; 0
    71b8:	30 e0       	ldi	r19, 0x00	; 0
    71ba:	48 ec       	ldi	r20, 0xC8	; 200
    71bc:	52 e4       	ldi	r21, 0x42	; 66
    71be:	0e 94 54 12 	call	0x24a8	; 0x24a8 <__divsf3>
    71c2:	dc 01       	movw	r26, r24
    71c4:	cb 01       	movw	r24, r22
    71c6:	bc 01       	movw	r22, r24
    71c8:	cd 01       	movw	r24, r26
    71ca:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    71ce:	dc 01       	movw	r26, r24
    71d0:	cb 01       	movw	r24, r22
    71d2:	0e 94 79 37 	call	0x6ef2	; 0x6ef2 <TIMER1_VidSetCompareMatchRegB>
}
    71d6:	2a 96       	adiw	r28, 0x0a	; 10
    71d8:	0f b6       	in	r0, 0x3f	; 63
    71da:	f8 94       	cli
    71dc:	de bf       	out	0x3e, r29	; 62
    71de:	0f be       	out	0x3f, r0	; 63
    71e0:	cd bf       	out	0x3d, r28	; 61
    71e2:	cf 91       	pop	r28
    71e4:	df 91       	pop	r29
    71e6:	08 95       	ret

000071e8 <TIMER1_VidClearICF1>:

void TIMER1_VidClearICF1()
{
    71e8:	df 93       	push	r29
    71ea:	cf 93       	push	r28
    71ec:	cd b7       	in	r28, 0x3d	; 61
    71ee:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIFR,ICF1);
    71f0:	a8 e5       	ldi	r26, 0x58	; 88
    71f2:	b0 e0       	ldi	r27, 0x00	; 0
    71f4:	e8 e5       	ldi	r30, 0x58	; 88
    71f6:	f0 e0       	ldi	r31, 0x00	; 0
    71f8:	80 81       	ld	r24, Z
    71fa:	80 62       	ori	r24, 0x20	; 32
    71fc:	8c 93       	st	X, r24
}
    71fe:	cf 91       	pop	r28
    7200:	df 91       	pop	r29
    7202:	08 95       	ret

00007204 <TIMER1_U8GetICF1>:

u8 TIMER1_U8GetICF1()
{
    7204:	df 93       	push	r29
    7206:	cf 93       	push	r28
    7208:	cd b7       	in	r28, 0x3d	; 61
    720a:	de b7       	in	r29, 0x3e	; 62
	return(GET_BIT(TIFR,ICF1));
    720c:	e8 e5       	ldi	r30, 0x58	; 88
    720e:	f0 e0       	ldi	r31, 0x00	; 0
    7210:	80 81       	ld	r24, Z
    7212:	82 95       	swap	r24
    7214:	86 95       	lsr	r24
    7216:	87 70       	andi	r24, 0x07	; 7
    7218:	81 70       	andi	r24, 0x01	; 1
}
    721a:	cf 91       	pop	r28
    721c:	df 91       	pop	r29
    721e:	08 95       	ret

00007220 <TIMER1_VidReadPWMusingICU1>:


void TIMER1_VidReadPWMusingICU1(f128*Freq,f32*Duty_cycle)
{
    7220:	ef 92       	push	r14
    7222:	ff 92       	push	r15
    7224:	0f 93       	push	r16
    7226:	1f 93       	push	r17
    7228:	df 93       	push	r29
    722a:	cf 93       	push	r28
    722c:	cd b7       	in	r28, 0x3d	; 61
    722e:	de b7       	in	r29, 0x3e	; 62
    7230:	2e 97       	sbiw	r28, 0x0e	; 14
    7232:	0f b6       	in	r0, 0x3f	; 63
    7234:	f8 94       	cli
    7236:	de bf       	out	0x3e, r29	; 62
    7238:	0f be       	out	0x3f, r0	; 63
    723a:	cd bf       	out	0x3d, r28	; 61
    723c:	9c 87       	std	Y+12, r25	; 0x0c
    723e:	8b 87       	std	Y+11, r24	; 0x0b
    7240:	7e 87       	std	Y+14, r23	; 0x0e
    7242:	6d 87       	std	Y+13, r22	; 0x0d
	u16 Snap1,Snap2,Snap3,High,Period;
	TIMER1_VidSetCounterRegister(0);
    7244:	80 e0       	ldi	r24, 0x00	; 0
    7246:	90 e0       	ldi	r25, 0x00	; 0
    7248:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <TIMER1_VidSetCounterRegister>
	TIMER1_VidClearICF1();  	/* Clear ICF (Input Capture flag) flag */
    724c:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <TIMER1_VidClearICF1>
	TIMER1_VidICURisingEdge(); 	/* Rising edge, no prescaler */
    7250:	0e 94 46 37 	call	0x6e8c	; 0x6e8c <TIMER1_VidICURisingEdge>

	while (TIMER1_U8GetICF1()==0);
    7254:	0e 94 02 39 	call	0x7204	; 0x7204 <TIMER1_U8GetICF1>
    7258:	88 23       	and	r24, r24
    725a:	e1 f3       	breq	.-8      	; 0x7254 <TIMER1_VidReadPWMusingICU1+0x34>
	Snap1 = TIMER1_VidGetICR1Register();  		/* Take value of capture register */
    725c:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <TIMER1_VidGetICR1Register>
    7260:	9a 87       	std	Y+10, r25	; 0x0a
    7262:	89 87       	std	Y+9, r24	; 0x09
	TIMER1_VidClearICF1();  	/* Clear ICF flag */
    7264:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <TIMER1_VidClearICF1>

	TIMER1_VidICUFallingEdge();	/* Falling edge, no prescaler */
    7268:	0e 94 54 37 	call	0x6ea8	; 0x6ea8 <TIMER1_VidICUFallingEdge>
	while (TIMER1_U8GetICF1()== 0);
    726c:	0e 94 02 39 	call	0x7204	; 0x7204 <TIMER1_U8GetICF1>
    7270:	88 23       	and	r24, r24
    7272:	e1 f3       	breq	.-8      	; 0x726c <TIMER1_VidReadPWMusingICU1+0x4c>
	Snap2 = TIMER1_VidGetICR1Register();
    7274:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <TIMER1_VidGetICR1Register>
    7278:	98 87       	std	Y+8, r25	; 0x08
    727a:	8f 83       	std	Y+7, r24	; 0x07
	TIMER1_VidClearICF1();   	/* Clear ICF flag */
    727c:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <TIMER1_VidClearICF1>

	TIMER1_VidICURisingEdge();  	/* Rising edge, no prescaler */
    7280:	0e 94 46 37 	call	0x6e8c	; 0x6e8c <TIMER1_VidICURisingEdge>
	while (TIMER1_U8GetICF1()== 0);
    7284:	0e 94 02 39 	call	0x7204	; 0x7204 <TIMER1_U8GetICF1>
    7288:	88 23       	and	r24, r24
    728a:	e1 f3       	breq	.-8      	; 0x7284 <TIMER1_VidReadPWMusingICU1+0x64>
	Snap3 = TIMER1_VidGetICR1Register(); /* Take value of capture register */
    728c:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <TIMER1_VidGetICR1Register>
    7290:	9e 83       	std	Y+6, r25	; 0x06
    7292:	8d 83       	std	Y+5, r24	; 0x05
	TIMER1_VidClearICF1();    	/* Clear ICF flag */
    7294:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <TIMER1_VidClearICF1>
	if(Snap1<Snap2 && Snap2<Snap3)
    7298:	29 85       	ldd	r18, Y+9	; 0x09
    729a:	3a 85       	ldd	r19, Y+10	; 0x0a
    729c:	8f 81       	ldd	r24, Y+7	; 0x07
    729e:	98 85       	ldd	r25, Y+8	; 0x08
    72a0:	28 17       	cp	r18, r24
    72a2:	39 07       	cpc	r19, r25
    72a4:	08 f0       	brcs	.+2      	; 0x72a8 <TIMER1_VidReadPWMusingICU1+0x88>
    72a6:	64 c0       	rjmp	.+200    	; 0x7370 <TIMER1_VidReadPWMusingICU1+0x150>
    72a8:	2f 81       	ldd	r18, Y+7	; 0x07
    72aa:	38 85       	ldd	r19, Y+8	; 0x08
    72ac:	8d 81       	ldd	r24, Y+5	; 0x05
    72ae:	9e 81       	ldd	r25, Y+6	; 0x06
    72b0:	28 17       	cp	r18, r24
    72b2:	39 07       	cpc	r19, r25
    72b4:	08 f0       	brcs	.+2      	; 0x72b8 <TIMER1_VidReadPWMusingICU1+0x98>
    72b6:	5c c0       	rjmp	.+184    	; 0x7370 <TIMER1_VidReadPWMusingICU1+0x150>
	{
		High=Snap2-Snap1;
    72b8:	2f 81       	ldd	r18, Y+7	; 0x07
    72ba:	38 85       	ldd	r19, Y+8	; 0x08
    72bc:	89 85       	ldd	r24, Y+9	; 0x09
    72be:	9a 85       	ldd	r25, Y+10	; 0x0a
    72c0:	a9 01       	movw	r20, r18
    72c2:	48 1b       	sub	r20, r24
    72c4:	59 0b       	sbc	r21, r25
    72c6:	ca 01       	movw	r24, r20
    72c8:	9c 83       	std	Y+4, r25	; 0x04
    72ca:	8b 83       	std	Y+3, r24	; 0x03
		Period=Snap3-Snap1;
    72cc:	2d 81       	ldd	r18, Y+5	; 0x05
    72ce:	3e 81       	ldd	r19, Y+6	; 0x06
    72d0:	89 85       	ldd	r24, Y+9	; 0x09
    72d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    72d4:	a9 01       	movw	r20, r18
    72d6:	48 1b       	sub	r20, r24
    72d8:	59 0b       	sbc	r21, r25
    72da:	ca 01       	movw	r24, r20
    72dc:	9a 83       	std	Y+2, r25	; 0x02
    72de:	89 83       	std	Y+1, r24	; 0x01
		*Freq=((MCU_INPUT_FREQ/PRESCALER)/Period);
    72e0:	89 81       	ldd	r24, Y+1	; 0x01
    72e2:	9a 81       	ldd	r25, Y+2	; 0x02
    72e4:	9c 01       	movw	r18, r24
    72e6:	40 e0       	ldi	r20, 0x00	; 0
    72e8:	50 e0       	ldi	r21, 0x00	; 0
    72ea:	80 e4       	ldi	r24, 0x40	; 64
    72ec:	92 e4       	ldi	r25, 0x42	; 66
    72ee:	af e0       	ldi	r26, 0x0F	; 15
    72f0:	b0 e0       	ldi	r27, 0x00	; 0
    72f2:	bc 01       	movw	r22, r24
    72f4:	cd 01       	movw	r24, r26
    72f6:	0e 94 2d 3a 	call	0x745a	; 0x745a <__divmodsi4>
    72fa:	da 01       	movw	r26, r20
    72fc:	c9 01       	movw	r24, r18
    72fe:	bc 01       	movw	r22, r24
    7300:	cd 01       	movw	r24, r26
    7302:	0e 94 90 13 	call	0x2720	; 0x2720 <__floatsisf>
    7306:	dc 01       	movw	r26, r24
    7308:	cb 01       	movw	r24, r22
    730a:	eb 85       	ldd	r30, Y+11	; 0x0b
    730c:	fc 85       	ldd	r31, Y+12	; 0x0c
    730e:	80 83       	st	Z, r24
    7310:	91 83       	std	Z+1, r25	; 0x01
    7312:	a2 83       	std	Z+2, r26	; 0x02
    7314:	b3 83       	std	Z+3, r27	; 0x03
		*Duty_cycle =((f32)High/(f32)Period)*100;
    7316:	8b 81       	ldd	r24, Y+3	; 0x03
    7318:	9c 81       	ldd	r25, Y+4	; 0x04
    731a:	cc 01       	movw	r24, r24
    731c:	a0 e0       	ldi	r26, 0x00	; 0
    731e:	b0 e0       	ldi	r27, 0x00	; 0
    7320:	bc 01       	movw	r22, r24
    7322:	cd 01       	movw	r24, r26
    7324:	0e 94 42 14 	call	0x2884	; 0x2884 <__floatunsisf>
    7328:	7b 01       	movw	r14, r22
    732a:	8c 01       	movw	r16, r24
    732c:	89 81       	ldd	r24, Y+1	; 0x01
    732e:	9a 81       	ldd	r25, Y+2	; 0x02
    7330:	cc 01       	movw	r24, r24
    7332:	a0 e0       	ldi	r26, 0x00	; 0
    7334:	b0 e0       	ldi	r27, 0x00	; 0
    7336:	bc 01       	movw	r22, r24
    7338:	cd 01       	movw	r24, r26
    733a:	0e 94 42 14 	call	0x2884	; 0x2884 <__floatunsisf>
    733e:	9b 01       	movw	r18, r22
    7340:	ac 01       	movw	r20, r24
    7342:	c8 01       	movw	r24, r16
    7344:	b7 01       	movw	r22, r14
    7346:	0e 94 54 12 	call	0x24a8	; 0x24a8 <__divsf3>
    734a:	dc 01       	movw	r26, r24
    734c:	cb 01       	movw	r24, r22
    734e:	bc 01       	movw	r22, r24
    7350:	cd 01       	movw	r24, r26
    7352:	20 e0       	ldi	r18, 0x00	; 0
    7354:	30 e0       	ldi	r19, 0x00	; 0
    7356:	48 ec       	ldi	r20, 0xC8	; 200
    7358:	52 e4       	ldi	r21, 0x42	; 66
    735a:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__mulsf3>
    735e:	dc 01       	movw	r26, r24
    7360:	cb 01       	movw	r24, r22
    7362:	ed 85       	ldd	r30, Y+13	; 0x0d
    7364:	fe 85       	ldd	r31, Y+14	; 0x0e
    7366:	80 83       	st	Z, r24
    7368:	91 83       	std	Z+1, r25	; 0x01
    736a:	a2 83       	std	Z+2, r26	; 0x02
    736c:	b3 83       	std	Z+3, r27	; 0x03
    736e:	14 c0       	rjmp	.+40     	; 0x7398 <TIMER1_VidReadPWMusingICU1+0x178>

	}
	else
	{
		*Freq=-1;
    7370:	eb 85       	ldd	r30, Y+11	; 0x0b
    7372:	fc 85       	ldd	r31, Y+12	; 0x0c
    7374:	80 e0       	ldi	r24, 0x00	; 0
    7376:	90 e0       	ldi	r25, 0x00	; 0
    7378:	a0 e8       	ldi	r26, 0x80	; 128
    737a:	bf eb       	ldi	r27, 0xBF	; 191
    737c:	80 83       	st	Z, r24
    737e:	91 83       	std	Z+1, r25	; 0x01
    7380:	a2 83       	std	Z+2, r26	; 0x02
    7382:	b3 83       	std	Z+3, r27	; 0x03
		*Duty_cycle=-1;
    7384:	ed 85       	ldd	r30, Y+13	; 0x0d
    7386:	fe 85       	ldd	r31, Y+14	; 0x0e
    7388:	80 e0       	ldi	r24, 0x00	; 0
    738a:	90 e0       	ldi	r25, 0x00	; 0
    738c:	a0 e8       	ldi	r26, 0x80	; 128
    738e:	bf eb       	ldi	r27, 0xBF	; 191
    7390:	80 83       	st	Z, r24
    7392:	91 83       	std	Z+1, r25	; 0x01
    7394:	a2 83       	std	Z+2, r26	; 0x02
    7396:	b3 83       	std	Z+3, r27	; 0x03
	}

}
    7398:	2e 96       	adiw	r28, 0x0e	; 14
    739a:	0f b6       	in	r0, 0x3f	; 63
    739c:	f8 94       	cli
    739e:	de bf       	out	0x3e, r29	; 62
    73a0:	0f be       	out	0x3f, r0	; 63
    73a2:	cd bf       	out	0x3d, r28	; 61
    73a4:	cf 91       	pop	r28
    73a6:	df 91       	pop	r29
    73a8:	1f 91       	pop	r17
    73aa:	0f 91       	pop	r16
    73ac:	ff 90       	pop	r15
    73ae:	ef 90       	pop	r14
    73b0:	08 95       	ret

000073b2 <main>:
	u8 ExistHuman = 0 ;                                   //to detect if human in room or not



int main()
{
    73b2:	df 93       	push	r29
    73b4:	cf 93       	push	r28
    73b6:	cd b7       	in	r28, 0x3d	; 61
    73b8:	de b7       	in	r29, 0x3e	; 62
	FINALPROJECT_VidInit();                               //to initialize all functions that we need
    73ba:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <FINALPROJECT_VidInit>
	

	while(1)
	{
		/* first check on temperature */
		temp = LM35_U16_ReadTemp() ;
    73be:	0e 94 3e 1f 	call	0x3e7c	; 0x3e7c <LM35_U16_ReadTemp>
    73c2:	80 93 66 02 	sts	0x0266, r24

		/*
		to make sure that the temperature not excess
		40 while u entered password and return normal state if temperature less than 40'C
		*/
		StateBeforeCheck(temp);
    73c6:	80 91 66 02 	lds	r24, 0x0266
    73ca:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <StateBeforeCheck>

		/* to enter the numbers in compared array with the default */
		EnterID();
    73ce:	0e 94 a1 23 	call	0x4742	; 0x4742 <EnterID>
				
		/* to check on password if it's correct */
		Home_work =  CheckOnPassword();
    73d2:	0e 94 9f 21 	call	0x433e	; 0x433e <CheckOnPassword>
    73d6:	80 93 67 02 	sts	0x0267, r24

		/* to make some orders on false password */
		if(Home_work==0){IsPasswordFalse();}
    73da:	80 91 67 02 	lds	r24, 0x0267
    73de:	88 23       	and	r24, r24
    73e0:	11 f4       	brne	.+4      	; 0x73e6 <main+0x34>
    73e2:	0e 94 6e 22 	call	0x44dc	; 0x44dc <IsPasswordFalse>
			
		ExistHuman = NumOfHumansInRoom()  ;
    73e6:	0e 94 93 23 	call	0x4726	; 0x4726 <NumOfHumansInRoom>
    73ea:	80 93 68 02 	sts	0x0268, r24
		
		RoomTemp();  /* Sync on temperature  */
    73ee:	0e 94 e7 23 	call	0x47ce	; 0x47ce <RoomTemp>
    73f2:	e5 cf       	rjmp	.-54     	; 0x73be <main+0xc>

000073f4 <__mulsi3>:
    73f4:	62 9f       	mul	r22, r18
    73f6:	d0 01       	movw	r26, r0
    73f8:	73 9f       	mul	r23, r19
    73fa:	f0 01       	movw	r30, r0
    73fc:	82 9f       	mul	r24, r18
    73fe:	e0 0d       	add	r30, r0
    7400:	f1 1d       	adc	r31, r1
    7402:	64 9f       	mul	r22, r20
    7404:	e0 0d       	add	r30, r0
    7406:	f1 1d       	adc	r31, r1
    7408:	92 9f       	mul	r25, r18
    740a:	f0 0d       	add	r31, r0
    740c:	83 9f       	mul	r24, r19
    740e:	f0 0d       	add	r31, r0
    7410:	74 9f       	mul	r23, r20
    7412:	f0 0d       	add	r31, r0
    7414:	65 9f       	mul	r22, r21
    7416:	f0 0d       	add	r31, r0
    7418:	99 27       	eor	r25, r25
    741a:	72 9f       	mul	r23, r18
    741c:	b0 0d       	add	r27, r0
    741e:	e1 1d       	adc	r30, r1
    7420:	f9 1f       	adc	r31, r25
    7422:	63 9f       	mul	r22, r19
    7424:	b0 0d       	add	r27, r0
    7426:	e1 1d       	adc	r30, r1
    7428:	f9 1f       	adc	r31, r25
    742a:	bd 01       	movw	r22, r26
    742c:	cf 01       	movw	r24, r30
    742e:	11 24       	eor	r1, r1
    7430:	08 95       	ret

00007432 <__udivmodhi4>:
    7432:	aa 1b       	sub	r26, r26
    7434:	bb 1b       	sub	r27, r27
    7436:	51 e1       	ldi	r21, 0x11	; 17
    7438:	07 c0       	rjmp	.+14     	; 0x7448 <__udivmodhi4_ep>

0000743a <__udivmodhi4_loop>:
    743a:	aa 1f       	adc	r26, r26
    743c:	bb 1f       	adc	r27, r27
    743e:	a6 17       	cp	r26, r22
    7440:	b7 07       	cpc	r27, r23
    7442:	10 f0       	brcs	.+4      	; 0x7448 <__udivmodhi4_ep>
    7444:	a6 1b       	sub	r26, r22
    7446:	b7 0b       	sbc	r27, r23

00007448 <__udivmodhi4_ep>:
    7448:	88 1f       	adc	r24, r24
    744a:	99 1f       	adc	r25, r25
    744c:	5a 95       	dec	r21
    744e:	a9 f7       	brne	.-22     	; 0x743a <__udivmodhi4_loop>
    7450:	80 95       	com	r24
    7452:	90 95       	com	r25
    7454:	bc 01       	movw	r22, r24
    7456:	cd 01       	movw	r24, r26
    7458:	08 95       	ret

0000745a <__divmodsi4>:
    745a:	97 fb       	bst	r25, 7
    745c:	09 2e       	mov	r0, r25
    745e:	05 26       	eor	r0, r21
    7460:	0e d0       	rcall	.+28     	; 0x747e <__divmodsi4_neg1>
    7462:	57 fd       	sbrc	r21, 7
    7464:	04 d0       	rcall	.+8      	; 0x746e <__divmodsi4_neg2>
    7466:	14 d0       	rcall	.+40     	; 0x7490 <__udivmodsi4>
    7468:	0a d0       	rcall	.+20     	; 0x747e <__divmodsi4_neg1>
    746a:	00 1c       	adc	r0, r0
    746c:	38 f4       	brcc	.+14     	; 0x747c <__divmodsi4_exit>

0000746e <__divmodsi4_neg2>:
    746e:	50 95       	com	r21
    7470:	40 95       	com	r20
    7472:	30 95       	com	r19
    7474:	21 95       	neg	r18
    7476:	3f 4f       	sbci	r19, 0xFF	; 255
    7478:	4f 4f       	sbci	r20, 0xFF	; 255
    747a:	5f 4f       	sbci	r21, 0xFF	; 255

0000747c <__divmodsi4_exit>:
    747c:	08 95       	ret

0000747e <__divmodsi4_neg1>:
    747e:	f6 f7       	brtc	.-4      	; 0x747c <__divmodsi4_exit>
    7480:	90 95       	com	r25
    7482:	80 95       	com	r24
    7484:	70 95       	com	r23
    7486:	61 95       	neg	r22
    7488:	7f 4f       	sbci	r23, 0xFF	; 255
    748a:	8f 4f       	sbci	r24, 0xFF	; 255
    748c:	9f 4f       	sbci	r25, 0xFF	; 255
    748e:	08 95       	ret

00007490 <__udivmodsi4>:
    7490:	a1 e2       	ldi	r26, 0x21	; 33
    7492:	1a 2e       	mov	r1, r26
    7494:	aa 1b       	sub	r26, r26
    7496:	bb 1b       	sub	r27, r27
    7498:	fd 01       	movw	r30, r26
    749a:	0d c0       	rjmp	.+26     	; 0x74b6 <__udivmodsi4_ep>

0000749c <__udivmodsi4_loop>:
    749c:	aa 1f       	adc	r26, r26
    749e:	bb 1f       	adc	r27, r27
    74a0:	ee 1f       	adc	r30, r30
    74a2:	ff 1f       	adc	r31, r31
    74a4:	a2 17       	cp	r26, r18
    74a6:	b3 07       	cpc	r27, r19
    74a8:	e4 07       	cpc	r30, r20
    74aa:	f5 07       	cpc	r31, r21
    74ac:	20 f0       	brcs	.+8      	; 0x74b6 <__udivmodsi4_ep>
    74ae:	a2 1b       	sub	r26, r18
    74b0:	b3 0b       	sbc	r27, r19
    74b2:	e4 0b       	sbc	r30, r20
    74b4:	f5 0b       	sbc	r31, r21

000074b6 <__udivmodsi4_ep>:
    74b6:	66 1f       	adc	r22, r22
    74b8:	77 1f       	adc	r23, r23
    74ba:	88 1f       	adc	r24, r24
    74bc:	99 1f       	adc	r25, r25
    74be:	1a 94       	dec	r1
    74c0:	69 f7       	brne	.-38     	; 0x749c <__udivmodsi4_loop>
    74c2:	60 95       	com	r22
    74c4:	70 95       	com	r23
    74c6:	80 95       	com	r24
    74c8:	90 95       	com	r25
    74ca:	9b 01       	movw	r18, r22
    74cc:	ac 01       	movw	r20, r24
    74ce:	bd 01       	movw	r22, r26
    74d0:	cf 01       	movw	r24, r30
    74d2:	08 95       	ret

000074d4 <__prologue_saves__>:
    74d4:	2f 92       	push	r2
    74d6:	3f 92       	push	r3
    74d8:	4f 92       	push	r4
    74da:	5f 92       	push	r5
    74dc:	6f 92       	push	r6
    74de:	7f 92       	push	r7
    74e0:	8f 92       	push	r8
    74e2:	9f 92       	push	r9
    74e4:	af 92       	push	r10
    74e6:	bf 92       	push	r11
    74e8:	cf 92       	push	r12
    74ea:	df 92       	push	r13
    74ec:	ef 92       	push	r14
    74ee:	ff 92       	push	r15
    74f0:	0f 93       	push	r16
    74f2:	1f 93       	push	r17
    74f4:	cf 93       	push	r28
    74f6:	df 93       	push	r29
    74f8:	cd b7       	in	r28, 0x3d	; 61
    74fa:	de b7       	in	r29, 0x3e	; 62
    74fc:	ca 1b       	sub	r28, r26
    74fe:	db 0b       	sbc	r29, r27
    7500:	0f b6       	in	r0, 0x3f	; 63
    7502:	f8 94       	cli
    7504:	de bf       	out	0x3e, r29	; 62
    7506:	0f be       	out	0x3f, r0	; 63
    7508:	cd bf       	out	0x3d, r28	; 61
    750a:	09 94       	ijmp

0000750c <__epilogue_restores__>:
    750c:	2a 88       	ldd	r2, Y+18	; 0x12
    750e:	39 88       	ldd	r3, Y+17	; 0x11
    7510:	48 88       	ldd	r4, Y+16	; 0x10
    7512:	5f 84       	ldd	r5, Y+15	; 0x0f
    7514:	6e 84       	ldd	r6, Y+14	; 0x0e
    7516:	7d 84       	ldd	r7, Y+13	; 0x0d
    7518:	8c 84       	ldd	r8, Y+12	; 0x0c
    751a:	9b 84       	ldd	r9, Y+11	; 0x0b
    751c:	aa 84       	ldd	r10, Y+10	; 0x0a
    751e:	b9 84       	ldd	r11, Y+9	; 0x09
    7520:	c8 84       	ldd	r12, Y+8	; 0x08
    7522:	df 80       	ldd	r13, Y+7	; 0x07
    7524:	ee 80       	ldd	r14, Y+6	; 0x06
    7526:	fd 80       	ldd	r15, Y+5	; 0x05
    7528:	0c 81       	ldd	r16, Y+4	; 0x04
    752a:	1b 81       	ldd	r17, Y+3	; 0x03
    752c:	aa 81       	ldd	r26, Y+2	; 0x02
    752e:	b9 81       	ldd	r27, Y+1	; 0x01
    7530:	ce 0f       	add	r28, r30
    7532:	d1 1d       	adc	r29, r1
    7534:	0f b6       	in	r0, 0x3f	; 63
    7536:	f8 94       	cli
    7538:	de bf       	out	0x3e, r29	; 62
    753a:	0f be       	out	0x3f, r0	; 63
    753c:	cd bf       	out	0x3d, r28	; 61
    753e:	ed 01       	movw	r28, r26
    7540:	08 95       	ret

00007542 <_exit>:
    7542:	f8 94       	cli

00007544 <__stop_program>:
    7544:	ff cf       	rjmp	.-2      	; 0x7544 <__stop_program>
